diff -urN Python-2.7.11/a.out Python-2.7.11-em/a.out
--- Python-2.7.11/a.out	1970-01-01 01:00:00.000000000 +0100
+++ Python-2.7.11-em/a.out	2016-05-15 02:53:45.198236934 +0200
@@ -0,0 +1,5748 @@
+#!/opt/sdk/emsdk/node/4.1.1_64bit/bin/node
+// The Module object: Our interface to the outside world. We import
+// and export values on it, and do the work to get that through
+// closure compiler if necessary. There are various ways Module can be used:
+// 1. Not defined. We create it here
+// 2. A function parameter, function(Module) { ..generated code.. }
+// 3. pre-run appended it, var Module = {}; ..generated code..
+// 4. External script tag defines var Module.
+// We need to do an eval in order to handle the closure compiler
+// case, where this code here is minified but Module was defined
+// elsewhere (e.g. case 4 above). We also need to check if Module
+// already exists (e.g. case 3 above).
+// Note that if you want to run closure, and also to use Module
+// after the generated code, you will need to define   var Module = {};
+// before the code. Then that object will be used in the code, and you
+// can continue to use Module afterwards as well.
+var Module;
+if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};
+
+// Sometimes an existing Module object exists with properties
+// meant to overwrite the default module functionality. Here
+// we collect those properties and reapply _after_ we configure
+// the current environment's defaults to avoid having to be so
+// defensive during initialization.
+var moduleOverrides = {};
+for (var key in Module) {
+  if (Module.hasOwnProperty(key)) {
+    moduleOverrides[key] = Module[key];
+  }
+}
+
+// The environment setup code below is customized to use Module.
+// *** Environment setup code ***
+var ENVIRONMENT_IS_WEB = false;
+var ENVIRONMENT_IS_WORKER = false;
+var ENVIRONMENT_IS_NODE = false;
+var ENVIRONMENT_IS_SHELL = false;
+
+// Three configurations we can be running in:
+// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
+// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
+// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
+
+if (Module['ENVIRONMENT']) {
+  if (Module['ENVIRONMENT'] === 'WEB') {
+    ENVIRONMENT_IS_WEB = true;
+  } else if (Module['ENVIRONMENT'] === 'WORKER') {
+    ENVIRONMENT_IS_WORKER = true;
+  } else if (Module['ENVIRONMENT'] === 'NODE') {
+    ENVIRONMENT_IS_NODE = true;
+  } else if (Module['ENVIRONMENT'] === 'SHELL') {
+    ENVIRONMENT_IS_SHELL = true;
+  } else {
+    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
+  }
+} else {
+  ENVIRONMENT_IS_WEB = typeof window === 'object';
+  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
+  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
+  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
+}
+
+
+if (ENVIRONMENT_IS_NODE) {
+  // Expose functionality in the same simple way that the shells work
+  // Note that we pollute the global namespace here, otherwise we break in node
+  if (!Module['print']) Module['print'] = console.log;
+  if (!Module['printErr']) Module['printErr'] = console.warn;
+
+  var nodeFS;
+  var nodePath;
+
+  Module['read'] = function read(filename, binary) {
+    if (!nodeFS) nodeFS = require('fs');
+    if (!nodePath) nodePath = require('path');
+    filename = nodePath['normalize'](filename);
+    var ret = nodeFS['readFileSync'](filename);
+    return binary ? ret : ret.toString();
+  };
+
+  Module['readBinary'] = function readBinary(filename) {
+    var ret = Module['read'](filename, true);
+    if (!ret.buffer) {
+      ret = new Uint8Array(ret);
+    }
+    assert(ret.buffer);
+    return ret;
+  };
+
+  Module['load'] = function load(f) {
+    globalEval(read(f));
+  };
+
+  if (!Module['thisProgram']) {
+    if (process['argv'].length > 1) {
+      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
+    } else {
+      Module['thisProgram'] = 'unknown-program';
+    }
+  }
+
+  Module['arguments'] = process['argv'].slice(2);
+
+  if (typeof module !== 'undefined') {
+    module['exports'] = Module;
+  }
+
+  process['on']('uncaughtException', function(ex) {
+    // suppress ExitStatus exceptions from showing an error
+    if (!(ex instanceof ExitStatus)) {
+      throw ex;
+    }
+  });
+
+  Module['inspect'] = function () { return '[Emscripten Module object]'; };
+}
+else if (ENVIRONMENT_IS_SHELL) {
+  if (!Module['print']) Module['print'] = print;
+  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
+
+  if (typeof read != 'undefined') {
+    Module['read'] = read;
+  } else {
+    Module['read'] = function read() { throw 'no read() available (jsc?)' };
+  }
+
+  Module['readBinary'] = function readBinary(f) {
+    if (typeof readbuffer === 'function') {
+      return new Uint8Array(readbuffer(f));
+    }
+    var data = read(f, 'binary');
+    assert(typeof data === 'object');
+    return data;
+  };
+
+  if (typeof scriptArgs != 'undefined') {
+    Module['arguments'] = scriptArgs;
+  } else if (typeof arguments != 'undefined') {
+    Module['arguments'] = arguments;
+  }
+
+}
+else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
+  Module['read'] = function read(url) {
+    var xhr = new XMLHttpRequest();
+    xhr.open('GET', url, false);
+    xhr.send(null);
+    return xhr.responseText;
+  };
+
+  Module['readAsync'] = function readAsync(url, onload, onerror) {
+    var xhr = new XMLHttpRequest();
+    xhr.open('GET', url, true);
+    xhr.responseType = 'arraybuffer';
+    xhr.onload = function xhr_onload() {
+      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
+        onload(xhr.response);
+      } else {
+        onerror();
+      }
+    };
+    xhr.onerror = onerror;
+    xhr.send(null);
+  };
+
+  if (typeof arguments != 'undefined') {
+    Module['arguments'] = arguments;
+  }
+
+  if (typeof console !== 'undefined') {
+    if (!Module['print']) Module['print'] = function print(x) {
+      console.log(x);
+    };
+    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
+      console.warn(x);
+    };
+  } else {
+    // Probably a worker, and without console.log. We can do very little here...
+    var TRY_USE_DUMP = false;
+    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
+      dump(x);
+    }) : (function(x) {
+      // self.postMessage(x); // enable this if you want stdout to be sent as messages
+    }));
+  }
+
+  if (ENVIRONMENT_IS_WORKER) {
+    Module['load'] = importScripts;
+  }
+
+  if (typeof Module['setWindowTitle'] === 'undefined') {
+    Module['setWindowTitle'] = function(title) { document.title = title };
+  }
+}
+else {
+  // Unreachable because SHELL is dependant on the others
+  throw 'Unknown runtime environment. Where are we?';
+}
+
+function globalEval(x) {
+  eval.call(null, x);
+}
+if (!Module['load'] && Module['read']) {
+  Module['load'] = function load(f) {
+    globalEval(Module['read'](f));
+  };
+}
+if (!Module['print']) {
+  Module['print'] = function(){};
+}
+if (!Module['printErr']) {
+  Module['printErr'] = Module['print'];
+}
+if (!Module['arguments']) {
+  Module['arguments'] = [];
+}
+if (!Module['thisProgram']) {
+  Module['thisProgram'] = './this.program';
+}
+
+// *** Environment setup code ***
+
+// Closure helpers
+Module.print = Module['print'];
+Module.printErr = Module['printErr'];
+
+// Callbacks
+Module['preRun'] = [];
+Module['postRun'] = [];
+
+// Merge back in the overrides
+for (var key in moduleOverrides) {
+  if (moduleOverrides.hasOwnProperty(key)) {
+    Module[key] = moduleOverrides[key];
+  }
+}
+// Free the object hierarchy contained in the overrides, this lets the GC
+// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
+moduleOverrides = undefined;
+
+
+
+// {{PREAMBLE_ADDITIONS}}
+
+// === Preamble library stuff ===
+
+// Documentation for the public APIs defined in this file must be updated in:
+//    site/source/docs/api_reference/preamble.js.rst
+// A prebuilt local version of the documentation is available at:
+//    site/build/text/docs/api_reference/preamble.js.txt
+// You can also build docs locally as HTML or other formats in site/
+// An online HTML version (which may be of a different version of Emscripten)
+//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html
+
+//========================================
+// Runtime code shared with compiler
+//========================================
+
+var Runtime = {
+  setTempRet0: function (value) {
+    tempRet0 = value;
+  },
+  getTempRet0: function () {
+    return tempRet0;
+  },
+  stackSave: function () {
+    return STACKTOP;
+  },
+  stackRestore: function (stackTop) {
+    STACKTOP = stackTop;
+  },
+  getNativeTypeSize: function (type) {
+    switch (type) {
+      case 'i1': case 'i8': return 1;
+      case 'i16': return 2;
+      case 'i32': return 4;
+      case 'i64': return 8;
+      case 'float': return 4;
+      case 'double': return 8;
+      default: {
+        if (type[type.length-1] === '*') {
+          return Runtime.QUANTUM_SIZE; // A pointer
+        } else if (type[0] === 'i') {
+          var bits = parseInt(type.substr(1));
+          assert(bits % 8 === 0);
+          return bits/8;
+        } else {
+          return 0;
+        }
+      }
+    }
+  },
+  getNativeFieldSize: function (type) {
+    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
+  },
+  STACK_ALIGN: 16,
+  prepVararg: function (ptr, type) {
+    if (type === 'double' || type === 'i64') {
+      // move so the load is aligned
+      if (ptr & 7) {
+        assert((ptr & 7) === 4);
+        ptr += 4;
+      }
+    } else {
+      assert((ptr & 3) === 0);
+    }
+    return ptr;
+  },
+  getAlignSize: function (type, size, vararg) {
+    // we align i64s and doubles on 64-bit boundaries, unlike x86
+    if (!vararg && (type == 'i64' || type == 'double')) return 8;
+    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
+    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
+  },
+  dynCall: function (sig, ptr, args) {
+    if (args && args.length) {
+      assert(args.length == sig.length-1);
+      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
+      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
+    } else {
+      assert(sig.length == 1);
+      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
+      return Module['dynCall_' + sig].call(null, ptr);
+    }
+  },
+  functionPointers: [],
+  addFunction: function (func) {
+    for (var i = 0; i < Runtime.functionPointers.length; i++) {
+      if (!Runtime.functionPointers[i]) {
+        Runtime.functionPointers[i] = func;
+        return 2*(1 + i);
+      }
+    }
+    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
+  },
+  removeFunction: function (index) {
+    Runtime.functionPointers[(index-2)/2] = null;
+  },
+  warnOnce: function (text) {
+    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
+    if (!Runtime.warnOnce.shown[text]) {
+      Runtime.warnOnce.shown[text] = 1;
+      Module.printErr(text);
+    }
+  },
+  funcWrappers: {},
+  getFuncWrapper: function (func, sig) {
+    assert(sig);
+    if (!Runtime.funcWrappers[sig]) {
+      Runtime.funcWrappers[sig] = {};
+    }
+    var sigCache = Runtime.funcWrappers[sig];
+    if (!sigCache[func]) {
+      // optimize away arguments usage in common cases
+      if (sig.length === 1) {
+        sigCache[func] = function dynCall_wrapper() {
+          return Runtime.dynCall(sig, func);
+        };
+      } else if (sig.length === 2) {
+        sigCache[func] = function dynCall_wrapper(arg) {
+          return Runtime.dynCall(sig, func, [arg]);
+        };
+      } else {
+        // general case
+        sigCache[func] = function dynCall_wrapper() {
+          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
+        };
+      }
+    }
+    return sigCache[func];
+  },
+  getCompilerSetting: function (name) {
+    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
+  },
+  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
+  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
+  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
+  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
+  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
+  GLOBAL_BASE: 8,
+  QUANTUM_SIZE: 4,
+  __dummy__: 0
+}
+
+
+
+Module["Runtime"] = Runtime;
+
+
+
+//========================================
+// Runtime essentials
+//========================================
+
+var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
+var EXITSTATUS = 0;
+
+function assert(condition, text) {
+  if (!condition) {
+    abort('Assertion failed: ' + text);
+  }
+}
+
+var globalScope = this;
+
+// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
+function getCFunc(ident) {
+  var func = Module['_' + ident]; // closure exported function
+  if (!func) {
+    try { func = eval('_' + ident); } catch(e) {}
+  }
+  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
+  return func;
+}
+
+var cwrap, ccall;
+(function(){
+  var JSfuncs = {
+    // Helpers for cwrap -- it can't refer to Runtime directly because it might
+    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
+    // out what the minified function name is.
+    'stackSave': function() {
+      Runtime.stackSave()
+    },
+    'stackRestore': function() {
+      Runtime.stackRestore()
+    },
+    // type conversion from js to c
+    'arrayToC' : function(arr) {
+      var ret = Runtime.stackAlloc(arr.length);
+      writeArrayToMemory(arr, ret);
+      return ret;
+    },
+    'stringToC' : function(str) {
+      var ret = 0;
+      if (str !== null && str !== undefined && str !== 0) { // null string
+        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
+        ret = Runtime.stackAlloc((str.length << 2) + 1);
+        writeStringToMemory(str, ret);
+      }
+      return ret;
+    }
+  };
+  // For fast lookup of conversion functions
+  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};
+
+  // C calling interface.
+  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
+    var func = getCFunc(ident);
+    var cArgs = [];
+    var stack = 0;
+    assert(returnType !== 'array', 'Return type should not be "array".');
+    if (args) {
+      for (var i = 0; i < args.length; i++) {
+        var converter = toC[argTypes[i]];
+        if (converter) {
+          if (stack === 0) stack = Runtime.stackSave();
+          cArgs[i] = converter(args[i]);
+        } else {
+          cArgs[i] = args[i];
+        }
+      }
+    }
+    var ret = func.apply(null, cArgs);
+    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
+      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
+    }
+    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
+    if (returnType === 'string') ret = Pointer_stringify(ret);
+    if (stack !== 0) {
+      if (opts && opts.async) {
+        EmterpreterAsync.asyncFinalizers.push(function() {
+          Runtime.stackRestore(stack);
+        });
+        return;
+      }
+      Runtime.stackRestore(stack);
+    }
+    return ret;
+  }
+
+  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
+  function parseJSFunc(jsfunc) {
+    // Match the body and the return value of a javascript function source
+    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
+    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
+  }
+
+  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
+  var JSsource = null;
+  function ensureJSsource() {
+    if (!JSsource) {
+      JSsource = {};
+      for (var fun in JSfuncs) {
+        if (JSfuncs.hasOwnProperty(fun)) {
+          // Elements of toCsource are arrays of three items:
+          // the code, and the return value
+          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
+        }
+      }
+    }
+  }
+
+  cwrap = function cwrap(ident, returnType, argTypes) {
+    argTypes = argTypes || [];
+    var cfunc = getCFunc(ident);
+    // When the function takes numbers and returns a number, we can just return
+    // the original function
+    var numericArgs = argTypes.every(function(type){ return type === 'number'});
+    var numericRet = (returnType !== 'string');
+    if ( numericRet && numericArgs) {
+      return cfunc;
+    }
+    // Creation of the arguments list (["$1","$2",...,"$nargs"])
+    var argNames = argTypes.map(function(x,i){return '$'+i});
+    var funcstr = "(function(" + argNames.join(',') + ") {";
+    var nargs = argTypes.length;
+    if (!numericArgs) {
+      // Generate the code needed to convert the arguments from javascript
+      // values to pointers
+      ensureJSsource();
+      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
+      for (var i = 0; i < nargs; i++) {
+        var arg = argNames[i], type = argTypes[i];
+        if (type === 'number') continue;
+        var convertCode = JSsource[type + 'ToC']; // [code, return]
+        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
+        funcstr += convertCode.body + ';';
+        funcstr += arg + '=(' + convertCode.returnValue + ');';
+      }
+    }
+
+    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
+    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
+    // Call the function
+    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
+    if (!numericRet) { // Return type can only by 'string' or 'number'
+      // Convert the result to a string
+      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
+      funcstr += 'ret = ' + strgfy + '(ret);';
+    }
+    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
+    if (!numericArgs) {
+      // If we had a stack, restore it
+      ensureJSsource();
+      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
+    }
+    funcstr += 'return ret})';
+    return eval(funcstr);
+  };
+})();
+Module["ccall"] = ccall;
+Module["cwrap"] = cwrap;
+
+function setValue(ptr, value, type, noSafe) {
+  type = type || 'i8';
+  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
+    switch(type) {
+      case 'i1': HEAP8[((ptr)>>0)]=value; break;
+      case 'i8': HEAP8[((ptr)>>0)]=value; break;
+      case 'i16': HEAP16[((ptr)>>1)]=value; break;
+      case 'i32': HEAP32[((ptr)>>2)]=value; break;
+      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
+      case 'float': HEAPF32[((ptr)>>2)]=value; break;
+      case 'double': HEAPF64[((ptr)>>3)]=value; break;
+      default: abort('invalid type for setValue: ' + type);
+    }
+}
+Module["setValue"] = setValue;
+
+
+function getValue(ptr, type, noSafe) {
+  type = type || 'i8';
+  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
+    switch(type) {
+      case 'i1': return HEAP8[((ptr)>>0)];
+      case 'i8': return HEAP8[((ptr)>>0)];
+      case 'i16': return HEAP16[((ptr)>>1)];
+      case 'i32': return HEAP32[((ptr)>>2)];
+      case 'i64': return HEAP32[((ptr)>>2)];
+      case 'float': return HEAPF32[((ptr)>>2)];
+      case 'double': return HEAPF64[((ptr)>>3)];
+      default: abort('invalid type for setValue: ' + type);
+    }
+  return null;
+}
+Module["getValue"] = getValue;
+
+var ALLOC_NORMAL = 0; // Tries to use _malloc()
+var ALLOC_STACK = 1; // Lives for the duration of the current function call
+var ALLOC_STATIC = 2; // Cannot be freed
+var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
+var ALLOC_NONE = 4; // Do not allocate
+Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
+Module["ALLOC_STACK"] = ALLOC_STACK;
+Module["ALLOC_STATIC"] = ALLOC_STATIC;
+Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
+Module["ALLOC_NONE"] = ALLOC_NONE;
+
+// allocate(): This is for internal use. You can use it yourself as well, but the interface
+//             is a little tricky (see docs right below). The reason is that it is optimized
+//             for multiple syntaxes to save space in generated code. So you should
+//             normally not use allocate(), and instead allocate memory using _malloc(),
+//             initialize it with setValue(), and so forth.
+// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
+//        in *bytes* (note that this is sometimes confusing: the next parameter does not
+//        affect this!)
+// @types: Either an array of types, one for each byte (or 0 if no type at that position),
+//         or a single type which is used for the entire block. This only matters if there
+//         is initial data - if @slab is a number, then this does not matter at all and is
+//         ignored.
+// @allocator: How to allocate memory, see ALLOC_*
+function allocate(slab, types, allocator, ptr) {
+  var zeroinit, size;
+  if (typeof slab === 'number') {
+    zeroinit = true;
+    size = slab;
+  } else {
+    zeroinit = false;
+    size = slab.length;
+  }
+
+  var singleType = typeof types === 'string' ? types : null;
+
+  var ret;
+  if (allocator == ALLOC_NONE) {
+    ret = ptr;
+  } else {
+    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
+  }
+
+  if (zeroinit) {
+    var ptr = ret, stop;
+    assert((ret & 3) == 0);
+    stop = ret + (size & ~3);
+    for (; ptr < stop; ptr += 4) {
+      HEAP32[((ptr)>>2)]=0;
+    }
+    stop = ret + size;
+    while (ptr < stop) {
+      HEAP8[((ptr++)>>0)]=0;
+    }
+    return ret;
+  }
+
+  if (singleType === 'i8') {
+    if (slab.subarray || slab.slice) {
+      HEAPU8.set(slab, ret);
+    } else {
+      HEAPU8.set(new Uint8Array(slab), ret);
+    }
+    return ret;
+  }
+
+  var i = 0, type, typeSize, previousType;
+  while (i < size) {
+    var curr = slab[i];
+
+    if (typeof curr === 'function') {
+      curr = Runtime.getFunctionIndex(curr);
+    }
+
+    type = singleType || types[i];
+    if (type === 0) {
+      i++;
+      continue;
+    }
+    assert(type, 'Must know what type to store in allocate!');
+
+    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
+
+    setValue(ret+i, curr, type);
+
+    // no need to look up size unless type changes, so cache it
+    if (previousType !== type) {
+      typeSize = Runtime.getNativeTypeSize(type);
+      previousType = type;
+    }
+    i += typeSize;
+  }
+
+  return ret;
+}
+Module["allocate"] = allocate;
+
+// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
+function getMemory(size) {
+  if (!staticSealed) return Runtime.staticAlloc(size);
+  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
+  return _malloc(size);
+}
+Module["getMemory"] = getMemory;
+
+function Pointer_stringify(ptr, /* optional */ length) {
+  if (length === 0 || !ptr) return '';
+  // TODO: use TextDecoder
+  // Find the length, and check for UTF while doing so
+  var hasUtf = 0;
+  var t;
+  var i = 0;
+  while (1) {
+    assert(ptr + i < TOTAL_MEMORY);
+    t = HEAPU8[(((ptr)+(i))>>0)];
+    hasUtf |= t;
+    if (t == 0 && !length) break;
+    i++;
+    if (length && i == length) break;
+  }
+  if (!length) length = i;
+
+  var ret = '';
+
+  if (hasUtf < 128) {
+    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
+    var curr;
+    while (length > 0) {
+      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
+      ret = ret ? ret + curr : curr;
+      ptr += MAX_CHUNK;
+      length -= MAX_CHUNK;
+    }
+    return ret;
+  }
+  return Module['UTF8ToString'](ptr);
+}
+Module["Pointer_stringify"] = Pointer_stringify;
+
+// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
+// a copy of that string as a Javascript String object.
+
+function AsciiToString(ptr) {
+  var str = '';
+  while (1) {
+    var ch = HEAP8[((ptr++)>>0)];
+    if (!ch) return str;
+    str += String.fromCharCode(ch);
+  }
+}
+Module["AsciiToString"] = AsciiToString;
+
+// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
+// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.
+
+function stringToAscii(str, outPtr) {
+  return writeAsciiToMemory(str, outPtr, false);
+}
+Module["stringToAscii"] = stringToAscii;
+
+// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
+// a copy of that string as a Javascript String object.
+
+function UTF8ArrayToString(u8Array, idx) {
+  var u0, u1, u2, u3, u4, u5;
+
+  var str = '';
+  while (1) {
+    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
+    u0 = u8Array[idx++];
+    if (!u0) return str;
+    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
+    u1 = u8Array[idx++] & 63;
+    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
+    u2 = u8Array[idx++] & 63;
+    if ((u0 & 0xF0) == 0xE0) {
+      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
+    } else {
+      u3 = u8Array[idx++] & 63;
+      if ((u0 & 0xF8) == 0xF0) {
+        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
+      } else {
+        u4 = u8Array[idx++] & 63;
+        if ((u0 & 0xFC) == 0xF8) {
+          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
+        } else {
+          u5 = u8Array[idx++] & 63;
+          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
+        }
+      }
+    }
+    if (u0 < 0x10000) {
+      str += String.fromCharCode(u0);
+    } else {
+      var ch = u0 - 0x10000;
+      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
+    }
+  }
+}
+Module["UTF8ArrayToString"] = UTF8ArrayToString;
+
+// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
+// a copy of that string as a Javascript String object.
+
+function UTF8ToString(ptr) {
+  return UTF8ArrayToString(HEAPU8,ptr);
+}
+Module["UTF8ToString"] = UTF8ToString;
+
+// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
+// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
+// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
+// Parameters:
+//   str: the Javascript string to copy.
+//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
+//   outIdx: The starting offset in the array to begin the copying.
+//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
+//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
+//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
+// Returns the number of bytes written, EXCLUDING the null terminator.
+
+function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
+  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
+    return 0;
+
+  var startIdx = outIdx;
+  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
+  for (var i = 0; i < str.length; ++i) {
+    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
+    // See http://unicode.org/faq/utf_bom.html#utf16-3
+    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
+    var u = str.charCodeAt(i); // possibly a lead surrogate
+    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
+    if (u <= 0x7F) {
+      if (outIdx >= endIdx) break;
+      outU8Array[outIdx++] = u;
+    } else if (u <= 0x7FF) {
+      if (outIdx + 1 >= endIdx) break;
+      outU8Array[outIdx++] = 0xC0 | (u >> 6);
+      outU8Array[outIdx++] = 0x80 | (u & 63);
+    } else if (u <= 0xFFFF) {
+      if (outIdx + 2 >= endIdx) break;
+      outU8Array[outIdx++] = 0xE0 | (u >> 12);
+      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
+      outU8Array[outIdx++] = 0x80 | (u & 63);
+    } else if (u <= 0x1FFFFF) {
+      if (outIdx + 3 >= endIdx) break;
+      outU8Array[outIdx++] = 0xF0 | (u >> 18);
+      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
+      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
+      outU8Array[outIdx++] = 0x80 | (u & 63);
+    } else if (u <= 0x3FFFFFF) {
+      if (outIdx + 4 >= endIdx) break;
+      outU8Array[outIdx++] = 0xF8 | (u >> 24);
+      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
+      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
+      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
+      outU8Array[outIdx++] = 0x80 | (u & 63);
+    } else {
+      if (outIdx + 5 >= endIdx) break;
+      outU8Array[outIdx++] = 0xFC | (u >> 30);
+      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
+      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
+      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
+      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
+      outU8Array[outIdx++] = 0x80 | (u & 63);
+    }
+  }
+  // Null-terminate the pointer to the buffer.
+  outU8Array[outIdx] = 0;
+  return outIdx - startIdx;
+}
+Module["stringToUTF8Array"] = stringToUTF8Array;
+
+// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
+// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
+// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
+// Returns the number of bytes written, EXCLUDING the null terminator.
+
+function stringToUTF8(str, outPtr, maxBytesToWrite) {
+  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
+  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
+}
+Module["stringToUTF8"] = stringToUTF8;
+
+// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
+
+function lengthBytesUTF8(str) {
+  var len = 0;
+  for (var i = 0; i < str.length; ++i) {
+    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
+    // See http://unicode.org/faq/utf_bom.html#utf16-3
+    var u = str.charCodeAt(i); // possibly a lead surrogate
+    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
+    if (u <= 0x7F) {
+      ++len;
+    } else if (u <= 0x7FF) {
+      len += 2;
+    } else if (u <= 0xFFFF) {
+      len += 3;
+    } else if (u <= 0x1FFFFF) {
+      len += 4;
+    } else if (u <= 0x3FFFFFF) {
+      len += 5;
+    } else {
+      len += 6;
+    }
+  }
+  return len;
+}
+Module["lengthBytesUTF8"] = lengthBytesUTF8;
+
+// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
+// a copy of that string as a Javascript String object.
+
+function UTF16ToString(ptr) {
+  var i = 0;
+
+  var str = '';
+  while (1) {
+    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
+    if (codeUnit == 0)
+      return str;
+    ++i;
+    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
+    str += String.fromCharCode(codeUnit);
+  }
+}
+
+
+// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
+// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
+// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
+// Parameters:
+//   str: the Javascript string to copy.
+//   outPtr: Byte address in Emscripten HEAP where to write the string to.
+//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
+//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
+//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
+// Returns the number of bytes written, EXCLUDING the null terminator.
+
+function stringToUTF16(str, outPtr, maxBytesToWrite) {
+  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
+  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
+  if (maxBytesToWrite === undefined) {
+    maxBytesToWrite = 0x7FFFFFFF;
+  }
+  if (maxBytesToWrite < 2) return 0;
+  maxBytesToWrite -= 2; // Null terminator.
+  var startPtr = outPtr;
+  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
+  for (var i = 0; i < numCharsToWrite; ++i) {
+    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
+    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
+    HEAP16[((outPtr)>>1)]=codeUnit;
+    outPtr += 2;
+  }
+  // Null-terminate the pointer to the HEAP.
+  HEAP16[((outPtr)>>1)]=0;
+  return outPtr - startPtr;
+}
+
+
+// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.
+
+function lengthBytesUTF16(str) {
+  return str.length*2;
+}
+
+
+function UTF32ToString(ptr) {
+  var i = 0;
+
+  var str = '';
+  while (1) {
+    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
+    if (utf32 == 0)
+      return str;
+    ++i;
+    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
+    // See http://unicode.org/faq/utf_bom.html#utf16-3
+    if (utf32 >= 0x10000) {
+      var ch = utf32 - 0x10000;
+      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
+    } else {
+      str += String.fromCharCode(utf32);
+    }
+  }
+}
+
+
+// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
+// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
+// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
+// Parameters:
+//   str: the Javascript string to copy.
+//   outPtr: Byte address in Emscripten HEAP where to write the string to.
+//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
+//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
+//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
+// Returns the number of bytes written, EXCLUDING the null terminator.
+
+function stringToUTF32(str, outPtr, maxBytesToWrite) {
+  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
+  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
+  if (maxBytesToWrite === undefined) {
+    maxBytesToWrite = 0x7FFFFFFF;
+  }
+  if (maxBytesToWrite < 4) return 0;
+  var startPtr = outPtr;
+  var endPtr = startPtr + maxBytesToWrite - 4;
+  for (var i = 0; i < str.length; ++i) {
+    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
+    // See http://unicode.org/faq/utf_bom.html#utf16-3
+    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
+    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
+      var trailSurrogate = str.charCodeAt(++i);
+      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
+    }
+    HEAP32[((outPtr)>>2)]=codeUnit;
+    outPtr += 4;
+    if (outPtr + 4 > endPtr) break;
+  }
+  // Null-terminate the pointer to the HEAP.
+  HEAP32[((outPtr)>>2)]=0;
+  return outPtr - startPtr;
+}
+
+
+// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.
+
+function lengthBytesUTF32(str) {
+  var len = 0;
+  for (var i = 0; i < str.length; ++i) {
+    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
+    // See http://unicode.org/faq/utf_bom.html#utf16-3
+    var codeUnit = str.charCodeAt(i);
+    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
+    len += 4;
+  }
+
+  return len;
+}
+
+
+function demangle(func) {
+  var hasLibcxxabi = !!Module['___cxa_demangle'];
+  if (hasLibcxxabi) {
+    try {
+      var buf = _malloc(func.length);
+      writeStringToMemory(func.substr(1), buf);
+      var status = _malloc(4);
+      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
+      if (getValue(status, 'i32') === 0 && ret) {
+        return Pointer_stringify(ret);
+      }
+      // otherwise, libcxxabi failed
+    } catch(e) {
+      // ignore problems here
+    } finally {
+      if (buf) _free(buf);
+      if (status) _free(status);
+      if (ret) _free(ret);
+    }
+    // failure when using libcxxabi, don't demangle
+    return func;
+  }
+  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
+  return func;
+}
+
+function demangleAll(text) {
+  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
+}
+
+function jsStackTrace() {
+  var err = new Error();
+  if (!err.stack) {
+    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
+    // so try that as a special-case.
+    try {
+      throw new Error(0);
+    } catch(e) {
+      err = e;
+    }
+    if (!err.stack) {
+      return '(no stack trace available)';
+    }
+  }
+  return err.stack.toString();
+}
+
+function stackTrace() {
+  var js = jsStackTrace();
+  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
+  return demangleAll(js);
+}
+Module["stackTrace"] = stackTrace;
+
+// Memory management
+
+var PAGE_SIZE = 4096;
+
+function alignMemoryPage(x) {
+  if (x % 4096 > 0) {
+    x += (4096 - (x % 4096));
+  }
+  return x;
+}
+
+var HEAP;
+var buffer;
+var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
+
+function updateGlobalBuffer(buf) {
+  Module['buffer'] = buffer = buf;
+}
+
+function updateGlobalBufferViews() {
+  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
+  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
+  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
+  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
+  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
+  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
+  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
+  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
+}
+
+var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
+var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
+var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
+
+
+// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
+function writeStackCookie() {
+  assert((STACK_MAX & 3) == 0);
+  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
+  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
+}
+
+function checkStackCookie() {
+  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
+    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
+  }
+}
+
+function abortStackOverflow(allocSize) {
+  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
+}
+
+function abortOnCannotGrowMemory() {
+  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
+}
+
+function enlargeMemory() {
+  abortOnCannotGrowMemory();
+}
+
+
+var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
+var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
+
+var totalMemory = 64*1024;
+while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
+  if (totalMemory < 16*1024*1024) {
+    totalMemory *= 2;
+  } else {
+    totalMemory += 16*1024*1024
+  }
+}
+if (totalMemory !== TOTAL_MEMORY) {
+  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
+  TOTAL_MEMORY = totalMemory;
+}
+
+// Initialize the runtime's memory
+// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
+assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
+       'JS engine does not provide full typed array support');
+
+
+
+// Use a provided buffer, if there is one, or else allocate a new one
+if (Module['buffer']) {
+  buffer = Module['buffer'];
+  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
+} else {
+  buffer = new ArrayBuffer(TOTAL_MEMORY);
+}
+updateGlobalBufferViews();
+
+
+// Endianness check (note: assumes compiler arch was little-endian)
+HEAP32[0] = 255;
+if (HEAPU8[0] !== 255 || HEAPU8[3] !== 0) throw 'Typed arrays 2 must be run on a little-endian system';
+
+Module['HEAP'] = HEAP;
+Module['buffer'] = buffer;
+Module['HEAP8'] = HEAP8;
+Module['HEAP16'] = HEAP16;
+Module['HEAP32'] = HEAP32;
+Module['HEAPU8'] = HEAPU8;
+Module['HEAPU16'] = HEAPU16;
+Module['HEAPU32'] = HEAPU32;
+Module['HEAPF32'] = HEAPF32;
+Module['HEAPF64'] = HEAPF64;
+
+function callRuntimeCallbacks(callbacks) {
+  while(callbacks.length > 0) {
+    var callback = callbacks.shift();
+    if (typeof callback == 'function') {
+      callback();
+      continue;
+    }
+    var func = callback.func;
+    if (typeof func === 'number') {
+      if (callback.arg === undefined) {
+        Runtime.dynCall('v', func);
+      } else {
+        Runtime.dynCall('vi', func, [callback.arg]);
+      }
+    } else {
+      func(callback.arg === undefined ? null : callback.arg);
+    }
+  }
+}
+
+var __ATPRERUN__  = []; // functions called before the runtime is initialized
+var __ATINIT__    = []; // functions called during startup
+var __ATMAIN__    = []; // functions called when main() is to be run
+var __ATEXIT__    = []; // functions called during shutdown
+var __ATPOSTRUN__ = []; // functions called after the runtime has exited
+
+var runtimeInitialized = false;
+var runtimeExited = false;
+
+
+function preRun() {
+  // compatibility - merge in anything from Module['preRun'] at this time
+  if (Module['preRun']) {
+    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
+    while (Module['preRun'].length) {
+      addOnPreRun(Module['preRun'].shift());
+    }
+  }
+  callRuntimeCallbacks(__ATPRERUN__);
+}
+
+function ensureInitRuntime() {
+  checkStackCookie();
+  if (runtimeInitialized) return;
+  runtimeInitialized = true;
+  callRuntimeCallbacks(__ATINIT__);
+}
+
+function preMain() {
+  checkStackCookie();
+  callRuntimeCallbacks(__ATMAIN__);
+}
+
+function exitRuntime() {
+  checkStackCookie();
+  callRuntimeCallbacks(__ATEXIT__);
+  runtimeExited = true;
+}
+
+function postRun() {
+  checkStackCookie();
+  // compatibility - merge in anything from Module['postRun'] at this time
+  if (Module['postRun']) {
+    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
+    while (Module['postRun'].length) {
+      addOnPostRun(Module['postRun'].shift());
+    }
+  }
+  callRuntimeCallbacks(__ATPOSTRUN__);
+}
+
+function addOnPreRun(cb) {
+  __ATPRERUN__.unshift(cb);
+}
+Module["addOnPreRun"] = addOnPreRun;
+
+function addOnInit(cb) {
+  __ATINIT__.unshift(cb);
+}
+Module["addOnInit"] = addOnInit;
+
+function addOnPreMain(cb) {
+  __ATMAIN__.unshift(cb);
+}
+Module["addOnPreMain"] = addOnPreMain;
+
+function addOnExit(cb) {
+  __ATEXIT__.unshift(cb);
+}
+Module["addOnExit"] = addOnExit;
+
+function addOnPostRun(cb) {
+  __ATPOSTRUN__.unshift(cb);
+}
+Module["addOnPostRun"] = addOnPostRun;
+
+// Tools
+
+
+function intArrayFromString(stringy, dontAddNull, length /* optional */) {
+  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
+  var u8array = new Array(len);
+  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
+  if (dontAddNull) u8array.length = numBytesWritten;
+  return u8array;
+}
+Module["intArrayFromString"] = intArrayFromString;
+
+function intArrayToString(array) {
+  var ret = [];
+  for (var i = 0; i < array.length; i++) {
+    var chr = array[i];
+    if (chr > 0xFF) {
+      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
+      chr &= 0xFF;
+    }
+    ret.push(String.fromCharCode(chr));
+  }
+  return ret.join('');
+}
+Module["intArrayToString"] = intArrayToString;
+
+function writeStringToMemory(string, buffer, dontAddNull) {
+  var array = intArrayFromString(string, dontAddNull);
+  var i = 0;
+  while (i < array.length) {
+    var chr = array[i];
+    HEAP8[(((buffer)+(i))>>0)]=chr;
+    i = i + 1;
+  }
+}
+Module["writeStringToMemory"] = writeStringToMemory;
+
+function writeArrayToMemory(array, buffer) {
+  for (var i = 0; i < array.length; i++) {
+    HEAP8[((buffer++)>>0)]=array[i];
+  }
+}
+Module["writeArrayToMemory"] = writeArrayToMemory;
+
+function writeAsciiToMemory(str, buffer, dontAddNull) {
+  for (var i = 0; i < str.length; ++i) {
+    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
+    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
+  }
+  // Null-terminate the pointer to the HEAP.
+  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
+}
+Module["writeAsciiToMemory"] = writeAsciiToMemory;
+
+function unSign(value, bits, ignore) {
+  if (value >= 0) {
+    return value;
+  }
+  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
+                    : Math.pow(2, bits)         + value;
+}
+function reSign(value, bits, ignore) {
+  if (value <= 0) {
+    return value;
+  }
+  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
+                        : Math.pow(2, bits-1);
+  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
+                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
+                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
+    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
+  }
+  return value;
+}
+
+
+// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
+if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
+  var ah  = a >>> 16;
+  var al = a & 0xffff;
+  var bh  = b >>> 16;
+  var bl = b & 0xffff;
+  return (al*bl + ((ah*bl + al*bh) << 16))|0;
+};
+Math.imul = Math['imul'];
+
+
+if (!Math['clz32']) Math['clz32'] = function(x) {
+  x = x >>> 0;
+  for (var i = 0; i < 32; i++) {
+    if (x & (1 << (31 - i))) return i;
+  }
+  return 32;
+};
+Math.clz32 = Math['clz32']
+
+if (!Math['trunc']) Math['trunc'] = function(x) {
+  return x < 0 ? Math.ceil(x) : Math.floor(x);
+};
+Math.trunc = Math['trunc'];
+
+var Math_abs = Math.abs;
+var Math_cos = Math.cos;
+var Math_sin = Math.sin;
+var Math_tan = Math.tan;
+var Math_acos = Math.acos;
+var Math_asin = Math.asin;
+var Math_atan = Math.atan;
+var Math_atan2 = Math.atan2;
+var Math_exp = Math.exp;
+var Math_log = Math.log;
+var Math_sqrt = Math.sqrt;
+var Math_ceil = Math.ceil;
+var Math_floor = Math.floor;
+var Math_pow = Math.pow;
+var Math_imul = Math.imul;
+var Math_fround = Math.fround;
+var Math_min = Math.min;
+var Math_clz32 = Math.clz32;
+var Math_trunc = Math.trunc;
+
+// A counter of dependencies for calling run(). If we need to
+// do asynchronous work before running, increment this and
+// decrement it. Incrementing must happen in a place like
+// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
+// Note that you can add dependencies in preRun, even though
+// it happens right before run - run will be postponed until
+// the dependencies are met.
+var runDependencies = 0;
+var runDependencyWatcher = null;
+var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
+var runDependencyTracking = {};
+
+function getUniqueRunDependency(id) {
+  var orig = id;
+  while (1) {
+    if (!runDependencyTracking[id]) return id;
+    id = orig + Math.random();
+  }
+  return id;
+}
+
+function addRunDependency(id) {
+  runDependencies++;
+  if (Module['monitorRunDependencies']) {
+    Module['monitorRunDependencies'](runDependencies);
+  }
+  if (id) {
+    assert(!runDependencyTracking[id]);
+    runDependencyTracking[id] = 1;
+    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
+      // Check for missing dependencies every few seconds
+      runDependencyWatcher = setInterval(function() {
+        if (ABORT) {
+          clearInterval(runDependencyWatcher);
+          runDependencyWatcher = null;
+          return;
+        }
+        var shown = false;
+        for (var dep in runDependencyTracking) {
+          if (!shown) {
+            shown = true;
+            Module.printErr('still waiting on run dependencies:');
+          }
+          Module.printErr('dependency: ' + dep);
+        }
+        if (shown) {
+          Module.printErr('(end of list)');
+        }
+      }, 10000);
+    }
+  } else {
+    Module.printErr('warning: run dependency added without ID');
+  }
+}
+Module["addRunDependency"] = addRunDependency;
+
+function removeRunDependency(id) {
+  runDependencies--;
+  if (Module['monitorRunDependencies']) {
+    Module['monitorRunDependencies'](runDependencies);
+  }
+  if (id) {
+    assert(runDependencyTracking[id]);
+    delete runDependencyTracking[id];
+  } else {
+    Module.printErr('warning: run dependency removed without ID');
+  }
+  if (runDependencies == 0) {
+    if (runDependencyWatcher !== null) {
+      clearInterval(runDependencyWatcher);
+      runDependencyWatcher = null;
+    }
+    if (dependenciesFulfilled) {
+      var callback = dependenciesFulfilled;
+      dependenciesFulfilled = null;
+      callback(); // can add another dependenciesFulfilled
+    }
+  }
+}
+Module["removeRunDependency"] = removeRunDependency;
+
+Module["preloadedImages"] = {}; // maps url to image data
+Module["preloadedAudios"] = {}; // maps url to audio data
+
+
+
+var memoryInitializer = null;
+
+
+
+var /* show errors on likely calls to FS when it was not included */ FS = {
+  error: function() {
+    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
+  },
+  init: function() { FS.error() },
+  createDataFile: function() { FS.error() },
+  createPreloadedFile: function() { FS.error() },
+  createLazyFile: function() { FS.error() },
+  open: function() { FS.error() },
+  mkdev: function() { FS.error() },
+  registerDevice: function() { FS.error() },
+  analyzePath: function() { FS.error() },
+  loadFilesFromDB: function() { FS.error() },
+
+  ErrnoError: function ErrnoError() { FS.error() },
+};
+Module['FS_createDataFile'] = FS.createDataFile;
+Module['FS_createPreloadedFile'] = FS.createPreloadedFile;
+
+
+// === Body ===
+
+var ASM_CONSTS = [];
+
+
+
+
+STATIC_BASE = 8;
+
+STATICTOP = STATIC_BASE + 1712;
+  /* global initializers */  __ATINIT__.push();
+  
+
+/* memory initializer */ allocate([5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,164,2,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
+
+
+
+
+
+/* no memory initializer */
+var tempDoublePtr = STATICTOP; STATICTOP += 16;
+
+assert(tempDoublePtr % 8 == 0);
+
+function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
+
+  HEAP8[tempDoublePtr] = HEAP8[ptr];
+
+  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
+
+  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
+
+  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
+
+}
+
+function copyTempDouble(ptr) {
+
+  HEAP8[tempDoublePtr] = HEAP8[ptr];
+
+  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
+
+  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
+
+  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
+
+  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
+
+  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
+
+  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
+
+  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
+
+}
+
+// {{PRE_LIBRARY}}
+
+
+  function _sbrk(bytes) {
+      // Implement a Linux-like 'memory area' for our 'process'.
+      // Changes the size of the memory area by |bytes|; returns the
+      // address of the previous top ('break') of the memory area
+      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
+      var self = _sbrk;
+      if (!self.called) {
+        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
+        self.called = true;
+        assert(Runtime.dynamicAlloc);
+        self.alloc = Runtime.dynamicAlloc;
+        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
+      }
+      var ret = DYNAMICTOP;
+      if (bytes != 0) {
+        var success = self.alloc(bytes);
+        if (!success) return -1 >>> 0; // sbrk failure code
+      }
+      return ret;  // Previous break location.
+    }
+
+   
+  Module["_memset"] = _memset;
+
+  function _pthread_cleanup_push(routine, arg) {
+      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
+      _pthread_cleanup_push.level = __ATEXIT__.length;
+    }
+
+  function ___lock() {}
+
+  
+  function _emscripten_memcpy_big(dest, src, num) {
+      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
+      return dest;
+    } 
+  Module["_memcpy"] = _memcpy;
+
+  function _pthread_cleanup_pop() {
+      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
+      __ATEXIT__.pop();
+      _pthread_cleanup_push.level = __ATEXIT__.length;
+    }
+
+  function _abort() {
+      Module['abort']();
+    }
+
+   
+  Module["_pthread_self"] = _pthread_self;
+
+  
+  var SYSCALLS={varargs:0,get:function (varargs) {
+        SYSCALLS.varargs += 4;
+        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
+        return ret;
+      },getStr:function () {
+        var ret = Pointer_stringify(SYSCALLS.get());
+        return ret;
+      },get64:function () {
+        var low = SYSCALLS.get(), high = SYSCALLS.get();
+        if (low >= 0) assert(high === 0);
+        else assert(high === -1);
+        return low;
+      },getZero:function () {
+        assert(SYSCALLS.get() === 0);
+      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
+  try {
+   // llseek
+      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
+      var offset = offset_low;
+      assert(offset_high === 0);
+      FS.llseek(stream, offset, whence);
+      HEAP32[((result)>>2)]=stream.position;
+      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
+      return 0;
+    } catch (e) {
+    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
+    return -e.errno;
+  }
+  }
+
+  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
+  try {
+   // writev
+      // hack to support printf in NO_FILESYSTEM
+      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
+      var ret = 0;
+      if (!___syscall146.buffer) {
+        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
+        ___syscall146.printChar = function(stream, curr) {
+          var buffer = ___syscall146.buffers[stream];
+          assert(buffer);
+          if (curr === 0 || curr === 10) {
+            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
+            buffer.length = 0;
+          } else {
+            buffer.push(curr);
+          }
+        };
+      }
+      for (var i = 0; i < iovcnt; i++) {
+        var ptr = HEAP32[(((iov)+(i*8))>>2)];
+        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
+        for (var j = 0; j < len; j++) {
+          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
+        }
+        ret += len;
+      }
+      return ret;
+    } catch (e) {
+    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
+    return -e.errno;
+  }
+  }
+
+  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
+  try {
+   // ioctl
+      return 0;
+    } catch (e) {
+    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
+    return -e.errno;
+  }
+  }
+
+  function ___unlock() {}
+
+  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
+  try {
+   // close
+      var stream = SYSCALLS.getStreamFromFD();
+      FS.close(stream);
+      return 0;
+    } catch (e) {
+    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
+    return -e.errno;
+  }
+  }
+/* flush anything remaining in the buffer during shutdown */ __ATEXIT__.push(function() { var fflush = Module["_fflush"]; if (fflush) fflush(0); var printChar = ___syscall146.printChar; if (!printChar) return; var buffers = ___syscall146.buffers; if (buffers[1].length) printChar(1, 10); if (buffers[2].length) printChar(2, 10); });;
+STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
+
+staticSealed = true; // seal the static portion of memory
+
+STACK_MAX = STACK_BASE + TOTAL_STACK;
+
+DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
+
+assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");
+
+
+
+function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }
+
+function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }
+
+function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }
+
+function invoke_ii(index,a1) {
+  try {
+    return Module["dynCall_ii"](index,a1);
+  } catch(e) {
+    if (typeof e !== 'number' && e !== 'longjmp') throw e;
+    asm["setThrew"](1, 0);
+  }
+}
+
+function invoke_iiii(index,a1,a2,a3) {
+  try {
+    return Module["dynCall_iiii"](index,a1,a2,a3);
+  } catch(e) {
+    if (typeof e !== 'number' && e !== 'longjmp') throw e;
+    asm["setThrew"](1, 0);
+  }
+}
+
+function invoke_vi(index,a1) {
+  try {
+    Module["dynCall_vi"](index,a1);
+  } catch(e) {
+    if (typeof e !== 'number' && e !== 'longjmp') throw e;
+    asm["setThrew"](1, 0);
+  }
+}
+
+Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
+
+Module.asmLibraryArg = { "abort": abort, "assert": assert, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vi": nullFunc_vi, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___lock": ___lock, "_abort": _abort, "_pthread_cleanup_push": _pthread_cleanup_push, "___syscall6": ___syscall6, "_sbrk": _sbrk, "___syscall140": ___syscall140, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___syscall54": ___syscall54, "___unlock": ___unlock, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT };
+// EMSCRIPTEN_START_ASM
+var asm = (function(global, env, buffer) {
+  'almost asm';
+  
+  
+  var HEAP8 = new global.Int8Array(buffer);
+  var HEAP16 = new global.Int16Array(buffer);
+  var HEAP32 = new global.Int32Array(buffer);
+  var HEAPU8 = new global.Uint8Array(buffer);
+  var HEAPU16 = new global.Uint16Array(buffer);
+  var HEAPU32 = new global.Uint32Array(buffer);
+  var HEAPF32 = new global.Float32Array(buffer);
+  var HEAPF64 = new global.Float64Array(buffer);
+
+
+  var STACKTOP=env.STACKTOP|0;
+  var STACK_MAX=env.STACK_MAX|0;
+  var tempDoublePtr=env.tempDoublePtr|0;
+  var ABORT=env.ABORT|0;
+
+  var __THREW__ = 0;
+  var threwValue = 0;
+  var setjmpId = 0;
+  var undef = 0;
+  var nan = global.NaN, inf = global.Infinity;
+  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
+  var tempRet0 = 0;
+
+  var Math_floor=global.Math.floor;
+  var Math_abs=global.Math.abs;
+  var Math_sqrt=global.Math.sqrt;
+  var Math_pow=global.Math.pow;
+  var Math_cos=global.Math.cos;
+  var Math_sin=global.Math.sin;
+  var Math_tan=global.Math.tan;
+  var Math_acos=global.Math.acos;
+  var Math_asin=global.Math.asin;
+  var Math_atan=global.Math.atan;
+  var Math_atan2=global.Math.atan2;
+  var Math_exp=global.Math.exp;
+  var Math_log=global.Math.log;
+  var Math_ceil=global.Math.ceil;
+  var Math_imul=global.Math.imul;
+  var Math_min=global.Math.min;
+  var Math_clz32=global.Math.clz32;
+  var abort=env.abort;
+  var assert=env.assert;
+  var abortStackOverflow=env.abortStackOverflow;
+  var nullFunc_ii=env.nullFunc_ii;
+  var nullFunc_iiii=env.nullFunc_iiii;
+  var nullFunc_vi=env.nullFunc_vi;
+  var invoke_ii=env.invoke_ii;
+  var invoke_iiii=env.invoke_iiii;
+  var invoke_vi=env.invoke_vi;
+  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
+  var ___lock=env.___lock;
+  var _abort=env._abort;
+  var _pthread_cleanup_push=env._pthread_cleanup_push;
+  var ___syscall6=env.___syscall6;
+  var _sbrk=env._sbrk;
+  var ___syscall140=env.___syscall140;
+  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
+  var ___syscall54=env.___syscall54;
+  var ___unlock=env.___unlock;
+  var ___syscall146=env.___syscall146;
+  var tempFloat = 0.0;
+
+// EMSCRIPTEN_START_FUNCS
+
+function stackAlloc(size) {
+  size = size|0;
+  var ret = 0;
+  ret = STACKTOP;
+  STACKTOP = (STACKTOP + size)|0;
+  STACKTOP = (STACKTOP + 15)&-16;
+  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);
+
+  return ret|0;
+}
+function stackSave() {
+  return STACKTOP|0;
+}
+function stackRestore(top) {
+  top = top|0;
+  STACKTOP = top;
+}
+function establishStackSpace(stackBase, stackMax) {
+  stackBase = stackBase|0;
+  stackMax = stackMax|0;
+  STACKTOP = stackBase;
+  STACK_MAX = stackMax;
+}
+
+function setThrew(threw, value) {
+  threw = threw|0;
+  value = value|0;
+  if ((__THREW__|0) == 0) {
+    __THREW__ = threw;
+    threwValue = value;
+  }
+}
+
+function setTempRet0(value) {
+  value = value|0;
+  tempRet0 = value;
+}
+function getTempRet0() {
+  return tempRet0|0;
+}
+
+function _main() {
+ var $0 = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
+ $0 = 0;
+ STACKTOP = sp;return 0;
+}
+function ___stdio_close($f) {
+ $f = $f|0;
+ var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
+ $vararg_buffer = sp;
+ $0 = ((($f)) + 60|0);
+ $1 = HEAP32[$0>>2]|0;
+ HEAP32[$vararg_buffer>>2] = $1;
+ $2 = (___syscall6(6,($vararg_buffer|0))|0);
+ $3 = (___syscall_ret($2)|0);
+ STACKTOP = sp;return ($3|0);
+}
+function ___syscall_ret($r) {
+ $r = $r|0;
+ var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ $0 = ($r>>>0)>(4294963200);
+ if ($0) {
+  $1 = (0 - ($r))|0;
+  $2 = (___errno_location()|0);
+  HEAP32[$2>>2] = $1;
+  $$0 = -1;
+ } else {
+  $$0 = $r;
+ }
+ return ($$0|0);
+}
+function ___errno_location() {
+ var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ $0 = HEAP32[31]|0;
+ $1 = ($0|0)==(0|0);
+ if ($1) {
+  $$0 = 168;
+ } else {
+  $2 = (_pthread_self()|0);
+  $3 = ((($2)) + 64|0);
+  $4 = HEAP32[$3>>2]|0;
+  $$0 = $4;
+ }
+ return ($$0|0);
+}
+function ___stdio_write($f,$buf,$len) {
+ $f = $f|0;
+ $buf = $buf|0;
+ $len = $len|0;
+ var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
+ var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
+ var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0;
+ var $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
+ $vararg_buffer3 = sp + 16|0;
+ $vararg_buffer = sp;
+ $iovs = sp + 32|0;
+ $0 = ((($f)) + 28|0);
+ $1 = HEAP32[$0>>2]|0;
+ HEAP32[$iovs>>2] = $1;
+ $2 = ((($iovs)) + 4|0);
+ $3 = ((($f)) + 20|0);
+ $4 = HEAP32[$3>>2]|0;
+ $5 = (($4) - ($1))|0;
+ HEAP32[$2>>2] = $5;
+ $6 = ((($iovs)) + 8|0);
+ HEAP32[$6>>2] = $buf;
+ $7 = ((($iovs)) + 12|0);
+ HEAP32[$7>>2] = $len;
+ $8 = (($5) + ($len))|0;
+ $9 = ((($f)) + 60|0);
+ $10 = ((($f)) + 44|0);
+ $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $8;
+ while(1) {
+  $11 = HEAP32[31]|0;
+  $12 = ($11|0)==(0|0);
+  if ($12) {
+   $16 = HEAP32[$9>>2]|0;
+   HEAP32[$vararg_buffer3>>2] = $16;
+   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
+   HEAP32[$vararg_ptr6>>2] = $iov$0;
+   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
+   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
+   $17 = (___syscall146(146,($vararg_buffer3|0))|0);
+   $18 = (___syscall_ret($17)|0);
+   $cnt$0 = $18;
+  } else {
+   _pthread_cleanup_push((4|0),($f|0));
+   $13 = HEAP32[$9>>2]|0;
+   HEAP32[$vararg_buffer>>2] = $13;
+   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
+   HEAP32[$vararg_ptr1>>2] = $iov$0;
+   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
+   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
+   $14 = (___syscall146(146,($vararg_buffer|0))|0);
+   $15 = (___syscall_ret($14)|0);
+   _pthread_cleanup_pop(0);
+   $cnt$0 = $15;
+  }
+  $19 = ($rem$0|0)==($cnt$0|0);
+  if ($19) {
+   label = 6;
+   break;
+  }
+  $26 = ($cnt$0|0)<(0);
+  if ($26) {
+   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
+   label = 8;
+   break;
+  }
+  $34 = (($rem$0) - ($cnt$0))|0;
+  $35 = ((($iov$0)) + 4|0);
+  $36 = HEAP32[$35>>2]|0;
+  $37 = ($cnt$0>>>0)>($36>>>0);
+  if ($37) {
+   $38 = HEAP32[$10>>2]|0;
+   HEAP32[$0>>2] = $38;
+   HEAP32[$3>>2] = $38;
+   $39 = (($cnt$0) - ($36))|0;
+   $40 = ((($iov$0)) + 8|0);
+   $41 = (($iovcnt$0) + -1)|0;
+   $$phi$trans$insert = ((($iov$0)) + 12|0);
+   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
+   $49 = $$pre;$cnt$1 = $39;$iov$1 = $40;$iovcnt$1 = $41;
+  } else {
+   $42 = ($iovcnt$0|0)==(2);
+   if ($42) {
+    $43 = HEAP32[$0>>2]|0;
+    $44 = (($43) + ($cnt$0)|0);
+    HEAP32[$0>>2] = $44;
+    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
+   } else {
+    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
+   }
+  }
+  $45 = HEAP32[$iov$1>>2]|0;
+  $46 = (($45) + ($cnt$1)|0);
+  HEAP32[$iov$1>>2] = $46;
+  $47 = ((($iov$1)) + 4|0);
+  $48 = (($49) - ($cnt$1))|0;
+  HEAP32[$47>>2] = $48;
+  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $34;
+ }
+ if ((label|0) == 6) {
+  $20 = HEAP32[$10>>2]|0;
+  $21 = ((($f)) + 48|0);
+  $22 = HEAP32[$21>>2]|0;
+  $23 = (($20) + ($22)|0);
+  $24 = ((($f)) + 16|0);
+  HEAP32[$24>>2] = $23;
+  $25 = $20;
+  HEAP32[$0>>2] = $25;
+  HEAP32[$3>>2] = $25;
+  $$0 = $len;
+ }
+ else if ((label|0) == 8) {
+  $27 = ((($f)) + 16|0);
+  HEAP32[$27>>2] = 0;
+  HEAP32[$0>>2] = 0;
+  HEAP32[$3>>2] = 0;
+  $28 = HEAP32[$f>>2]|0;
+  $29 = $28 | 32;
+  HEAP32[$f>>2] = $29;
+  $30 = ($iovcnt$0$lcssa12|0)==(2);
+  if ($30) {
+   $$0 = 0;
+  } else {
+   $31 = ((($iov$0$lcssa11)) + 4|0);
+   $32 = HEAP32[$31>>2]|0;
+   $33 = (($len) - ($32))|0;
+   $$0 = $33;
+  }
+ }
+ STACKTOP = sp;return ($$0|0);
+}
+function _cleanup($p) {
+ $p = $p|0;
+ var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ $0 = ((($p)) + 68|0);
+ $1 = HEAP32[$0>>2]|0;
+ $2 = ($1|0)==(0);
+ if ($2) {
+  ___unlockfile($p);
+ }
+ return;
+}
+function ___unlockfile($f) {
+ $f = $f|0;
+ var label = 0, sp = 0;
+ sp = STACKTOP;
+ return;
+}
+function ___stdio_seek($f,$off,$whence) {
+ $f = $f|0;
+ $off = $off|0;
+ $whence = $whence|0;
+ var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
+ $vararg_buffer = sp;
+ $ret = sp + 20|0;
+ $0 = ((($f)) + 60|0);
+ $1 = HEAP32[$0>>2]|0;
+ HEAP32[$vararg_buffer>>2] = $1;
+ $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
+ HEAP32[$vararg_ptr1>>2] = 0;
+ $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
+ HEAP32[$vararg_ptr2>>2] = $off;
+ $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
+ HEAP32[$vararg_ptr3>>2] = $ret;
+ $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
+ HEAP32[$vararg_ptr4>>2] = $whence;
+ $2 = (___syscall140(140,($vararg_buffer|0))|0);
+ $3 = (___syscall_ret($2)|0);
+ $4 = ($3|0)<(0);
+ if ($4) {
+  HEAP32[$ret>>2] = -1;
+  $5 = -1;
+ } else {
+  $$pre = HEAP32[$ret>>2]|0;
+  $5 = $$pre;
+ }
+ STACKTOP = sp;return ($5|0);
+}
+function ___stdout_write($f,$buf,$len) {
+ $f = $f|0;
+ $buf = $buf|0;
+ $len = $len|0;
+ var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
+ $vararg_buffer = sp;
+ $tio = sp + 12|0;
+ $0 = ((($f)) + 36|0);
+ HEAP32[$0>>2] = 5;
+ $1 = HEAP32[$f>>2]|0;
+ $2 = $1 & 64;
+ $3 = ($2|0)==(0);
+ if ($3) {
+  $4 = ((($f)) + 60|0);
+  $5 = HEAP32[$4>>2]|0;
+  HEAP32[$vararg_buffer>>2] = $5;
+  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
+  HEAP32[$vararg_ptr1>>2] = 21505;
+  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
+  HEAP32[$vararg_ptr2>>2] = $tio;
+  $6 = (___syscall54(54,($vararg_buffer|0))|0);
+  $7 = ($6|0)==(0);
+  if (!($7)) {
+   $8 = ((($f)) + 75|0);
+   HEAP8[$8>>0] = -1;
+  }
+ }
+ $9 = (___stdio_write($f,$buf,$len)|0);
+ STACKTOP = sp;return ($9|0);
+}
+function ___lockfile($f) {
+ $f = $f|0;
+ var label = 0, sp = 0;
+ sp = STACKTOP;
+ return 0;
+}
+function _fflush($f) {
+ $f = $f|0;
+ var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
+ var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ $0 = ($f|0)==(0|0);
+ do {
+  if ($0) {
+   $7 = HEAP32[30]|0;
+   $8 = ($7|0)==(0|0);
+   if ($8) {
+    $27 = 0;
+   } else {
+    $9 = HEAP32[30]|0;
+    $10 = (_fflush($9)|0);
+    $27 = $10;
+   }
+   ___lock(((152)|0));
+   $$012 = HEAP32[(148)>>2]|0;
+   $11 = ($$012|0)==(0|0);
+   if ($11) {
+    $r$0$lcssa = $27;
+   } else {
+    $$014 = $$012;$r$03 = $27;
+    while(1) {
+     $12 = ((($$014)) + 76|0);
+     $13 = HEAP32[$12>>2]|0;
+     $14 = ($13|0)>(-1);
+     if ($14) {
+      $15 = (___lockfile($$014)|0);
+      $23 = $15;
+     } else {
+      $23 = 0;
+     }
+     $16 = ((($$014)) + 20|0);
+     $17 = HEAP32[$16>>2]|0;
+     $18 = ((($$014)) + 28|0);
+     $19 = HEAP32[$18>>2]|0;
+     $20 = ($17>>>0)>($19>>>0);
+     if ($20) {
+      $21 = (___fflush_unlocked($$014)|0);
+      $22 = $21 | $r$03;
+      $r$1 = $22;
+     } else {
+      $r$1 = $r$03;
+     }
+     $24 = ($23|0)==(0);
+     if (!($24)) {
+      ___unlockfile($$014);
+     }
+     $25 = ((($$014)) + 56|0);
+     $$01 = HEAP32[$25>>2]|0;
+     $26 = ($$01|0)==(0|0);
+     if ($26) {
+      $r$0$lcssa = $r$1;
+      break;
+     } else {
+      $$014 = $$01;$r$03 = $r$1;
+     }
+    }
+   }
+   ___unlock(((152)|0));
+   $$0 = $r$0$lcssa;
+  } else {
+   $1 = ((($f)) + 76|0);
+   $2 = HEAP32[$1>>2]|0;
+   $3 = ($2|0)>(-1);
+   if (!($3)) {
+    $4 = (___fflush_unlocked($f)|0);
+    $$0 = $4;
+    break;
+   }
+   $5 = (___lockfile($f)|0);
+   $phitmp = ($5|0)==(0);
+   $6 = (___fflush_unlocked($f)|0);
+   if ($phitmp) {
+    $$0 = $6;
+   } else {
+    ___unlockfile($f);
+    $$0 = $6;
+   }
+  }
+ } while(0);
+ return ($$0|0);
+}
+function ___fflush_unlocked($f) {
+ $f = $f|0;
+ var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
+ var $9 = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ $0 = ((($f)) + 20|0);
+ $1 = HEAP32[$0>>2]|0;
+ $2 = ((($f)) + 28|0);
+ $3 = HEAP32[$2>>2]|0;
+ $4 = ($1>>>0)>($3>>>0);
+ if ($4) {
+  $5 = ((($f)) + 36|0);
+  $6 = HEAP32[$5>>2]|0;
+  (FUNCTION_TABLE_iiii[$6 & 7]($f,0,0)|0);
+  $7 = HEAP32[$0>>2]|0;
+  $8 = ($7|0)==(0|0);
+  if ($8) {
+   $$0 = -1;
+  } else {
+   label = 3;
+  }
+ } else {
+  label = 3;
+ }
+ if ((label|0) == 3) {
+  $9 = ((($f)) + 4|0);
+  $10 = HEAP32[$9>>2]|0;
+  $11 = ((($f)) + 8|0);
+  $12 = HEAP32[$11>>2]|0;
+  $13 = ($10>>>0)<($12>>>0);
+  if ($13) {
+   $14 = ((($f)) + 40|0);
+   $15 = HEAP32[$14>>2]|0;
+   $16 = $10;
+   $17 = $12;
+   $18 = (($16) - ($17))|0;
+   (FUNCTION_TABLE_iiii[$15 & 7]($f,$18,1)|0);
+  }
+  $19 = ((($f)) + 16|0);
+  HEAP32[$19>>2] = 0;
+  HEAP32[$2>>2] = 0;
+  HEAP32[$0>>2] = 0;
+  HEAP32[$11>>2] = 0;
+  HEAP32[$9>>2] = 0;
+  $$0 = 0;
+ }
+ return ($$0|0);
+}
+function _malloc($bytes) {
+ $bytes = $bytes|0;
+ var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i13 = 0, $$pre$i16$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i14Z2D = 0, $$pre$phi$i17$iZ2D = 0;
+ var $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre71 = 0, $$pre9$i$i = 0, $$rsize$0$i = 0, $$rsize$4$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
+ var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
+ var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
+ var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $107 = 0, $108 = 0;
+ var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
+ var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
+ var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
+ var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
+ var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
+ var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
+ var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
+ var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
+ var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
+ var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
+ var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
+ var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
+ var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
+ var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
+ var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
+ var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
+ var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
+ var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
+ var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
+ var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
+ var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
+ var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
+ var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
+ var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
+ var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
+ var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
+ var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
+ var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
+ var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
+ var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
+ var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
+ var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
+ var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
+ var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
+ var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
+ var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
+ var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
+ var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
+ var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
+ var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
+ var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
+ var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
+ var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
+ var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
+ var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
+ var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
+ var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
+ var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
+ var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
+ var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0;
+ var $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$1$i9 = 0, $R$1$i9$lcssa = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i11 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $RP$1$i8 = 0, $RP$1$i8$lcssa = 0, $T$0$i = 0, $T$0$i$i = 0, $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0;
+ var $T$0$i18$i = 0, $T$0$i18$i$lcssa = 0, $T$0$i18$i$lcssa139 = 0, $br$2$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i12 = 0, $exitcond$i$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $magic$i$i = 0, $nb$0 = 0, $not$$i$i = 0, $not$$i20$i = 0, $not$7$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i17 = 0, $or$cond1$i = 0, $or$cond1$i16 = 0;
+ var $or$cond10$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond48$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i5 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$$i = 0, $sizebits$0$i = 0;
+ var $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$068$i = 0, $sp$068$i$lcssa = 0, $sp$167$i = 0, $sp$167$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$746$i = 0, $tsize$745$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i6 = 0;
+ var $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
+ $magic$i$i = sp;
+ $0 = ($bytes>>>0)<(245);
+ do {
+  if ($0) {
+   $1 = ($bytes>>>0)<(11);
+   $2 = (($bytes) + 11)|0;
+   $3 = $2 & -8;
+   $4 = $1 ? 16 : $3;
+   $5 = $4 >>> 3;
+   $6 = HEAP32[43]|0;
+   $7 = $6 >>> $5;
+   $8 = $7 & 3;
+   $9 = ($8|0)==(0);
+   if (!($9)) {
+    $10 = $7 & 1;
+    $11 = $10 ^ 1;
+    $12 = (($11) + ($5))|0;
+    $13 = $12 << 1;
+    $14 = (212 + ($13<<2)|0);
+    $15 = ((($14)) + 8|0);
+    $16 = HEAP32[$15>>2]|0;
+    $17 = ((($16)) + 8|0);
+    $18 = HEAP32[$17>>2]|0;
+    $19 = ($14|0)==($18|0);
+    do {
+     if ($19) {
+      $20 = 1 << $12;
+      $21 = $20 ^ -1;
+      $22 = $6 & $21;
+      HEAP32[43] = $22;
+     } else {
+      $23 = HEAP32[(188)>>2]|0;
+      $24 = ($18>>>0)<($23>>>0);
+      if ($24) {
+       _abort();
+       // unreachable;
+      }
+      $25 = ((($18)) + 12|0);
+      $26 = HEAP32[$25>>2]|0;
+      $27 = ($26|0)==($16|0);
+      if ($27) {
+       HEAP32[$25>>2] = $14;
+       HEAP32[$15>>2] = $18;
+       break;
+      } else {
+       _abort();
+       // unreachable;
+      }
+     }
+    } while(0);
+    $28 = $12 << 3;
+    $29 = $28 | 3;
+    $30 = ((($16)) + 4|0);
+    HEAP32[$30>>2] = $29;
+    $31 = (($16) + ($28)|0);
+    $32 = ((($31)) + 4|0);
+    $33 = HEAP32[$32>>2]|0;
+    $34 = $33 | 1;
+    HEAP32[$32>>2] = $34;
+    $$0 = $17;
+    STACKTOP = sp;return ($$0|0);
+   }
+   $35 = HEAP32[(180)>>2]|0;
+   $36 = ($4>>>0)>($35>>>0);
+   if ($36) {
+    $37 = ($7|0)==(0);
+    if (!($37)) {
+     $38 = $7 << $5;
+     $39 = 2 << $5;
+     $40 = (0 - ($39))|0;
+     $41 = $39 | $40;
+     $42 = $38 & $41;
+     $43 = (0 - ($42))|0;
+     $44 = $42 & $43;
+     $45 = (($44) + -1)|0;
+     $46 = $45 >>> 12;
+     $47 = $46 & 16;
+     $48 = $45 >>> $47;
+     $49 = $48 >>> 5;
+     $50 = $49 & 8;
+     $51 = $50 | $47;
+     $52 = $48 >>> $50;
+     $53 = $52 >>> 2;
+     $54 = $53 & 4;
+     $55 = $51 | $54;
+     $56 = $52 >>> $54;
+     $57 = $56 >>> 1;
+     $58 = $57 & 2;
+     $59 = $55 | $58;
+     $60 = $56 >>> $58;
+     $61 = $60 >>> 1;
+     $62 = $61 & 1;
+     $63 = $59 | $62;
+     $64 = $60 >>> $62;
+     $65 = (($63) + ($64))|0;
+     $66 = $65 << 1;
+     $67 = (212 + ($66<<2)|0);
+     $68 = ((($67)) + 8|0);
+     $69 = HEAP32[$68>>2]|0;
+     $70 = ((($69)) + 8|0);
+     $71 = HEAP32[$70>>2]|0;
+     $72 = ($67|0)==($71|0);
+     do {
+      if ($72) {
+       $73 = 1 << $65;
+       $74 = $73 ^ -1;
+       $75 = $6 & $74;
+       HEAP32[43] = $75;
+       $89 = $35;
+      } else {
+       $76 = HEAP32[(188)>>2]|0;
+       $77 = ($71>>>0)<($76>>>0);
+       if ($77) {
+        _abort();
+        // unreachable;
+       }
+       $78 = ((($71)) + 12|0);
+       $79 = HEAP32[$78>>2]|0;
+       $80 = ($79|0)==($69|0);
+       if ($80) {
+        HEAP32[$78>>2] = $67;
+        HEAP32[$68>>2] = $71;
+        $$pre = HEAP32[(180)>>2]|0;
+        $89 = $$pre;
+        break;
+       } else {
+        _abort();
+        // unreachable;
+       }
+      }
+     } while(0);
+     $81 = $65 << 3;
+     $82 = (($81) - ($4))|0;
+     $83 = $4 | 3;
+     $84 = ((($69)) + 4|0);
+     HEAP32[$84>>2] = $83;
+     $85 = (($69) + ($4)|0);
+     $86 = $82 | 1;
+     $87 = ((($85)) + 4|0);
+     HEAP32[$87>>2] = $86;
+     $88 = (($85) + ($82)|0);
+     HEAP32[$88>>2] = $82;
+     $90 = ($89|0)==(0);
+     if (!($90)) {
+      $91 = HEAP32[(192)>>2]|0;
+      $92 = $89 >>> 3;
+      $93 = $92 << 1;
+      $94 = (212 + ($93<<2)|0);
+      $95 = HEAP32[43]|0;
+      $96 = 1 << $92;
+      $97 = $95 & $96;
+      $98 = ($97|0)==(0);
+      if ($98) {
+       $99 = $95 | $96;
+       HEAP32[43] = $99;
+       $$pre71 = ((($94)) + 8|0);
+       $$pre$phiZ2D = $$pre71;$F4$0 = $94;
+      } else {
+       $100 = ((($94)) + 8|0);
+       $101 = HEAP32[$100>>2]|0;
+       $102 = HEAP32[(188)>>2]|0;
+       $103 = ($101>>>0)<($102>>>0);
+       if ($103) {
+        _abort();
+        // unreachable;
+       } else {
+        $$pre$phiZ2D = $100;$F4$0 = $101;
+       }
+      }
+      HEAP32[$$pre$phiZ2D>>2] = $91;
+      $104 = ((($F4$0)) + 12|0);
+      HEAP32[$104>>2] = $91;
+      $105 = ((($91)) + 8|0);
+      HEAP32[$105>>2] = $F4$0;
+      $106 = ((($91)) + 12|0);
+      HEAP32[$106>>2] = $94;
+     }
+     HEAP32[(180)>>2] = $82;
+     HEAP32[(192)>>2] = $85;
+     $$0 = $70;
+     STACKTOP = sp;return ($$0|0);
+    }
+    $107 = HEAP32[(176)>>2]|0;
+    $108 = ($107|0)==(0);
+    if ($108) {
+     $nb$0 = $4;
+    } else {
+     $109 = (0 - ($107))|0;
+     $110 = $107 & $109;
+     $111 = (($110) + -1)|0;
+     $112 = $111 >>> 12;
+     $113 = $112 & 16;
+     $114 = $111 >>> $113;
+     $115 = $114 >>> 5;
+     $116 = $115 & 8;
+     $117 = $116 | $113;
+     $118 = $114 >>> $116;
+     $119 = $118 >>> 2;
+     $120 = $119 & 4;
+     $121 = $117 | $120;
+     $122 = $118 >>> $120;
+     $123 = $122 >>> 1;
+     $124 = $123 & 2;
+     $125 = $121 | $124;
+     $126 = $122 >>> $124;
+     $127 = $126 >>> 1;
+     $128 = $127 & 1;
+     $129 = $125 | $128;
+     $130 = $126 >>> $128;
+     $131 = (($129) + ($130))|0;
+     $132 = (476 + ($131<<2)|0);
+     $133 = HEAP32[$132>>2]|0;
+     $134 = ((($133)) + 4|0);
+     $135 = HEAP32[$134>>2]|0;
+     $136 = $135 & -8;
+     $137 = (($136) - ($4))|0;
+     $rsize$0$i = $137;$t$0$i = $133;$v$0$i = $133;
+     while(1) {
+      $138 = ((($t$0$i)) + 16|0);
+      $139 = HEAP32[$138>>2]|0;
+      $140 = ($139|0)==(0|0);
+      if ($140) {
+       $141 = ((($t$0$i)) + 20|0);
+       $142 = HEAP32[$141>>2]|0;
+       $143 = ($142|0)==(0|0);
+       if ($143) {
+        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
+        break;
+       } else {
+        $145 = $142;
+       }
+      } else {
+       $145 = $139;
+      }
+      $144 = ((($145)) + 4|0);
+      $146 = HEAP32[$144>>2]|0;
+      $147 = $146 & -8;
+      $148 = (($147) - ($4))|0;
+      $149 = ($148>>>0)<($rsize$0$i>>>0);
+      $$rsize$0$i = $149 ? $148 : $rsize$0$i;
+      $$v$0$i = $149 ? $145 : $v$0$i;
+      $rsize$0$i = $$rsize$0$i;$t$0$i = $145;$v$0$i = $$v$0$i;
+     }
+     $150 = HEAP32[(188)>>2]|0;
+     $151 = ($v$0$i$lcssa>>>0)<($150>>>0);
+     if ($151) {
+      _abort();
+      // unreachable;
+     }
+     $152 = (($v$0$i$lcssa) + ($4)|0);
+     $153 = ($v$0$i$lcssa>>>0)<($152>>>0);
+     if (!($153)) {
+      _abort();
+      // unreachable;
+     }
+     $154 = ((($v$0$i$lcssa)) + 24|0);
+     $155 = HEAP32[$154>>2]|0;
+     $156 = ((($v$0$i$lcssa)) + 12|0);
+     $157 = HEAP32[$156>>2]|0;
+     $158 = ($157|0)==($v$0$i$lcssa|0);
+     do {
+      if ($158) {
+       $168 = ((($v$0$i$lcssa)) + 20|0);
+       $169 = HEAP32[$168>>2]|0;
+       $170 = ($169|0)==(0|0);
+       if ($170) {
+        $171 = ((($v$0$i$lcssa)) + 16|0);
+        $172 = HEAP32[$171>>2]|0;
+        $173 = ($172|0)==(0|0);
+        if ($173) {
+         $R$3$i = 0;
+         break;
+        } else {
+         $R$1$i = $172;$RP$1$i = $171;
+        }
+       } else {
+        $R$1$i = $169;$RP$1$i = $168;
+       }
+       while(1) {
+        $174 = ((($R$1$i)) + 20|0);
+        $175 = HEAP32[$174>>2]|0;
+        $176 = ($175|0)==(0|0);
+        if (!($176)) {
+         $R$1$i = $175;$RP$1$i = $174;
+         continue;
+        }
+        $177 = ((($R$1$i)) + 16|0);
+        $178 = HEAP32[$177>>2]|0;
+        $179 = ($178|0)==(0|0);
+        if ($179) {
+         $R$1$i$lcssa = $R$1$i;$RP$1$i$lcssa = $RP$1$i;
+         break;
+        } else {
+         $R$1$i = $178;$RP$1$i = $177;
+        }
+       }
+       $180 = ($RP$1$i$lcssa>>>0)<($150>>>0);
+       if ($180) {
+        _abort();
+        // unreachable;
+       } else {
+        HEAP32[$RP$1$i$lcssa>>2] = 0;
+        $R$3$i = $R$1$i$lcssa;
+        break;
+       }
+      } else {
+       $159 = ((($v$0$i$lcssa)) + 8|0);
+       $160 = HEAP32[$159>>2]|0;
+       $161 = ($160>>>0)<($150>>>0);
+       if ($161) {
+        _abort();
+        // unreachable;
+       }
+       $162 = ((($160)) + 12|0);
+       $163 = HEAP32[$162>>2]|0;
+       $164 = ($163|0)==($v$0$i$lcssa|0);
+       if (!($164)) {
+        _abort();
+        // unreachable;
+       }
+       $165 = ((($157)) + 8|0);
+       $166 = HEAP32[$165>>2]|0;
+       $167 = ($166|0)==($v$0$i$lcssa|0);
+       if ($167) {
+        HEAP32[$162>>2] = $157;
+        HEAP32[$165>>2] = $160;
+        $R$3$i = $157;
+        break;
+       } else {
+        _abort();
+        // unreachable;
+       }
+      }
+     } while(0);
+     $181 = ($155|0)==(0|0);
+     do {
+      if (!($181)) {
+       $182 = ((($v$0$i$lcssa)) + 28|0);
+       $183 = HEAP32[$182>>2]|0;
+       $184 = (476 + ($183<<2)|0);
+       $185 = HEAP32[$184>>2]|0;
+       $186 = ($v$0$i$lcssa|0)==($185|0);
+       if ($186) {
+        HEAP32[$184>>2] = $R$3$i;
+        $cond$i = ($R$3$i|0)==(0|0);
+        if ($cond$i) {
+         $187 = 1 << $183;
+         $188 = $187 ^ -1;
+         $189 = HEAP32[(176)>>2]|0;
+         $190 = $189 & $188;
+         HEAP32[(176)>>2] = $190;
+         break;
+        }
+       } else {
+        $191 = HEAP32[(188)>>2]|0;
+        $192 = ($155>>>0)<($191>>>0);
+        if ($192) {
+         _abort();
+         // unreachable;
+        }
+        $193 = ((($155)) + 16|0);
+        $194 = HEAP32[$193>>2]|0;
+        $195 = ($194|0)==($v$0$i$lcssa|0);
+        if ($195) {
+         HEAP32[$193>>2] = $R$3$i;
+        } else {
+         $196 = ((($155)) + 20|0);
+         HEAP32[$196>>2] = $R$3$i;
+        }
+        $197 = ($R$3$i|0)==(0|0);
+        if ($197) {
+         break;
+        }
+       }
+       $198 = HEAP32[(188)>>2]|0;
+       $199 = ($R$3$i>>>0)<($198>>>0);
+       if ($199) {
+        _abort();
+        // unreachable;
+       }
+       $200 = ((($R$3$i)) + 24|0);
+       HEAP32[$200>>2] = $155;
+       $201 = ((($v$0$i$lcssa)) + 16|0);
+       $202 = HEAP32[$201>>2]|0;
+       $203 = ($202|0)==(0|0);
+       do {
+        if (!($203)) {
+         $204 = ($202>>>0)<($198>>>0);
+         if ($204) {
+          _abort();
+          // unreachable;
+         } else {
+          $205 = ((($R$3$i)) + 16|0);
+          HEAP32[$205>>2] = $202;
+          $206 = ((($202)) + 24|0);
+          HEAP32[$206>>2] = $R$3$i;
+          break;
+         }
+        }
+       } while(0);
+       $207 = ((($v$0$i$lcssa)) + 20|0);
+       $208 = HEAP32[$207>>2]|0;
+       $209 = ($208|0)==(0|0);
+       if (!($209)) {
+        $210 = HEAP32[(188)>>2]|0;
+        $211 = ($208>>>0)<($210>>>0);
+        if ($211) {
+         _abort();
+         // unreachable;
+        } else {
+         $212 = ((($R$3$i)) + 20|0);
+         HEAP32[$212>>2] = $208;
+         $213 = ((($208)) + 24|0);
+         HEAP32[$213>>2] = $R$3$i;
+         break;
+        }
+       }
+      }
+     } while(0);
+     $214 = ($rsize$0$i$lcssa>>>0)<(16);
+     if ($214) {
+      $215 = (($rsize$0$i$lcssa) + ($4))|0;
+      $216 = $215 | 3;
+      $217 = ((($v$0$i$lcssa)) + 4|0);
+      HEAP32[$217>>2] = $216;
+      $218 = (($v$0$i$lcssa) + ($215)|0);
+      $219 = ((($218)) + 4|0);
+      $220 = HEAP32[$219>>2]|0;
+      $221 = $220 | 1;
+      HEAP32[$219>>2] = $221;
+     } else {
+      $222 = $4 | 3;
+      $223 = ((($v$0$i$lcssa)) + 4|0);
+      HEAP32[$223>>2] = $222;
+      $224 = $rsize$0$i$lcssa | 1;
+      $225 = ((($152)) + 4|0);
+      HEAP32[$225>>2] = $224;
+      $226 = (($152) + ($rsize$0$i$lcssa)|0);
+      HEAP32[$226>>2] = $rsize$0$i$lcssa;
+      $227 = HEAP32[(180)>>2]|0;
+      $228 = ($227|0)==(0);
+      if (!($228)) {
+       $229 = HEAP32[(192)>>2]|0;
+       $230 = $227 >>> 3;
+       $231 = $230 << 1;
+       $232 = (212 + ($231<<2)|0);
+       $233 = HEAP32[43]|0;
+       $234 = 1 << $230;
+       $235 = $233 & $234;
+       $236 = ($235|0)==(0);
+       if ($236) {
+        $237 = $233 | $234;
+        HEAP32[43] = $237;
+        $$pre$i = ((($232)) + 8|0);
+        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $232;
+       } else {
+        $238 = ((($232)) + 8|0);
+        $239 = HEAP32[$238>>2]|0;
+        $240 = HEAP32[(188)>>2]|0;
+        $241 = ($239>>>0)<($240>>>0);
+        if ($241) {
+         _abort();
+         // unreachable;
+        } else {
+         $$pre$phi$iZ2D = $238;$F1$0$i = $239;
+        }
+       }
+       HEAP32[$$pre$phi$iZ2D>>2] = $229;
+       $242 = ((($F1$0$i)) + 12|0);
+       HEAP32[$242>>2] = $229;
+       $243 = ((($229)) + 8|0);
+       HEAP32[$243>>2] = $F1$0$i;
+       $244 = ((($229)) + 12|0);
+       HEAP32[$244>>2] = $232;
+      }
+      HEAP32[(180)>>2] = $rsize$0$i$lcssa;
+      HEAP32[(192)>>2] = $152;
+     }
+     $245 = ((($v$0$i$lcssa)) + 8|0);
+     $$0 = $245;
+     STACKTOP = sp;return ($$0|0);
+    }
+   } else {
+    $nb$0 = $4;
+   }
+  } else {
+   $246 = ($bytes>>>0)>(4294967231);
+   if ($246) {
+    $nb$0 = -1;
+   } else {
+    $247 = (($bytes) + 11)|0;
+    $248 = $247 & -8;
+    $249 = HEAP32[(176)>>2]|0;
+    $250 = ($249|0)==(0);
+    if ($250) {
+     $nb$0 = $248;
+    } else {
+     $251 = (0 - ($248))|0;
+     $252 = $247 >>> 8;
+     $253 = ($252|0)==(0);
+     if ($253) {
+      $idx$0$i = 0;
+     } else {
+      $254 = ($248>>>0)>(16777215);
+      if ($254) {
+       $idx$0$i = 31;
+      } else {
+       $255 = (($252) + 1048320)|0;
+       $256 = $255 >>> 16;
+       $257 = $256 & 8;
+       $258 = $252 << $257;
+       $259 = (($258) + 520192)|0;
+       $260 = $259 >>> 16;
+       $261 = $260 & 4;
+       $262 = $261 | $257;
+       $263 = $258 << $261;
+       $264 = (($263) + 245760)|0;
+       $265 = $264 >>> 16;
+       $266 = $265 & 2;
+       $267 = $262 | $266;
+       $268 = (14 - ($267))|0;
+       $269 = $263 << $266;
+       $270 = $269 >>> 15;
+       $271 = (($268) + ($270))|0;
+       $272 = $271 << 1;
+       $273 = (($271) + 7)|0;
+       $274 = $248 >>> $273;
+       $275 = $274 & 1;
+       $276 = $275 | $272;
+       $idx$0$i = $276;
+      }
+     }
+     $277 = (476 + ($idx$0$i<<2)|0);
+     $278 = HEAP32[$277>>2]|0;
+     $279 = ($278|0)==(0|0);
+     L123: do {
+      if ($279) {
+       $rsize$3$i = $251;$t$2$i = 0;$v$3$i = 0;
+       label = 86;
+      } else {
+       $280 = ($idx$0$i|0)==(31);
+       $281 = $idx$0$i >>> 1;
+       $282 = (25 - ($281))|0;
+       $283 = $280 ? 0 : $282;
+       $284 = $248 << $283;
+       $rsize$0$i5 = $251;$rst$0$i = 0;$sizebits$0$i = $284;$t$0$i4 = $278;$v$0$i6 = 0;
+       while(1) {
+        $285 = ((($t$0$i4)) + 4|0);
+        $286 = HEAP32[$285>>2]|0;
+        $287 = $286 & -8;
+        $288 = (($287) - ($248))|0;
+        $289 = ($288>>>0)<($rsize$0$i5>>>0);
+        if ($289) {
+         $290 = ($287|0)==($248|0);
+         if ($290) {
+          $rsize$412$i = $288;$t$411$i = $t$0$i4;$v$413$i = $t$0$i4;
+          label = 90;
+          break L123;
+         } else {
+          $rsize$1$i = $288;$v$1$i = $t$0$i4;
+         }
+        } else {
+         $rsize$1$i = $rsize$0$i5;$v$1$i = $v$0$i6;
+        }
+        $291 = ((($t$0$i4)) + 20|0);
+        $292 = HEAP32[$291>>2]|0;
+        $293 = $sizebits$0$i >>> 31;
+        $294 = (((($t$0$i4)) + 16|0) + ($293<<2)|0);
+        $295 = HEAP32[$294>>2]|0;
+        $296 = ($292|0)==(0|0);
+        $297 = ($292|0)==($295|0);
+        $or$cond1$i = $296 | $297;
+        $rst$1$i = $or$cond1$i ? $rst$0$i : $292;
+        $298 = ($295|0)==(0|0);
+        $299 = $298&1;
+        $300 = $299 ^ 1;
+        $sizebits$0$$i = $sizebits$0$i << $300;
+        if ($298) {
+         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
+         label = 86;
+         break;
+        } else {
+         $rsize$0$i5 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $sizebits$0$$i;$t$0$i4 = $295;$v$0$i6 = $v$1$i;
+        }
+       }
+      }
+     } while(0);
+     if ((label|0) == 86) {
+      $301 = ($t$2$i|0)==(0|0);
+      $302 = ($v$3$i|0)==(0|0);
+      $or$cond$i = $301 & $302;
+      if ($or$cond$i) {
+       $303 = 2 << $idx$0$i;
+       $304 = (0 - ($303))|0;
+       $305 = $303 | $304;
+       $306 = $249 & $305;
+       $307 = ($306|0)==(0);
+       if ($307) {
+        $nb$0 = $248;
+        break;
+       }
+       $308 = (0 - ($306))|0;
+       $309 = $306 & $308;
+       $310 = (($309) + -1)|0;
+       $311 = $310 >>> 12;
+       $312 = $311 & 16;
+       $313 = $310 >>> $312;
+       $314 = $313 >>> 5;
+       $315 = $314 & 8;
+       $316 = $315 | $312;
+       $317 = $313 >>> $315;
+       $318 = $317 >>> 2;
+       $319 = $318 & 4;
+       $320 = $316 | $319;
+       $321 = $317 >>> $319;
+       $322 = $321 >>> 1;
+       $323 = $322 & 2;
+       $324 = $320 | $323;
+       $325 = $321 >>> $323;
+       $326 = $325 >>> 1;
+       $327 = $326 & 1;
+       $328 = $324 | $327;
+       $329 = $325 >>> $327;
+       $330 = (($328) + ($329))|0;
+       $331 = (476 + ($330<<2)|0);
+       $332 = HEAP32[$331>>2]|0;
+       $t$4$ph$i = $332;
+      } else {
+       $t$4$ph$i = $t$2$i;
+      }
+      $333 = ($t$4$ph$i|0)==(0|0);
+      if ($333) {
+       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i;
+      } else {
+       $rsize$412$i = $rsize$3$i;$t$411$i = $t$4$ph$i;$v$413$i = $v$3$i;
+       label = 90;
+      }
+     }
+     if ((label|0) == 90) {
+      while(1) {
+       label = 0;
+       $334 = ((($t$411$i)) + 4|0);
+       $335 = HEAP32[$334>>2]|0;
+       $336 = $335 & -8;
+       $337 = (($336) - ($248))|0;
+       $338 = ($337>>>0)<($rsize$412$i>>>0);
+       $$rsize$4$i = $338 ? $337 : $rsize$412$i;
+       $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
+       $339 = ((($t$411$i)) + 16|0);
+       $340 = HEAP32[$339>>2]|0;
+       $341 = ($340|0)==(0|0);
+       if (!($341)) {
+        $rsize$412$i = $$rsize$4$i;$t$411$i = $340;$v$413$i = $t$4$v$4$i;
+        label = 90;
+        continue;
+       }
+       $342 = ((($t$411$i)) + 20|0);
+       $343 = HEAP32[$342>>2]|0;
+       $344 = ($343|0)==(0|0);
+       if ($344) {
+        $rsize$4$lcssa$i = $$rsize$4$i;$v$4$lcssa$i = $t$4$v$4$i;
+        break;
+       } else {
+        $rsize$412$i = $$rsize$4$i;$t$411$i = $343;$v$413$i = $t$4$v$4$i;
+        label = 90;
+       }
+      }
+     }
+     $345 = ($v$4$lcssa$i|0)==(0|0);
+     if ($345) {
+      $nb$0 = $248;
+     } else {
+      $346 = HEAP32[(180)>>2]|0;
+      $347 = (($346) - ($248))|0;
+      $348 = ($rsize$4$lcssa$i>>>0)<($347>>>0);
+      if ($348) {
+       $349 = HEAP32[(188)>>2]|0;
+       $350 = ($v$4$lcssa$i>>>0)<($349>>>0);
+       if ($350) {
+        _abort();
+        // unreachable;
+       }
+       $351 = (($v$4$lcssa$i) + ($248)|0);
+       $352 = ($v$4$lcssa$i>>>0)<($351>>>0);
+       if (!($352)) {
+        _abort();
+        // unreachable;
+       }
+       $353 = ((($v$4$lcssa$i)) + 24|0);
+       $354 = HEAP32[$353>>2]|0;
+       $355 = ((($v$4$lcssa$i)) + 12|0);
+       $356 = HEAP32[$355>>2]|0;
+       $357 = ($356|0)==($v$4$lcssa$i|0);
+       do {
+        if ($357) {
+         $367 = ((($v$4$lcssa$i)) + 20|0);
+         $368 = HEAP32[$367>>2]|0;
+         $369 = ($368|0)==(0|0);
+         if ($369) {
+          $370 = ((($v$4$lcssa$i)) + 16|0);
+          $371 = HEAP32[$370>>2]|0;
+          $372 = ($371|0)==(0|0);
+          if ($372) {
+           $R$3$i11 = 0;
+           break;
+          } else {
+           $R$1$i9 = $371;$RP$1$i8 = $370;
+          }
+         } else {
+          $R$1$i9 = $368;$RP$1$i8 = $367;
+         }
+         while(1) {
+          $373 = ((($R$1$i9)) + 20|0);
+          $374 = HEAP32[$373>>2]|0;
+          $375 = ($374|0)==(0|0);
+          if (!($375)) {
+           $R$1$i9 = $374;$RP$1$i8 = $373;
+           continue;
+          }
+          $376 = ((($R$1$i9)) + 16|0);
+          $377 = HEAP32[$376>>2]|0;
+          $378 = ($377|0)==(0|0);
+          if ($378) {
+           $R$1$i9$lcssa = $R$1$i9;$RP$1$i8$lcssa = $RP$1$i8;
+           break;
+          } else {
+           $R$1$i9 = $377;$RP$1$i8 = $376;
+          }
+         }
+         $379 = ($RP$1$i8$lcssa>>>0)<($349>>>0);
+         if ($379) {
+          _abort();
+          // unreachable;
+         } else {
+          HEAP32[$RP$1$i8$lcssa>>2] = 0;
+          $R$3$i11 = $R$1$i9$lcssa;
+          break;
+         }
+        } else {
+         $358 = ((($v$4$lcssa$i)) + 8|0);
+         $359 = HEAP32[$358>>2]|0;
+         $360 = ($359>>>0)<($349>>>0);
+         if ($360) {
+          _abort();
+          // unreachable;
+         }
+         $361 = ((($359)) + 12|0);
+         $362 = HEAP32[$361>>2]|0;
+         $363 = ($362|0)==($v$4$lcssa$i|0);
+         if (!($363)) {
+          _abort();
+          // unreachable;
+         }
+         $364 = ((($356)) + 8|0);
+         $365 = HEAP32[$364>>2]|0;
+         $366 = ($365|0)==($v$4$lcssa$i|0);
+         if ($366) {
+          HEAP32[$361>>2] = $356;
+          HEAP32[$364>>2] = $359;
+          $R$3$i11 = $356;
+          break;
+         } else {
+          _abort();
+          // unreachable;
+         }
+        }
+       } while(0);
+       $380 = ($354|0)==(0|0);
+       do {
+        if (!($380)) {
+         $381 = ((($v$4$lcssa$i)) + 28|0);
+         $382 = HEAP32[$381>>2]|0;
+         $383 = (476 + ($382<<2)|0);
+         $384 = HEAP32[$383>>2]|0;
+         $385 = ($v$4$lcssa$i|0)==($384|0);
+         if ($385) {
+          HEAP32[$383>>2] = $R$3$i11;
+          $cond$i12 = ($R$3$i11|0)==(0|0);
+          if ($cond$i12) {
+           $386 = 1 << $382;
+           $387 = $386 ^ -1;
+           $388 = HEAP32[(176)>>2]|0;
+           $389 = $388 & $387;
+           HEAP32[(176)>>2] = $389;
+           break;
+          }
+         } else {
+          $390 = HEAP32[(188)>>2]|0;
+          $391 = ($354>>>0)<($390>>>0);
+          if ($391) {
+           _abort();
+           // unreachable;
+          }
+          $392 = ((($354)) + 16|0);
+          $393 = HEAP32[$392>>2]|0;
+          $394 = ($393|0)==($v$4$lcssa$i|0);
+          if ($394) {
+           HEAP32[$392>>2] = $R$3$i11;
+          } else {
+           $395 = ((($354)) + 20|0);
+           HEAP32[$395>>2] = $R$3$i11;
+          }
+          $396 = ($R$3$i11|0)==(0|0);
+          if ($396) {
+           break;
+          }
+         }
+         $397 = HEAP32[(188)>>2]|0;
+         $398 = ($R$3$i11>>>0)<($397>>>0);
+         if ($398) {
+          _abort();
+          // unreachable;
+         }
+         $399 = ((($R$3$i11)) + 24|0);
+         HEAP32[$399>>2] = $354;
+         $400 = ((($v$4$lcssa$i)) + 16|0);
+         $401 = HEAP32[$400>>2]|0;
+         $402 = ($401|0)==(0|0);
+         do {
+          if (!($402)) {
+           $403 = ($401>>>0)<($397>>>0);
+           if ($403) {
+            _abort();
+            // unreachable;
+           } else {
+            $404 = ((($R$3$i11)) + 16|0);
+            HEAP32[$404>>2] = $401;
+            $405 = ((($401)) + 24|0);
+            HEAP32[$405>>2] = $R$3$i11;
+            break;
+           }
+          }
+         } while(0);
+         $406 = ((($v$4$lcssa$i)) + 20|0);
+         $407 = HEAP32[$406>>2]|0;
+         $408 = ($407|0)==(0|0);
+         if (!($408)) {
+          $409 = HEAP32[(188)>>2]|0;
+          $410 = ($407>>>0)<($409>>>0);
+          if ($410) {
+           _abort();
+           // unreachable;
+          } else {
+           $411 = ((($R$3$i11)) + 20|0);
+           HEAP32[$411>>2] = $407;
+           $412 = ((($407)) + 24|0);
+           HEAP32[$412>>2] = $R$3$i11;
+           break;
+          }
+         }
+        }
+       } while(0);
+       $413 = ($rsize$4$lcssa$i>>>0)<(16);
+       do {
+        if ($413) {
+         $414 = (($rsize$4$lcssa$i) + ($248))|0;
+         $415 = $414 | 3;
+         $416 = ((($v$4$lcssa$i)) + 4|0);
+         HEAP32[$416>>2] = $415;
+         $417 = (($v$4$lcssa$i) + ($414)|0);
+         $418 = ((($417)) + 4|0);
+         $419 = HEAP32[$418>>2]|0;
+         $420 = $419 | 1;
+         HEAP32[$418>>2] = $420;
+        } else {
+         $421 = $248 | 3;
+         $422 = ((($v$4$lcssa$i)) + 4|0);
+         HEAP32[$422>>2] = $421;
+         $423 = $rsize$4$lcssa$i | 1;
+         $424 = ((($351)) + 4|0);
+         HEAP32[$424>>2] = $423;
+         $425 = (($351) + ($rsize$4$lcssa$i)|0);
+         HEAP32[$425>>2] = $rsize$4$lcssa$i;
+         $426 = $rsize$4$lcssa$i >>> 3;
+         $427 = ($rsize$4$lcssa$i>>>0)<(256);
+         if ($427) {
+          $428 = $426 << 1;
+          $429 = (212 + ($428<<2)|0);
+          $430 = HEAP32[43]|0;
+          $431 = 1 << $426;
+          $432 = $430 & $431;
+          $433 = ($432|0)==(0);
+          if ($433) {
+           $434 = $430 | $431;
+           HEAP32[43] = $434;
+           $$pre$i13 = ((($429)) + 8|0);
+           $$pre$phi$i14Z2D = $$pre$i13;$F5$0$i = $429;
+          } else {
+           $435 = ((($429)) + 8|0);
+           $436 = HEAP32[$435>>2]|0;
+           $437 = HEAP32[(188)>>2]|0;
+           $438 = ($436>>>0)<($437>>>0);
+           if ($438) {
+            _abort();
+            // unreachable;
+           } else {
+            $$pre$phi$i14Z2D = $435;$F5$0$i = $436;
+           }
+          }
+          HEAP32[$$pre$phi$i14Z2D>>2] = $351;
+          $439 = ((($F5$0$i)) + 12|0);
+          HEAP32[$439>>2] = $351;
+          $440 = ((($351)) + 8|0);
+          HEAP32[$440>>2] = $F5$0$i;
+          $441 = ((($351)) + 12|0);
+          HEAP32[$441>>2] = $429;
+          break;
+         }
+         $442 = $rsize$4$lcssa$i >>> 8;
+         $443 = ($442|0)==(0);
+         if ($443) {
+          $I7$0$i = 0;
+         } else {
+          $444 = ($rsize$4$lcssa$i>>>0)>(16777215);
+          if ($444) {
+           $I7$0$i = 31;
+          } else {
+           $445 = (($442) + 1048320)|0;
+           $446 = $445 >>> 16;
+           $447 = $446 & 8;
+           $448 = $442 << $447;
+           $449 = (($448) + 520192)|0;
+           $450 = $449 >>> 16;
+           $451 = $450 & 4;
+           $452 = $451 | $447;
+           $453 = $448 << $451;
+           $454 = (($453) + 245760)|0;
+           $455 = $454 >>> 16;
+           $456 = $455 & 2;
+           $457 = $452 | $456;
+           $458 = (14 - ($457))|0;
+           $459 = $453 << $456;
+           $460 = $459 >>> 15;
+           $461 = (($458) + ($460))|0;
+           $462 = $461 << 1;
+           $463 = (($461) + 7)|0;
+           $464 = $rsize$4$lcssa$i >>> $463;
+           $465 = $464 & 1;
+           $466 = $465 | $462;
+           $I7$0$i = $466;
+          }
+         }
+         $467 = (476 + ($I7$0$i<<2)|0);
+         $468 = ((($351)) + 28|0);
+         HEAP32[$468>>2] = $I7$0$i;
+         $469 = ((($351)) + 16|0);
+         $470 = ((($469)) + 4|0);
+         HEAP32[$470>>2] = 0;
+         HEAP32[$469>>2] = 0;
+         $471 = HEAP32[(176)>>2]|0;
+         $472 = 1 << $I7$0$i;
+         $473 = $471 & $472;
+         $474 = ($473|0)==(0);
+         if ($474) {
+          $475 = $471 | $472;
+          HEAP32[(176)>>2] = $475;
+          HEAP32[$467>>2] = $351;
+          $476 = ((($351)) + 24|0);
+          HEAP32[$476>>2] = $467;
+          $477 = ((($351)) + 12|0);
+          HEAP32[$477>>2] = $351;
+          $478 = ((($351)) + 8|0);
+          HEAP32[$478>>2] = $351;
+          break;
+         }
+         $479 = HEAP32[$467>>2]|0;
+         $480 = ($I7$0$i|0)==(31);
+         $481 = $I7$0$i >>> 1;
+         $482 = (25 - ($481))|0;
+         $483 = $480 ? 0 : $482;
+         $484 = $rsize$4$lcssa$i << $483;
+         $K12$0$i = $484;$T$0$i = $479;
+         while(1) {
+          $485 = ((($T$0$i)) + 4|0);
+          $486 = HEAP32[$485>>2]|0;
+          $487 = $486 & -8;
+          $488 = ($487|0)==($rsize$4$lcssa$i|0);
+          if ($488) {
+           $T$0$i$lcssa = $T$0$i;
+           label = 148;
+           break;
+          }
+          $489 = $K12$0$i >>> 31;
+          $490 = (((($T$0$i)) + 16|0) + ($489<<2)|0);
+          $491 = $K12$0$i << 1;
+          $492 = HEAP32[$490>>2]|0;
+          $493 = ($492|0)==(0|0);
+          if ($493) {
+           $$lcssa157 = $490;$T$0$i$lcssa156 = $T$0$i;
+           label = 145;
+           break;
+          } else {
+           $K12$0$i = $491;$T$0$i = $492;
+          }
+         }
+         if ((label|0) == 145) {
+          $494 = HEAP32[(188)>>2]|0;
+          $495 = ($$lcssa157>>>0)<($494>>>0);
+          if ($495) {
+           _abort();
+           // unreachable;
+          } else {
+           HEAP32[$$lcssa157>>2] = $351;
+           $496 = ((($351)) + 24|0);
+           HEAP32[$496>>2] = $T$0$i$lcssa156;
+           $497 = ((($351)) + 12|0);
+           HEAP32[$497>>2] = $351;
+           $498 = ((($351)) + 8|0);
+           HEAP32[$498>>2] = $351;
+           break;
+          }
+         }
+         else if ((label|0) == 148) {
+          $499 = ((($T$0$i$lcssa)) + 8|0);
+          $500 = HEAP32[$499>>2]|0;
+          $501 = HEAP32[(188)>>2]|0;
+          $502 = ($500>>>0)>=($501>>>0);
+          $not$7$i = ($T$0$i$lcssa>>>0)>=($501>>>0);
+          $503 = $502 & $not$7$i;
+          if ($503) {
+           $504 = ((($500)) + 12|0);
+           HEAP32[$504>>2] = $351;
+           HEAP32[$499>>2] = $351;
+           $505 = ((($351)) + 8|0);
+           HEAP32[$505>>2] = $500;
+           $506 = ((($351)) + 12|0);
+           HEAP32[$506>>2] = $T$0$i$lcssa;
+           $507 = ((($351)) + 24|0);
+           HEAP32[$507>>2] = 0;
+           break;
+          } else {
+           _abort();
+           // unreachable;
+          }
+         }
+        }
+       } while(0);
+       $508 = ((($v$4$lcssa$i)) + 8|0);
+       $$0 = $508;
+       STACKTOP = sp;return ($$0|0);
+      } else {
+       $nb$0 = $248;
+      }
+     }
+    }
+   }
+  }
+ } while(0);
+ $509 = HEAP32[(180)>>2]|0;
+ $510 = ($509>>>0)<($nb$0>>>0);
+ if (!($510)) {
+  $511 = (($509) - ($nb$0))|0;
+  $512 = HEAP32[(192)>>2]|0;
+  $513 = ($511>>>0)>(15);
+  if ($513) {
+   $514 = (($512) + ($nb$0)|0);
+   HEAP32[(192)>>2] = $514;
+   HEAP32[(180)>>2] = $511;
+   $515 = $511 | 1;
+   $516 = ((($514)) + 4|0);
+   HEAP32[$516>>2] = $515;
+   $517 = (($514) + ($511)|0);
+   HEAP32[$517>>2] = $511;
+   $518 = $nb$0 | 3;
+   $519 = ((($512)) + 4|0);
+   HEAP32[$519>>2] = $518;
+  } else {
+   HEAP32[(180)>>2] = 0;
+   HEAP32[(192)>>2] = 0;
+   $520 = $509 | 3;
+   $521 = ((($512)) + 4|0);
+   HEAP32[$521>>2] = $520;
+   $522 = (($512) + ($509)|0);
+   $523 = ((($522)) + 4|0);
+   $524 = HEAP32[$523>>2]|0;
+   $525 = $524 | 1;
+   HEAP32[$523>>2] = $525;
+  }
+  $526 = ((($512)) + 8|0);
+  $$0 = $526;
+  STACKTOP = sp;return ($$0|0);
+ }
+ $527 = HEAP32[(184)>>2]|0;
+ $528 = ($527>>>0)>($nb$0>>>0);
+ if ($528) {
+  $529 = (($527) - ($nb$0))|0;
+  HEAP32[(184)>>2] = $529;
+  $530 = HEAP32[(196)>>2]|0;
+  $531 = (($530) + ($nb$0)|0);
+  HEAP32[(196)>>2] = $531;
+  $532 = $529 | 1;
+  $533 = ((($531)) + 4|0);
+  HEAP32[$533>>2] = $532;
+  $534 = $nb$0 | 3;
+  $535 = ((($530)) + 4|0);
+  HEAP32[$535>>2] = $534;
+  $536 = ((($530)) + 8|0);
+  $$0 = $536;
+  STACKTOP = sp;return ($$0|0);
+ }
+ $537 = HEAP32[161]|0;
+ $538 = ($537|0)==(0);
+ if ($538) {
+  HEAP32[(652)>>2] = 4096;
+  HEAP32[(648)>>2] = 4096;
+  HEAP32[(656)>>2] = -1;
+  HEAP32[(660)>>2] = -1;
+  HEAP32[(664)>>2] = 0;
+  HEAP32[(616)>>2] = 0;
+  $539 = $magic$i$i;
+  $540 = $539 & -16;
+  $541 = $540 ^ 1431655768;
+  HEAP32[$magic$i$i>>2] = $541;
+  HEAP32[161] = $541;
+ }
+ $542 = (($nb$0) + 48)|0;
+ $543 = HEAP32[(652)>>2]|0;
+ $544 = (($nb$0) + 47)|0;
+ $545 = (($543) + ($544))|0;
+ $546 = (0 - ($543))|0;
+ $547 = $545 & $546;
+ $548 = ($547>>>0)>($nb$0>>>0);
+ if (!($548)) {
+  $$0 = 0;
+  STACKTOP = sp;return ($$0|0);
+ }
+ $549 = HEAP32[(612)>>2]|0;
+ $550 = ($549|0)==(0);
+ if (!($550)) {
+  $551 = HEAP32[(604)>>2]|0;
+  $552 = (($551) + ($547))|0;
+  $553 = ($552>>>0)<=($551>>>0);
+  $554 = ($552>>>0)>($549>>>0);
+  $or$cond1$i16 = $553 | $554;
+  if ($or$cond1$i16) {
+   $$0 = 0;
+   STACKTOP = sp;return ($$0|0);
+  }
+ }
+ $555 = HEAP32[(616)>>2]|0;
+ $556 = $555 & 4;
+ $557 = ($556|0)==(0);
+ L254: do {
+  if ($557) {
+   $558 = HEAP32[(196)>>2]|0;
+   $559 = ($558|0)==(0|0);
+   L256: do {
+    if ($559) {
+     label = 171;
+    } else {
+     $sp$0$i$i = (620);
+     while(1) {
+      $560 = HEAP32[$sp$0$i$i>>2]|0;
+      $561 = ($560>>>0)>($558>>>0);
+      if (!($561)) {
+       $562 = ((($sp$0$i$i)) + 4|0);
+       $563 = HEAP32[$562>>2]|0;
+       $564 = (($560) + ($563)|0);
+       $565 = ($564>>>0)>($558>>>0);
+       if ($565) {
+        $$lcssa153 = $sp$0$i$i;$$lcssa155 = $562;
+        break;
+       }
+      }
+      $566 = ((($sp$0$i$i)) + 8|0);
+      $567 = HEAP32[$566>>2]|0;
+      $568 = ($567|0)==(0|0);
+      if ($568) {
+       label = 171;
+       break L256;
+      } else {
+       $sp$0$i$i = $567;
+      }
+     }
+     $591 = HEAP32[(184)>>2]|0;
+     $592 = (($545) - ($591))|0;
+     $593 = $592 & $546;
+     $594 = ($593>>>0)<(2147483647);
+     if ($594) {
+      $595 = (_sbrk(($593|0))|0);
+      $596 = HEAP32[$$lcssa153>>2]|0;
+      $597 = HEAP32[$$lcssa155>>2]|0;
+      $598 = (($596) + ($597)|0);
+      $599 = ($595|0)==($598|0);
+      if ($599) {
+       $600 = ($595|0)==((-1)|0);
+       if (!($600)) {
+        $tbase$746$i = $595;$tsize$745$i = $593;
+        label = 191;
+        break L254;
+       }
+      } else {
+       $br$2$ph$i = $595;$ssize$2$ph$i = $593;
+       label = 181;
+      }
+     }
+    }
+   } while(0);
+   do {
+    if ((label|0) == 171) {
+     $569 = (_sbrk(0)|0);
+     $570 = ($569|0)==((-1)|0);
+     if (!($570)) {
+      $571 = $569;
+      $572 = HEAP32[(648)>>2]|0;
+      $573 = (($572) + -1)|0;
+      $574 = $573 & $571;
+      $575 = ($574|0)==(0);
+      if ($575) {
+       $ssize$0$i = $547;
+      } else {
+       $576 = (($573) + ($571))|0;
+       $577 = (0 - ($572))|0;
+       $578 = $576 & $577;
+       $579 = (($547) - ($571))|0;
+       $580 = (($579) + ($578))|0;
+       $ssize$0$i = $580;
+      }
+      $581 = HEAP32[(604)>>2]|0;
+      $582 = (($581) + ($ssize$0$i))|0;
+      $583 = ($ssize$0$i>>>0)>($nb$0>>>0);
+      $584 = ($ssize$0$i>>>0)<(2147483647);
+      $or$cond$i17 = $583 & $584;
+      if ($or$cond$i17) {
+       $585 = HEAP32[(612)>>2]|0;
+       $586 = ($585|0)==(0);
+       if (!($586)) {
+        $587 = ($582>>>0)<=($581>>>0);
+        $588 = ($582>>>0)>($585>>>0);
+        $or$cond2$i = $587 | $588;
+        if ($or$cond2$i) {
+         break;
+        }
+       }
+       $589 = (_sbrk(($ssize$0$i|0))|0);
+       $590 = ($589|0)==($569|0);
+       if ($590) {
+        $tbase$746$i = $569;$tsize$745$i = $ssize$0$i;
+        label = 191;
+        break L254;
+       } else {
+        $br$2$ph$i = $589;$ssize$2$ph$i = $ssize$0$i;
+        label = 181;
+       }
+      }
+     }
+    }
+   } while(0);
+   L276: do {
+    if ((label|0) == 181) {
+     $601 = (0 - ($ssize$2$ph$i))|0;
+     $602 = ($br$2$ph$i|0)!=((-1)|0);
+     $603 = ($ssize$2$ph$i>>>0)<(2147483647);
+     $or$cond7$i = $603 & $602;
+     $604 = ($542>>>0)>($ssize$2$ph$i>>>0);
+     $or$cond8$i = $604 & $or$cond7$i;
+     do {
+      if ($or$cond8$i) {
+       $605 = HEAP32[(652)>>2]|0;
+       $606 = (($544) - ($ssize$2$ph$i))|0;
+       $607 = (($606) + ($605))|0;
+       $608 = (0 - ($605))|0;
+       $609 = $607 & $608;
+       $610 = ($609>>>0)<(2147483647);
+       if ($610) {
+        $611 = (_sbrk(($609|0))|0);
+        $612 = ($611|0)==((-1)|0);
+        if ($612) {
+         (_sbrk(($601|0))|0);
+         break L276;
+        } else {
+         $613 = (($609) + ($ssize$2$ph$i))|0;
+         $ssize$5$i = $613;
+         break;
+        }
+       } else {
+        $ssize$5$i = $ssize$2$ph$i;
+       }
+      } else {
+       $ssize$5$i = $ssize$2$ph$i;
+      }
+     } while(0);
+     $614 = ($br$2$ph$i|0)==((-1)|0);
+     if (!($614)) {
+      $tbase$746$i = $br$2$ph$i;$tsize$745$i = $ssize$5$i;
+      label = 191;
+      break L254;
+     }
+    }
+   } while(0);
+   $615 = HEAP32[(616)>>2]|0;
+   $616 = $615 | 4;
+   HEAP32[(616)>>2] = $616;
+   label = 188;
+  } else {
+   label = 188;
+  }
+ } while(0);
+ if ((label|0) == 188) {
+  $617 = ($547>>>0)<(2147483647);
+  if ($617) {
+   $618 = (_sbrk(($547|0))|0);
+   $619 = (_sbrk(0)|0);
+   $620 = ($618|0)!=((-1)|0);
+   $621 = ($619|0)!=((-1)|0);
+   $or$cond5$i = $620 & $621;
+   $622 = ($618>>>0)<($619>>>0);
+   $or$cond10$i = $622 & $or$cond5$i;
+   if ($or$cond10$i) {
+    $623 = $619;
+    $624 = $618;
+    $625 = (($623) - ($624))|0;
+    $626 = (($nb$0) + 40)|0;
+    $$not$i = ($625>>>0)>($626>>>0);
+    if ($$not$i) {
+     $tbase$746$i = $618;$tsize$745$i = $625;
+     label = 191;
+    }
+   }
+  }
+ }
+ if ((label|0) == 191) {
+  $627 = HEAP32[(604)>>2]|0;
+  $628 = (($627) + ($tsize$745$i))|0;
+  HEAP32[(604)>>2] = $628;
+  $629 = HEAP32[(608)>>2]|0;
+  $630 = ($628>>>0)>($629>>>0);
+  if ($630) {
+   HEAP32[(608)>>2] = $628;
+  }
+  $631 = HEAP32[(196)>>2]|0;
+  $632 = ($631|0)==(0|0);
+  do {
+   if ($632) {
+    $633 = HEAP32[(188)>>2]|0;
+    $634 = ($633|0)==(0|0);
+    $635 = ($tbase$746$i>>>0)<($633>>>0);
+    $or$cond11$i = $634 | $635;
+    if ($or$cond11$i) {
+     HEAP32[(188)>>2] = $tbase$746$i;
+    }
+    HEAP32[(620)>>2] = $tbase$746$i;
+    HEAP32[(624)>>2] = $tsize$745$i;
+    HEAP32[(632)>>2] = 0;
+    $636 = HEAP32[161]|0;
+    HEAP32[(208)>>2] = $636;
+    HEAP32[(204)>>2] = -1;
+    $i$01$i$i = 0;
+    while(1) {
+     $637 = $i$01$i$i << 1;
+     $638 = (212 + ($637<<2)|0);
+     $639 = ((($638)) + 12|0);
+     HEAP32[$639>>2] = $638;
+     $640 = ((($638)) + 8|0);
+     HEAP32[$640>>2] = $638;
+     $641 = (($i$01$i$i) + 1)|0;
+     $exitcond$i$i = ($641|0)==(32);
+     if ($exitcond$i$i) {
+      break;
+     } else {
+      $i$01$i$i = $641;
+     }
+    }
+    $642 = (($tsize$745$i) + -40)|0;
+    $643 = ((($tbase$746$i)) + 8|0);
+    $644 = $643;
+    $645 = $644 & 7;
+    $646 = ($645|0)==(0);
+    $647 = (0 - ($644))|0;
+    $648 = $647 & 7;
+    $649 = $646 ? 0 : $648;
+    $650 = (($tbase$746$i) + ($649)|0);
+    $651 = (($642) - ($649))|0;
+    HEAP32[(196)>>2] = $650;
+    HEAP32[(184)>>2] = $651;
+    $652 = $651 | 1;
+    $653 = ((($650)) + 4|0);
+    HEAP32[$653>>2] = $652;
+    $654 = (($650) + ($651)|0);
+    $655 = ((($654)) + 4|0);
+    HEAP32[$655>>2] = 40;
+    $656 = HEAP32[(660)>>2]|0;
+    HEAP32[(200)>>2] = $656;
+   } else {
+    $sp$068$i = (620);
+    while(1) {
+     $657 = HEAP32[$sp$068$i>>2]|0;
+     $658 = ((($sp$068$i)) + 4|0);
+     $659 = HEAP32[$658>>2]|0;
+     $660 = (($657) + ($659)|0);
+     $661 = ($tbase$746$i|0)==($660|0);
+     if ($661) {
+      $$lcssa147 = $657;$$lcssa149 = $658;$$lcssa151 = $659;$sp$068$i$lcssa = $sp$068$i;
+      label = 201;
+      break;
+     }
+     $662 = ((($sp$068$i)) + 8|0);
+     $663 = HEAP32[$662>>2]|0;
+     $664 = ($663|0)==(0|0);
+     if ($664) {
+      break;
+     } else {
+      $sp$068$i = $663;
+     }
+    }
+    if ((label|0) == 201) {
+     $665 = ((($sp$068$i$lcssa)) + 12|0);
+     $666 = HEAP32[$665>>2]|0;
+     $667 = $666 & 8;
+     $668 = ($667|0)==(0);
+     if ($668) {
+      $669 = ($631>>>0)>=($$lcssa147>>>0);
+      $670 = ($631>>>0)<($tbase$746$i>>>0);
+      $or$cond48$i = $670 & $669;
+      if ($or$cond48$i) {
+       $671 = (($$lcssa151) + ($tsize$745$i))|0;
+       HEAP32[$$lcssa149>>2] = $671;
+       $672 = HEAP32[(184)>>2]|0;
+       $673 = ((($631)) + 8|0);
+       $674 = $673;
+       $675 = $674 & 7;
+       $676 = ($675|0)==(0);
+       $677 = (0 - ($674))|0;
+       $678 = $677 & 7;
+       $679 = $676 ? 0 : $678;
+       $680 = (($631) + ($679)|0);
+       $681 = (($tsize$745$i) - ($679))|0;
+       $682 = (($681) + ($672))|0;
+       HEAP32[(196)>>2] = $680;
+       HEAP32[(184)>>2] = $682;
+       $683 = $682 | 1;
+       $684 = ((($680)) + 4|0);
+       HEAP32[$684>>2] = $683;
+       $685 = (($680) + ($682)|0);
+       $686 = ((($685)) + 4|0);
+       HEAP32[$686>>2] = 40;
+       $687 = HEAP32[(660)>>2]|0;
+       HEAP32[(200)>>2] = $687;
+       break;
+      }
+     }
+    }
+    $688 = HEAP32[(188)>>2]|0;
+    $689 = ($tbase$746$i>>>0)<($688>>>0);
+    if ($689) {
+     HEAP32[(188)>>2] = $tbase$746$i;
+     $753 = $tbase$746$i;
+    } else {
+     $753 = $688;
+    }
+    $690 = (($tbase$746$i) + ($tsize$745$i)|0);
+    $sp$167$i = (620);
+    while(1) {
+     $691 = HEAP32[$sp$167$i>>2]|0;
+     $692 = ($691|0)==($690|0);
+     if ($692) {
+      $$lcssa144 = $sp$167$i;$sp$167$i$lcssa = $sp$167$i;
+      label = 209;
+      break;
+     }
+     $693 = ((($sp$167$i)) + 8|0);
+     $694 = HEAP32[$693>>2]|0;
+     $695 = ($694|0)==(0|0);
+     if ($695) {
+      $sp$0$i$i$i = (620);
+      break;
+     } else {
+      $sp$167$i = $694;
+     }
+    }
+    if ((label|0) == 209) {
+     $696 = ((($sp$167$i$lcssa)) + 12|0);
+     $697 = HEAP32[$696>>2]|0;
+     $698 = $697 & 8;
+     $699 = ($698|0)==(0);
+     if ($699) {
+      HEAP32[$$lcssa144>>2] = $tbase$746$i;
+      $700 = ((($sp$167$i$lcssa)) + 4|0);
+      $701 = HEAP32[$700>>2]|0;
+      $702 = (($701) + ($tsize$745$i))|0;
+      HEAP32[$700>>2] = $702;
+      $703 = ((($tbase$746$i)) + 8|0);
+      $704 = $703;
+      $705 = $704 & 7;
+      $706 = ($705|0)==(0);
+      $707 = (0 - ($704))|0;
+      $708 = $707 & 7;
+      $709 = $706 ? 0 : $708;
+      $710 = (($tbase$746$i) + ($709)|0);
+      $711 = ((($690)) + 8|0);
+      $712 = $711;
+      $713 = $712 & 7;
+      $714 = ($713|0)==(0);
+      $715 = (0 - ($712))|0;
+      $716 = $715 & 7;
+      $717 = $714 ? 0 : $716;
+      $718 = (($690) + ($717)|0);
+      $719 = $718;
+      $720 = $710;
+      $721 = (($719) - ($720))|0;
+      $722 = (($710) + ($nb$0)|0);
+      $723 = (($721) - ($nb$0))|0;
+      $724 = $nb$0 | 3;
+      $725 = ((($710)) + 4|0);
+      HEAP32[$725>>2] = $724;
+      $726 = ($718|0)==($631|0);
+      do {
+       if ($726) {
+        $727 = HEAP32[(184)>>2]|0;
+        $728 = (($727) + ($723))|0;
+        HEAP32[(184)>>2] = $728;
+        HEAP32[(196)>>2] = $722;
+        $729 = $728 | 1;
+        $730 = ((($722)) + 4|0);
+        HEAP32[$730>>2] = $729;
+       } else {
+        $731 = HEAP32[(192)>>2]|0;
+        $732 = ($718|0)==($731|0);
+        if ($732) {
+         $733 = HEAP32[(180)>>2]|0;
+         $734 = (($733) + ($723))|0;
+         HEAP32[(180)>>2] = $734;
+         HEAP32[(192)>>2] = $722;
+         $735 = $734 | 1;
+         $736 = ((($722)) + 4|0);
+         HEAP32[$736>>2] = $735;
+         $737 = (($722) + ($734)|0);
+         HEAP32[$737>>2] = $734;
+         break;
+        }
+        $738 = ((($718)) + 4|0);
+        $739 = HEAP32[$738>>2]|0;
+        $740 = $739 & 3;
+        $741 = ($740|0)==(1);
+        if ($741) {
+         $742 = $739 & -8;
+         $743 = $739 >>> 3;
+         $744 = ($739>>>0)<(256);
+         L328: do {
+          if ($744) {
+           $745 = ((($718)) + 8|0);
+           $746 = HEAP32[$745>>2]|0;
+           $747 = ((($718)) + 12|0);
+           $748 = HEAP32[$747>>2]|0;
+           $749 = $743 << 1;
+           $750 = (212 + ($749<<2)|0);
+           $751 = ($746|0)==($750|0);
+           do {
+            if (!($751)) {
+             $752 = ($746>>>0)<($753>>>0);
+             if ($752) {
+              _abort();
+              // unreachable;
+             }
+             $754 = ((($746)) + 12|0);
+             $755 = HEAP32[$754>>2]|0;
+             $756 = ($755|0)==($718|0);
+             if ($756) {
+              break;
+             }
+             _abort();
+             // unreachable;
+            }
+           } while(0);
+           $757 = ($748|0)==($746|0);
+           if ($757) {
+            $758 = 1 << $743;
+            $759 = $758 ^ -1;
+            $760 = HEAP32[43]|0;
+            $761 = $760 & $759;
+            HEAP32[43] = $761;
+            break;
+           }
+           $762 = ($748|0)==($750|0);
+           do {
+            if ($762) {
+             $$pre9$i$i = ((($748)) + 8|0);
+             $$pre$phi10$i$iZ2D = $$pre9$i$i;
+            } else {
+             $763 = ($748>>>0)<($753>>>0);
+             if ($763) {
+              _abort();
+              // unreachable;
+             }
+             $764 = ((($748)) + 8|0);
+             $765 = HEAP32[$764>>2]|0;
+             $766 = ($765|0)==($718|0);
+             if ($766) {
+              $$pre$phi10$i$iZ2D = $764;
+              break;
+             }
+             _abort();
+             // unreachable;
+            }
+           } while(0);
+           $767 = ((($746)) + 12|0);
+           HEAP32[$767>>2] = $748;
+           HEAP32[$$pre$phi10$i$iZ2D>>2] = $746;
+          } else {
+           $768 = ((($718)) + 24|0);
+           $769 = HEAP32[$768>>2]|0;
+           $770 = ((($718)) + 12|0);
+           $771 = HEAP32[$770>>2]|0;
+           $772 = ($771|0)==($718|0);
+           do {
+            if ($772) {
+             $782 = ((($718)) + 16|0);
+             $783 = ((($782)) + 4|0);
+             $784 = HEAP32[$783>>2]|0;
+             $785 = ($784|0)==(0|0);
+             if ($785) {
+              $786 = HEAP32[$782>>2]|0;
+              $787 = ($786|0)==(0|0);
+              if ($787) {
+               $R$3$i$i = 0;
+               break;
+              } else {
+               $R$1$i$i = $786;$RP$1$i$i = $782;
+              }
+             } else {
+              $R$1$i$i = $784;$RP$1$i$i = $783;
+             }
+             while(1) {
+              $788 = ((($R$1$i$i)) + 20|0);
+              $789 = HEAP32[$788>>2]|0;
+              $790 = ($789|0)==(0|0);
+              if (!($790)) {
+               $R$1$i$i = $789;$RP$1$i$i = $788;
+               continue;
+              }
+              $791 = ((($R$1$i$i)) + 16|0);
+              $792 = HEAP32[$791>>2]|0;
+              $793 = ($792|0)==(0|0);
+              if ($793) {
+               $R$1$i$i$lcssa = $R$1$i$i;$RP$1$i$i$lcssa = $RP$1$i$i;
+               break;
+              } else {
+               $R$1$i$i = $792;$RP$1$i$i = $791;
+              }
+             }
+             $794 = ($RP$1$i$i$lcssa>>>0)<($753>>>0);
+             if ($794) {
+              _abort();
+              // unreachable;
+             } else {
+              HEAP32[$RP$1$i$i$lcssa>>2] = 0;
+              $R$3$i$i = $R$1$i$i$lcssa;
+              break;
+             }
+            } else {
+             $773 = ((($718)) + 8|0);
+             $774 = HEAP32[$773>>2]|0;
+             $775 = ($774>>>0)<($753>>>0);
+             if ($775) {
+              _abort();
+              // unreachable;
+             }
+             $776 = ((($774)) + 12|0);
+             $777 = HEAP32[$776>>2]|0;
+             $778 = ($777|0)==($718|0);
+             if (!($778)) {
+              _abort();
+              // unreachable;
+             }
+             $779 = ((($771)) + 8|0);
+             $780 = HEAP32[$779>>2]|0;
+             $781 = ($780|0)==($718|0);
+             if ($781) {
+              HEAP32[$776>>2] = $771;
+              HEAP32[$779>>2] = $774;
+              $R$3$i$i = $771;
+              break;
+             } else {
+              _abort();
+              // unreachable;
+             }
+            }
+           } while(0);
+           $795 = ($769|0)==(0|0);
+           if ($795) {
+            break;
+           }
+           $796 = ((($718)) + 28|0);
+           $797 = HEAP32[$796>>2]|0;
+           $798 = (476 + ($797<<2)|0);
+           $799 = HEAP32[$798>>2]|0;
+           $800 = ($718|0)==($799|0);
+           do {
+            if ($800) {
+             HEAP32[$798>>2] = $R$3$i$i;
+             $cond$i$i = ($R$3$i$i|0)==(0|0);
+             if (!($cond$i$i)) {
+              break;
+             }
+             $801 = 1 << $797;
+             $802 = $801 ^ -1;
+             $803 = HEAP32[(176)>>2]|0;
+             $804 = $803 & $802;
+             HEAP32[(176)>>2] = $804;
+             break L328;
+            } else {
+             $805 = HEAP32[(188)>>2]|0;
+             $806 = ($769>>>0)<($805>>>0);
+             if ($806) {
+              _abort();
+              // unreachable;
+             }
+             $807 = ((($769)) + 16|0);
+             $808 = HEAP32[$807>>2]|0;
+             $809 = ($808|0)==($718|0);
+             if ($809) {
+              HEAP32[$807>>2] = $R$3$i$i;
+             } else {
+              $810 = ((($769)) + 20|0);
+              HEAP32[$810>>2] = $R$3$i$i;
+             }
+             $811 = ($R$3$i$i|0)==(0|0);
+             if ($811) {
+              break L328;
+             }
+            }
+           } while(0);
+           $812 = HEAP32[(188)>>2]|0;
+           $813 = ($R$3$i$i>>>0)<($812>>>0);
+           if ($813) {
+            _abort();
+            // unreachable;
+           }
+           $814 = ((($R$3$i$i)) + 24|0);
+           HEAP32[$814>>2] = $769;
+           $815 = ((($718)) + 16|0);
+           $816 = HEAP32[$815>>2]|0;
+           $817 = ($816|0)==(0|0);
+           do {
+            if (!($817)) {
+             $818 = ($816>>>0)<($812>>>0);
+             if ($818) {
+              _abort();
+              // unreachable;
+             } else {
+              $819 = ((($R$3$i$i)) + 16|0);
+              HEAP32[$819>>2] = $816;
+              $820 = ((($816)) + 24|0);
+              HEAP32[$820>>2] = $R$3$i$i;
+              break;
+             }
+            }
+           } while(0);
+           $821 = ((($815)) + 4|0);
+           $822 = HEAP32[$821>>2]|0;
+           $823 = ($822|0)==(0|0);
+           if ($823) {
+            break;
+           }
+           $824 = HEAP32[(188)>>2]|0;
+           $825 = ($822>>>0)<($824>>>0);
+           if ($825) {
+            _abort();
+            // unreachable;
+           } else {
+            $826 = ((($R$3$i$i)) + 20|0);
+            HEAP32[$826>>2] = $822;
+            $827 = ((($822)) + 24|0);
+            HEAP32[$827>>2] = $R$3$i$i;
+            break;
+           }
+          }
+         } while(0);
+         $828 = (($718) + ($742)|0);
+         $829 = (($742) + ($723))|0;
+         $oldfirst$0$i$i = $828;$qsize$0$i$i = $829;
+        } else {
+         $oldfirst$0$i$i = $718;$qsize$0$i$i = $723;
+        }
+        $830 = ((($oldfirst$0$i$i)) + 4|0);
+        $831 = HEAP32[$830>>2]|0;
+        $832 = $831 & -2;
+        HEAP32[$830>>2] = $832;
+        $833 = $qsize$0$i$i | 1;
+        $834 = ((($722)) + 4|0);
+        HEAP32[$834>>2] = $833;
+        $835 = (($722) + ($qsize$0$i$i)|0);
+        HEAP32[$835>>2] = $qsize$0$i$i;
+        $836 = $qsize$0$i$i >>> 3;
+        $837 = ($qsize$0$i$i>>>0)<(256);
+        if ($837) {
+         $838 = $836 << 1;
+         $839 = (212 + ($838<<2)|0);
+         $840 = HEAP32[43]|0;
+         $841 = 1 << $836;
+         $842 = $840 & $841;
+         $843 = ($842|0)==(0);
+         do {
+          if ($843) {
+           $844 = $840 | $841;
+           HEAP32[43] = $844;
+           $$pre$i16$i = ((($839)) + 8|0);
+           $$pre$phi$i17$iZ2D = $$pre$i16$i;$F4$0$i$i = $839;
+          } else {
+           $845 = ((($839)) + 8|0);
+           $846 = HEAP32[$845>>2]|0;
+           $847 = HEAP32[(188)>>2]|0;
+           $848 = ($846>>>0)<($847>>>0);
+           if (!($848)) {
+            $$pre$phi$i17$iZ2D = $845;$F4$0$i$i = $846;
+            break;
+           }
+           _abort();
+           // unreachable;
+          }
+         } while(0);
+         HEAP32[$$pre$phi$i17$iZ2D>>2] = $722;
+         $849 = ((($F4$0$i$i)) + 12|0);
+         HEAP32[$849>>2] = $722;
+         $850 = ((($722)) + 8|0);
+         HEAP32[$850>>2] = $F4$0$i$i;
+         $851 = ((($722)) + 12|0);
+         HEAP32[$851>>2] = $839;
+         break;
+        }
+        $852 = $qsize$0$i$i >>> 8;
+        $853 = ($852|0)==(0);
+        do {
+         if ($853) {
+          $I7$0$i$i = 0;
+         } else {
+          $854 = ($qsize$0$i$i>>>0)>(16777215);
+          if ($854) {
+           $I7$0$i$i = 31;
+           break;
+          }
+          $855 = (($852) + 1048320)|0;
+          $856 = $855 >>> 16;
+          $857 = $856 & 8;
+          $858 = $852 << $857;
+          $859 = (($858) + 520192)|0;
+          $860 = $859 >>> 16;
+          $861 = $860 & 4;
+          $862 = $861 | $857;
+          $863 = $858 << $861;
+          $864 = (($863) + 245760)|0;
+          $865 = $864 >>> 16;
+          $866 = $865 & 2;
+          $867 = $862 | $866;
+          $868 = (14 - ($867))|0;
+          $869 = $863 << $866;
+          $870 = $869 >>> 15;
+          $871 = (($868) + ($870))|0;
+          $872 = $871 << 1;
+          $873 = (($871) + 7)|0;
+          $874 = $qsize$0$i$i >>> $873;
+          $875 = $874 & 1;
+          $876 = $875 | $872;
+          $I7$0$i$i = $876;
+         }
+        } while(0);
+        $877 = (476 + ($I7$0$i$i<<2)|0);
+        $878 = ((($722)) + 28|0);
+        HEAP32[$878>>2] = $I7$0$i$i;
+        $879 = ((($722)) + 16|0);
+        $880 = ((($879)) + 4|0);
+        HEAP32[$880>>2] = 0;
+        HEAP32[$879>>2] = 0;
+        $881 = HEAP32[(176)>>2]|0;
+        $882 = 1 << $I7$0$i$i;
+        $883 = $881 & $882;
+        $884 = ($883|0)==(0);
+        if ($884) {
+         $885 = $881 | $882;
+         HEAP32[(176)>>2] = $885;
+         HEAP32[$877>>2] = $722;
+         $886 = ((($722)) + 24|0);
+         HEAP32[$886>>2] = $877;
+         $887 = ((($722)) + 12|0);
+         HEAP32[$887>>2] = $722;
+         $888 = ((($722)) + 8|0);
+         HEAP32[$888>>2] = $722;
+         break;
+        }
+        $889 = HEAP32[$877>>2]|0;
+        $890 = ($I7$0$i$i|0)==(31);
+        $891 = $I7$0$i$i >>> 1;
+        $892 = (25 - ($891))|0;
+        $893 = $890 ? 0 : $892;
+        $894 = $qsize$0$i$i << $893;
+        $K8$0$i$i = $894;$T$0$i18$i = $889;
+        while(1) {
+         $895 = ((($T$0$i18$i)) + 4|0);
+         $896 = HEAP32[$895>>2]|0;
+         $897 = $896 & -8;
+         $898 = ($897|0)==($qsize$0$i$i|0);
+         if ($898) {
+          $T$0$i18$i$lcssa = $T$0$i18$i;
+          label = 279;
+          break;
+         }
+         $899 = $K8$0$i$i >>> 31;
+         $900 = (((($T$0$i18$i)) + 16|0) + ($899<<2)|0);
+         $901 = $K8$0$i$i << 1;
+         $902 = HEAP32[$900>>2]|0;
+         $903 = ($902|0)==(0|0);
+         if ($903) {
+          $$lcssa = $900;$T$0$i18$i$lcssa139 = $T$0$i18$i;
+          label = 276;
+          break;
+         } else {
+          $K8$0$i$i = $901;$T$0$i18$i = $902;
+         }
+        }
+        if ((label|0) == 276) {
+         $904 = HEAP32[(188)>>2]|0;
+         $905 = ($$lcssa>>>0)<($904>>>0);
+         if ($905) {
+          _abort();
+          // unreachable;
+         } else {
+          HEAP32[$$lcssa>>2] = $722;
+          $906 = ((($722)) + 24|0);
+          HEAP32[$906>>2] = $T$0$i18$i$lcssa139;
+          $907 = ((($722)) + 12|0);
+          HEAP32[$907>>2] = $722;
+          $908 = ((($722)) + 8|0);
+          HEAP32[$908>>2] = $722;
+          break;
+         }
+        }
+        else if ((label|0) == 279) {
+         $909 = ((($T$0$i18$i$lcssa)) + 8|0);
+         $910 = HEAP32[$909>>2]|0;
+         $911 = HEAP32[(188)>>2]|0;
+         $912 = ($910>>>0)>=($911>>>0);
+         $not$$i20$i = ($T$0$i18$i$lcssa>>>0)>=($911>>>0);
+         $913 = $912 & $not$$i20$i;
+         if ($913) {
+          $914 = ((($910)) + 12|0);
+          HEAP32[$914>>2] = $722;
+          HEAP32[$909>>2] = $722;
+          $915 = ((($722)) + 8|0);
+          HEAP32[$915>>2] = $910;
+          $916 = ((($722)) + 12|0);
+          HEAP32[$916>>2] = $T$0$i18$i$lcssa;
+          $917 = ((($722)) + 24|0);
+          HEAP32[$917>>2] = 0;
+          break;
+         } else {
+          _abort();
+          // unreachable;
+         }
+        }
+       }
+      } while(0);
+      $1048 = ((($710)) + 8|0);
+      $$0 = $1048;
+      STACKTOP = sp;return ($$0|0);
+     } else {
+      $sp$0$i$i$i = (620);
+     }
+    }
+    while(1) {
+     $918 = HEAP32[$sp$0$i$i$i>>2]|0;
+     $919 = ($918>>>0)>($631>>>0);
+     if (!($919)) {
+      $920 = ((($sp$0$i$i$i)) + 4|0);
+      $921 = HEAP32[$920>>2]|0;
+      $922 = (($918) + ($921)|0);
+      $923 = ($922>>>0)>($631>>>0);
+      if ($923) {
+       $$lcssa142 = $922;
+       break;
+      }
+     }
+     $924 = ((($sp$0$i$i$i)) + 8|0);
+     $925 = HEAP32[$924>>2]|0;
+     $sp$0$i$i$i = $925;
+    }
+    $926 = ((($$lcssa142)) + -47|0);
+    $927 = ((($926)) + 8|0);
+    $928 = $927;
+    $929 = $928 & 7;
+    $930 = ($929|0)==(0);
+    $931 = (0 - ($928))|0;
+    $932 = $931 & 7;
+    $933 = $930 ? 0 : $932;
+    $934 = (($926) + ($933)|0);
+    $935 = ((($631)) + 16|0);
+    $936 = ($934>>>0)<($935>>>0);
+    $937 = $936 ? $631 : $934;
+    $938 = ((($937)) + 8|0);
+    $939 = ((($937)) + 24|0);
+    $940 = (($tsize$745$i) + -40)|0;
+    $941 = ((($tbase$746$i)) + 8|0);
+    $942 = $941;
+    $943 = $942 & 7;
+    $944 = ($943|0)==(0);
+    $945 = (0 - ($942))|0;
+    $946 = $945 & 7;
+    $947 = $944 ? 0 : $946;
+    $948 = (($tbase$746$i) + ($947)|0);
+    $949 = (($940) - ($947))|0;
+    HEAP32[(196)>>2] = $948;
+    HEAP32[(184)>>2] = $949;
+    $950 = $949 | 1;
+    $951 = ((($948)) + 4|0);
+    HEAP32[$951>>2] = $950;
+    $952 = (($948) + ($949)|0);
+    $953 = ((($952)) + 4|0);
+    HEAP32[$953>>2] = 40;
+    $954 = HEAP32[(660)>>2]|0;
+    HEAP32[(200)>>2] = $954;
+    $955 = ((($937)) + 4|0);
+    HEAP32[$955>>2] = 27;
+    ;HEAP32[$938>>2]=HEAP32[(620)>>2]|0;HEAP32[$938+4>>2]=HEAP32[(620)+4>>2]|0;HEAP32[$938+8>>2]=HEAP32[(620)+8>>2]|0;HEAP32[$938+12>>2]=HEAP32[(620)+12>>2]|0;
+    HEAP32[(620)>>2] = $tbase$746$i;
+    HEAP32[(624)>>2] = $tsize$745$i;
+    HEAP32[(632)>>2] = 0;
+    HEAP32[(628)>>2] = $938;
+    $p$0$i$i = $939;
+    while(1) {
+     $956 = ((($p$0$i$i)) + 4|0);
+     HEAP32[$956>>2] = 7;
+     $957 = ((($956)) + 4|0);
+     $958 = ($957>>>0)<($$lcssa142>>>0);
+     if ($958) {
+      $p$0$i$i = $956;
+     } else {
+      break;
+     }
+    }
+    $959 = ($937|0)==($631|0);
+    if (!($959)) {
+     $960 = $937;
+     $961 = $631;
+     $962 = (($960) - ($961))|0;
+     $963 = HEAP32[$955>>2]|0;
+     $964 = $963 & -2;
+     HEAP32[$955>>2] = $964;
+     $965 = $962 | 1;
+     $966 = ((($631)) + 4|0);
+     HEAP32[$966>>2] = $965;
+     HEAP32[$937>>2] = $962;
+     $967 = $962 >>> 3;
+     $968 = ($962>>>0)<(256);
+     if ($968) {
+      $969 = $967 << 1;
+      $970 = (212 + ($969<<2)|0);
+      $971 = HEAP32[43]|0;
+      $972 = 1 << $967;
+      $973 = $971 & $972;
+      $974 = ($973|0)==(0);
+      if ($974) {
+       $975 = $971 | $972;
+       HEAP32[43] = $975;
+       $$pre$i$i = ((($970)) + 8|0);
+       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $970;
+      } else {
+       $976 = ((($970)) + 8|0);
+       $977 = HEAP32[$976>>2]|0;
+       $978 = HEAP32[(188)>>2]|0;
+       $979 = ($977>>>0)<($978>>>0);
+       if ($979) {
+        _abort();
+        // unreachable;
+       } else {
+        $$pre$phi$i$iZ2D = $976;$F$0$i$i = $977;
+       }
+      }
+      HEAP32[$$pre$phi$i$iZ2D>>2] = $631;
+      $980 = ((($F$0$i$i)) + 12|0);
+      HEAP32[$980>>2] = $631;
+      $981 = ((($631)) + 8|0);
+      HEAP32[$981>>2] = $F$0$i$i;
+      $982 = ((($631)) + 12|0);
+      HEAP32[$982>>2] = $970;
+      break;
+     }
+     $983 = $962 >>> 8;
+     $984 = ($983|0)==(0);
+     if ($984) {
+      $I1$0$i$i = 0;
+     } else {
+      $985 = ($962>>>0)>(16777215);
+      if ($985) {
+       $I1$0$i$i = 31;
+      } else {
+       $986 = (($983) + 1048320)|0;
+       $987 = $986 >>> 16;
+       $988 = $987 & 8;
+       $989 = $983 << $988;
+       $990 = (($989) + 520192)|0;
+       $991 = $990 >>> 16;
+       $992 = $991 & 4;
+       $993 = $992 | $988;
+       $994 = $989 << $992;
+       $995 = (($994) + 245760)|0;
+       $996 = $995 >>> 16;
+       $997 = $996 & 2;
+       $998 = $993 | $997;
+       $999 = (14 - ($998))|0;
+       $1000 = $994 << $997;
+       $1001 = $1000 >>> 15;
+       $1002 = (($999) + ($1001))|0;
+       $1003 = $1002 << 1;
+       $1004 = (($1002) + 7)|0;
+       $1005 = $962 >>> $1004;
+       $1006 = $1005 & 1;
+       $1007 = $1006 | $1003;
+       $I1$0$i$i = $1007;
+      }
+     }
+     $1008 = (476 + ($I1$0$i$i<<2)|0);
+     $1009 = ((($631)) + 28|0);
+     HEAP32[$1009>>2] = $I1$0$i$i;
+     $1010 = ((($631)) + 20|0);
+     HEAP32[$1010>>2] = 0;
+     HEAP32[$935>>2] = 0;
+     $1011 = HEAP32[(176)>>2]|0;
+     $1012 = 1 << $I1$0$i$i;
+     $1013 = $1011 & $1012;
+     $1014 = ($1013|0)==(0);
+     if ($1014) {
+      $1015 = $1011 | $1012;
+      HEAP32[(176)>>2] = $1015;
+      HEAP32[$1008>>2] = $631;
+      $1016 = ((($631)) + 24|0);
+      HEAP32[$1016>>2] = $1008;
+      $1017 = ((($631)) + 12|0);
+      HEAP32[$1017>>2] = $631;
+      $1018 = ((($631)) + 8|0);
+      HEAP32[$1018>>2] = $631;
+      break;
+     }
+     $1019 = HEAP32[$1008>>2]|0;
+     $1020 = ($I1$0$i$i|0)==(31);
+     $1021 = $I1$0$i$i >>> 1;
+     $1022 = (25 - ($1021))|0;
+     $1023 = $1020 ? 0 : $1022;
+     $1024 = $962 << $1023;
+     $K2$0$i$i = $1024;$T$0$i$i = $1019;
+     while(1) {
+      $1025 = ((($T$0$i$i)) + 4|0);
+      $1026 = HEAP32[$1025>>2]|0;
+      $1027 = $1026 & -8;
+      $1028 = ($1027|0)==($962|0);
+      if ($1028) {
+       $T$0$i$i$lcssa = $T$0$i$i;
+       label = 305;
+       break;
+      }
+      $1029 = $K2$0$i$i >>> 31;
+      $1030 = (((($T$0$i$i)) + 16|0) + ($1029<<2)|0);
+      $1031 = $K2$0$i$i << 1;
+      $1032 = HEAP32[$1030>>2]|0;
+      $1033 = ($1032|0)==(0|0);
+      if ($1033) {
+       $$lcssa141 = $1030;$T$0$i$i$lcssa140 = $T$0$i$i;
+       label = 302;
+       break;
+      } else {
+       $K2$0$i$i = $1031;$T$0$i$i = $1032;
+      }
+     }
+     if ((label|0) == 302) {
+      $1034 = HEAP32[(188)>>2]|0;
+      $1035 = ($$lcssa141>>>0)<($1034>>>0);
+      if ($1035) {
+       _abort();
+       // unreachable;
+      } else {
+       HEAP32[$$lcssa141>>2] = $631;
+       $1036 = ((($631)) + 24|0);
+       HEAP32[$1036>>2] = $T$0$i$i$lcssa140;
+       $1037 = ((($631)) + 12|0);
+       HEAP32[$1037>>2] = $631;
+       $1038 = ((($631)) + 8|0);
+       HEAP32[$1038>>2] = $631;
+       break;
+      }
+     }
+     else if ((label|0) == 305) {
+      $1039 = ((($T$0$i$i$lcssa)) + 8|0);
+      $1040 = HEAP32[$1039>>2]|0;
+      $1041 = HEAP32[(188)>>2]|0;
+      $1042 = ($1040>>>0)>=($1041>>>0);
+      $not$$i$i = ($T$0$i$i$lcssa>>>0)>=($1041>>>0);
+      $1043 = $1042 & $not$$i$i;
+      if ($1043) {
+       $1044 = ((($1040)) + 12|0);
+       HEAP32[$1044>>2] = $631;
+       HEAP32[$1039>>2] = $631;
+       $1045 = ((($631)) + 8|0);
+       HEAP32[$1045>>2] = $1040;
+       $1046 = ((($631)) + 12|0);
+       HEAP32[$1046>>2] = $T$0$i$i$lcssa;
+       $1047 = ((($631)) + 24|0);
+       HEAP32[$1047>>2] = 0;
+       break;
+      } else {
+       _abort();
+       // unreachable;
+      }
+     }
+    }
+   }
+  } while(0);
+  $1049 = HEAP32[(184)>>2]|0;
+  $1050 = ($1049>>>0)>($nb$0>>>0);
+  if ($1050) {
+   $1051 = (($1049) - ($nb$0))|0;
+   HEAP32[(184)>>2] = $1051;
+   $1052 = HEAP32[(196)>>2]|0;
+   $1053 = (($1052) + ($nb$0)|0);
+   HEAP32[(196)>>2] = $1053;
+   $1054 = $1051 | 1;
+   $1055 = ((($1053)) + 4|0);
+   HEAP32[$1055>>2] = $1054;
+   $1056 = $nb$0 | 3;
+   $1057 = ((($1052)) + 4|0);
+   HEAP32[$1057>>2] = $1056;
+   $1058 = ((($1052)) + 8|0);
+   $$0 = $1058;
+   STACKTOP = sp;return ($$0|0);
+  }
+ }
+ $1059 = (___errno_location()|0);
+ HEAP32[$1059>>2] = 12;
+ $$0 = 0;
+ STACKTOP = sp;return ($$0|0);
+}
+function _free($mem) {
+ $mem = $mem|0;
+ var $$lcssa = 0, $$pre = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
+ var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
+ var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
+ var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
+ var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
+ var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
+ var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
+ var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
+ var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
+ var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
+ var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
+ var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
+ var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
+ var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
+ var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
+ var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
+ var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0;
+ var $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa48 = 0, $cond20 = 0, $cond21 = 0, $not$ = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ $0 = ($mem|0)==(0|0);
+ if ($0) {
+  return;
+ }
+ $1 = ((($mem)) + -8|0);
+ $2 = HEAP32[(188)>>2]|0;
+ $3 = ($1>>>0)<($2>>>0);
+ if ($3) {
+  _abort();
+  // unreachable;
+ }
+ $4 = ((($mem)) + -4|0);
+ $5 = HEAP32[$4>>2]|0;
+ $6 = $5 & 3;
+ $7 = ($6|0)==(1);
+ if ($7) {
+  _abort();
+  // unreachable;
+ }
+ $8 = $5 & -8;
+ $9 = (($1) + ($8)|0);
+ $10 = $5 & 1;
+ $11 = ($10|0)==(0);
+ do {
+  if ($11) {
+   $12 = HEAP32[$1>>2]|0;
+   $13 = ($6|0)==(0);
+   if ($13) {
+    return;
+   }
+   $14 = (0 - ($12))|0;
+   $15 = (($1) + ($14)|0);
+   $16 = (($12) + ($8))|0;
+   $17 = ($15>>>0)<($2>>>0);
+   if ($17) {
+    _abort();
+    // unreachable;
+   }
+   $18 = HEAP32[(192)>>2]|0;
+   $19 = ($15|0)==($18|0);
+   if ($19) {
+    $104 = ((($9)) + 4|0);
+    $105 = HEAP32[$104>>2]|0;
+    $106 = $105 & 3;
+    $107 = ($106|0)==(3);
+    if (!($107)) {
+     $p$1 = $15;$psize$1 = $16;
+     break;
+    }
+    HEAP32[(180)>>2] = $16;
+    $108 = $105 & -2;
+    HEAP32[$104>>2] = $108;
+    $109 = $16 | 1;
+    $110 = ((($15)) + 4|0);
+    HEAP32[$110>>2] = $109;
+    $111 = (($15) + ($16)|0);
+    HEAP32[$111>>2] = $16;
+    return;
+   }
+   $20 = $12 >>> 3;
+   $21 = ($12>>>0)<(256);
+   if ($21) {
+    $22 = ((($15)) + 8|0);
+    $23 = HEAP32[$22>>2]|0;
+    $24 = ((($15)) + 12|0);
+    $25 = HEAP32[$24>>2]|0;
+    $26 = $20 << 1;
+    $27 = (212 + ($26<<2)|0);
+    $28 = ($23|0)==($27|0);
+    if (!($28)) {
+     $29 = ($23>>>0)<($2>>>0);
+     if ($29) {
+      _abort();
+      // unreachable;
+     }
+     $30 = ((($23)) + 12|0);
+     $31 = HEAP32[$30>>2]|0;
+     $32 = ($31|0)==($15|0);
+     if (!($32)) {
+      _abort();
+      // unreachable;
+     }
+    }
+    $33 = ($25|0)==($23|0);
+    if ($33) {
+     $34 = 1 << $20;
+     $35 = $34 ^ -1;
+     $36 = HEAP32[43]|0;
+     $37 = $36 & $35;
+     HEAP32[43] = $37;
+     $p$1 = $15;$psize$1 = $16;
+     break;
+    }
+    $38 = ($25|0)==($27|0);
+    if ($38) {
+     $$pre42 = ((($25)) + 8|0);
+     $$pre$phi43Z2D = $$pre42;
+    } else {
+     $39 = ($25>>>0)<($2>>>0);
+     if ($39) {
+      _abort();
+      // unreachable;
+     }
+     $40 = ((($25)) + 8|0);
+     $41 = HEAP32[$40>>2]|0;
+     $42 = ($41|0)==($15|0);
+     if ($42) {
+      $$pre$phi43Z2D = $40;
+     } else {
+      _abort();
+      // unreachable;
+     }
+    }
+    $43 = ((($23)) + 12|0);
+    HEAP32[$43>>2] = $25;
+    HEAP32[$$pre$phi43Z2D>>2] = $23;
+    $p$1 = $15;$psize$1 = $16;
+    break;
+   }
+   $44 = ((($15)) + 24|0);
+   $45 = HEAP32[$44>>2]|0;
+   $46 = ((($15)) + 12|0);
+   $47 = HEAP32[$46>>2]|0;
+   $48 = ($47|0)==($15|0);
+   do {
+    if ($48) {
+     $58 = ((($15)) + 16|0);
+     $59 = ((($58)) + 4|0);
+     $60 = HEAP32[$59>>2]|0;
+     $61 = ($60|0)==(0|0);
+     if ($61) {
+      $62 = HEAP32[$58>>2]|0;
+      $63 = ($62|0)==(0|0);
+      if ($63) {
+       $R$3 = 0;
+       break;
+      } else {
+       $R$1 = $62;$RP$1 = $58;
+      }
+     } else {
+      $R$1 = $60;$RP$1 = $59;
+     }
+     while(1) {
+      $64 = ((($R$1)) + 20|0);
+      $65 = HEAP32[$64>>2]|0;
+      $66 = ($65|0)==(0|0);
+      if (!($66)) {
+       $R$1 = $65;$RP$1 = $64;
+       continue;
+      }
+      $67 = ((($R$1)) + 16|0);
+      $68 = HEAP32[$67>>2]|0;
+      $69 = ($68|0)==(0|0);
+      if ($69) {
+       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
+       break;
+      } else {
+       $R$1 = $68;$RP$1 = $67;
+      }
+     }
+     $70 = ($RP$1$lcssa>>>0)<($2>>>0);
+     if ($70) {
+      _abort();
+      // unreachable;
+     } else {
+      HEAP32[$RP$1$lcssa>>2] = 0;
+      $R$3 = $R$1$lcssa;
+      break;
+     }
+    } else {
+     $49 = ((($15)) + 8|0);
+     $50 = HEAP32[$49>>2]|0;
+     $51 = ($50>>>0)<($2>>>0);
+     if ($51) {
+      _abort();
+      // unreachable;
+     }
+     $52 = ((($50)) + 12|0);
+     $53 = HEAP32[$52>>2]|0;
+     $54 = ($53|0)==($15|0);
+     if (!($54)) {
+      _abort();
+      // unreachable;
+     }
+     $55 = ((($47)) + 8|0);
+     $56 = HEAP32[$55>>2]|0;
+     $57 = ($56|0)==($15|0);
+     if ($57) {
+      HEAP32[$52>>2] = $47;
+      HEAP32[$55>>2] = $50;
+      $R$3 = $47;
+      break;
+     } else {
+      _abort();
+      // unreachable;
+     }
+    }
+   } while(0);
+   $71 = ($45|0)==(0|0);
+   if ($71) {
+    $p$1 = $15;$psize$1 = $16;
+   } else {
+    $72 = ((($15)) + 28|0);
+    $73 = HEAP32[$72>>2]|0;
+    $74 = (476 + ($73<<2)|0);
+    $75 = HEAP32[$74>>2]|0;
+    $76 = ($15|0)==($75|0);
+    if ($76) {
+     HEAP32[$74>>2] = $R$3;
+     $cond20 = ($R$3|0)==(0|0);
+     if ($cond20) {
+      $77 = 1 << $73;
+      $78 = $77 ^ -1;
+      $79 = HEAP32[(176)>>2]|0;
+      $80 = $79 & $78;
+      HEAP32[(176)>>2] = $80;
+      $p$1 = $15;$psize$1 = $16;
+      break;
+     }
+    } else {
+     $81 = HEAP32[(188)>>2]|0;
+     $82 = ($45>>>0)<($81>>>0);
+     if ($82) {
+      _abort();
+      // unreachable;
+     }
+     $83 = ((($45)) + 16|0);
+     $84 = HEAP32[$83>>2]|0;
+     $85 = ($84|0)==($15|0);
+     if ($85) {
+      HEAP32[$83>>2] = $R$3;
+     } else {
+      $86 = ((($45)) + 20|0);
+      HEAP32[$86>>2] = $R$3;
+     }
+     $87 = ($R$3|0)==(0|0);
+     if ($87) {
+      $p$1 = $15;$psize$1 = $16;
+      break;
+     }
+    }
+    $88 = HEAP32[(188)>>2]|0;
+    $89 = ($R$3>>>0)<($88>>>0);
+    if ($89) {
+     _abort();
+     // unreachable;
+    }
+    $90 = ((($R$3)) + 24|0);
+    HEAP32[$90>>2] = $45;
+    $91 = ((($15)) + 16|0);
+    $92 = HEAP32[$91>>2]|0;
+    $93 = ($92|0)==(0|0);
+    do {
+     if (!($93)) {
+      $94 = ($92>>>0)<($88>>>0);
+      if ($94) {
+       _abort();
+       // unreachable;
+      } else {
+       $95 = ((($R$3)) + 16|0);
+       HEAP32[$95>>2] = $92;
+       $96 = ((($92)) + 24|0);
+       HEAP32[$96>>2] = $R$3;
+       break;
+      }
+     }
+    } while(0);
+    $97 = ((($91)) + 4|0);
+    $98 = HEAP32[$97>>2]|0;
+    $99 = ($98|0)==(0|0);
+    if ($99) {
+     $p$1 = $15;$psize$1 = $16;
+    } else {
+     $100 = HEAP32[(188)>>2]|0;
+     $101 = ($98>>>0)<($100>>>0);
+     if ($101) {
+      _abort();
+      // unreachable;
+     } else {
+      $102 = ((($R$3)) + 20|0);
+      HEAP32[$102>>2] = $98;
+      $103 = ((($98)) + 24|0);
+      HEAP32[$103>>2] = $R$3;
+      $p$1 = $15;$psize$1 = $16;
+      break;
+     }
+    }
+   }
+  } else {
+   $p$1 = $1;$psize$1 = $8;
+  }
+ } while(0);
+ $112 = ($p$1>>>0)<($9>>>0);
+ if (!($112)) {
+  _abort();
+  // unreachable;
+ }
+ $113 = ((($9)) + 4|0);
+ $114 = HEAP32[$113>>2]|0;
+ $115 = $114 & 1;
+ $116 = ($115|0)==(0);
+ if ($116) {
+  _abort();
+  // unreachable;
+ }
+ $117 = $114 & 2;
+ $118 = ($117|0)==(0);
+ if ($118) {
+  $119 = HEAP32[(196)>>2]|0;
+  $120 = ($9|0)==($119|0);
+  if ($120) {
+   $121 = HEAP32[(184)>>2]|0;
+   $122 = (($121) + ($psize$1))|0;
+   HEAP32[(184)>>2] = $122;
+   HEAP32[(196)>>2] = $p$1;
+   $123 = $122 | 1;
+   $124 = ((($p$1)) + 4|0);
+   HEAP32[$124>>2] = $123;
+   $125 = HEAP32[(192)>>2]|0;
+   $126 = ($p$1|0)==($125|0);
+   if (!($126)) {
+    return;
+   }
+   HEAP32[(192)>>2] = 0;
+   HEAP32[(180)>>2] = 0;
+   return;
+  }
+  $127 = HEAP32[(192)>>2]|0;
+  $128 = ($9|0)==($127|0);
+  if ($128) {
+   $129 = HEAP32[(180)>>2]|0;
+   $130 = (($129) + ($psize$1))|0;
+   HEAP32[(180)>>2] = $130;
+   HEAP32[(192)>>2] = $p$1;
+   $131 = $130 | 1;
+   $132 = ((($p$1)) + 4|0);
+   HEAP32[$132>>2] = $131;
+   $133 = (($p$1) + ($130)|0);
+   HEAP32[$133>>2] = $130;
+   return;
+  }
+  $134 = $114 & -8;
+  $135 = (($134) + ($psize$1))|0;
+  $136 = $114 >>> 3;
+  $137 = ($114>>>0)<(256);
+  do {
+   if ($137) {
+    $138 = ((($9)) + 8|0);
+    $139 = HEAP32[$138>>2]|0;
+    $140 = ((($9)) + 12|0);
+    $141 = HEAP32[$140>>2]|0;
+    $142 = $136 << 1;
+    $143 = (212 + ($142<<2)|0);
+    $144 = ($139|0)==($143|0);
+    if (!($144)) {
+     $145 = HEAP32[(188)>>2]|0;
+     $146 = ($139>>>0)<($145>>>0);
+     if ($146) {
+      _abort();
+      // unreachable;
+     }
+     $147 = ((($139)) + 12|0);
+     $148 = HEAP32[$147>>2]|0;
+     $149 = ($148|0)==($9|0);
+     if (!($149)) {
+      _abort();
+      // unreachable;
+     }
+    }
+    $150 = ($141|0)==($139|0);
+    if ($150) {
+     $151 = 1 << $136;
+     $152 = $151 ^ -1;
+     $153 = HEAP32[43]|0;
+     $154 = $153 & $152;
+     HEAP32[43] = $154;
+     break;
+    }
+    $155 = ($141|0)==($143|0);
+    if ($155) {
+     $$pre40 = ((($141)) + 8|0);
+     $$pre$phi41Z2D = $$pre40;
+    } else {
+     $156 = HEAP32[(188)>>2]|0;
+     $157 = ($141>>>0)<($156>>>0);
+     if ($157) {
+      _abort();
+      // unreachable;
+     }
+     $158 = ((($141)) + 8|0);
+     $159 = HEAP32[$158>>2]|0;
+     $160 = ($159|0)==($9|0);
+     if ($160) {
+      $$pre$phi41Z2D = $158;
+     } else {
+      _abort();
+      // unreachable;
+     }
+    }
+    $161 = ((($139)) + 12|0);
+    HEAP32[$161>>2] = $141;
+    HEAP32[$$pre$phi41Z2D>>2] = $139;
+   } else {
+    $162 = ((($9)) + 24|0);
+    $163 = HEAP32[$162>>2]|0;
+    $164 = ((($9)) + 12|0);
+    $165 = HEAP32[$164>>2]|0;
+    $166 = ($165|0)==($9|0);
+    do {
+     if ($166) {
+      $177 = ((($9)) + 16|0);
+      $178 = ((($177)) + 4|0);
+      $179 = HEAP32[$178>>2]|0;
+      $180 = ($179|0)==(0|0);
+      if ($180) {
+       $181 = HEAP32[$177>>2]|0;
+       $182 = ($181|0)==(0|0);
+       if ($182) {
+        $R8$3 = 0;
+        break;
+       } else {
+        $R8$1 = $181;$RP10$1 = $177;
+       }
+      } else {
+       $R8$1 = $179;$RP10$1 = $178;
+      }
+      while(1) {
+       $183 = ((($R8$1)) + 20|0);
+       $184 = HEAP32[$183>>2]|0;
+       $185 = ($184|0)==(0|0);
+       if (!($185)) {
+        $R8$1 = $184;$RP10$1 = $183;
+        continue;
+       }
+       $186 = ((($R8$1)) + 16|0);
+       $187 = HEAP32[$186>>2]|0;
+       $188 = ($187|0)==(0|0);
+       if ($188) {
+        $R8$1$lcssa = $R8$1;$RP10$1$lcssa = $RP10$1;
+        break;
+       } else {
+        $R8$1 = $187;$RP10$1 = $186;
+       }
+      }
+      $189 = HEAP32[(188)>>2]|0;
+      $190 = ($RP10$1$lcssa>>>0)<($189>>>0);
+      if ($190) {
+       _abort();
+       // unreachable;
+      } else {
+       HEAP32[$RP10$1$lcssa>>2] = 0;
+       $R8$3 = $R8$1$lcssa;
+       break;
+      }
+     } else {
+      $167 = ((($9)) + 8|0);
+      $168 = HEAP32[$167>>2]|0;
+      $169 = HEAP32[(188)>>2]|0;
+      $170 = ($168>>>0)<($169>>>0);
+      if ($170) {
+       _abort();
+       // unreachable;
+      }
+      $171 = ((($168)) + 12|0);
+      $172 = HEAP32[$171>>2]|0;
+      $173 = ($172|0)==($9|0);
+      if (!($173)) {
+       _abort();
+       // unreachable;
+      }
+      $174 = ((($165)) + 8|0);
+      $175 = HEAP32[$174>>2]|0;
+      $176 = ($175|0)==($9|0);
+      if ($176) {
+       HEAP32[$171>>2] = $165;
+       HEAP32[$174>>2] = $168;
+       $R8$3 = $165;
+       break;
+      } else {
+       _abort();
+       // unreachable;
+      }
+     }
+    } while(0);
+    $191 = ($163|0)==(0|0);
+    if (!($191)) {
+     $192 = ((($9)) + 28|0);
+     $193 = HEAP32[$192>>2]|0;
+     $194 = (476 + ($193<<2)|0);
+     $195 = HEAP32[$194>>2]|0;
+     $196 = ($9|0)==($195|0);
+     if ($196) {
+      HEAP32[$194>>2] = $R8$3;
+      $cond21 = ($R8$3|0)==(0|0);
+      if ($cond21) {
+       $197 = 1 << $193;
+       $198 = $197 ^ -1;
+       $199 = HEAP32[(176)>>2]|0;
+       $200 = $199 & $198;
+       HEAP32[(176)>>2] = $200;
+       break;
+      }
+     } else {
+      $201 = HEAP32[(188)>>2]|0;
+      $202 = ($163>>>0)<($201>>>0);
+      if ($202) {
+       _abort();
+       // unreachable;
+      }
+      $203 = ((($163)) + 16|0);
+      $204 = HEAP32[$203>>2]|0;
+      $205 = ($204|0)==($9|0);
+      if ($205) {
+       HEAP32[$203>>2] = $R8$3;
+      } else {
+       $206 = ((($163)) + 20|0);
+       HEAP32[$206>>2] = $R8$3;
+      }
+      $207 = ($R8$3|0)==(0|0);
+      if ($207) {
+       break;
+      }
+     }
+     $208 = HEAP32[(188)>>2]|0;
+     $209 = ($R8$3>>>0)<($208>>>0);
+     if ($209) {
+      _abort();
+      // unreachable;
+     }
+     $210 = ((($R8$3)) + 24|0);
+     HEAP32[$210>>2] = $163;
+     $211 = ((($9)) + 16|0);
+     $212 = HEAP32[$211>>2]|0;
+     $213 = ($212|0)==(0|0);
+     do {
+      if (!($213)) {
+       $214 = ($212>>>0)<($208>>>0);
+       if ($214) {
+        _abort();
+        // unreachable;
+       } else {
+        $215 = ((($R8$3)) + 16|0);
+        HEAP32[$215>>2] = $212;
+        $216 = ((($212)) + 24|0);
+        HEAP32[$216>>2] = $R8$3;
+        break;
+       }
+      }
+     } while(0);
+     $217 = ((($211)) + 4|0);
+     $218 = HEAP32[$217>>2]|0;
+     $219 = ($218|0)==(0|0);
+     if (!($219)) {
+      $220 = HEAP32[(188)>>2]|0;
+      $221 = ($218>>>0)<($220>>>0);
+      if ($221) {
+       _abort();
+       // unreachable;
+      } else {
+       $222 = ((($R8$3)) + 20|0);
+       HEAP32[$222>>2] = $218;
+       $223 = ((($218)) + 24|0);
+       HEAP32[$223>>2] = $R8$3;
+       break;
+      }
+     }
+    }
+   }
+  } while(0);
+  $224 = $135 | 1;
+  $225 = ((($p$1)) + 4|0);
+  HEAP32[$225>>2] = $224;
+  $226 = (($p$1) + ($135)|0);
+  HEAP32[$226>>2] = $135;
+  $227 = HEAP32[(192)>>2]|0;
+  $228 = ($p$1|0)==($227|0);
+  if ($228) {
+   HEAP32[(180)>>2] = $135;
+   return;
+  } else {
+   $psize$2 = $135;
+  }
+ } else {
+  $229 = $114 & -2;
+  HEAP32[$113>>2] = $229;
+  $230 = $psize$1 | 1;
+  $231 = ((($p$1)) + 4|0);
+  HEAP32[$231>>2] = $230;
+  $232 = (($p$1) + ($psize$1)|0);
+  HEAP32[$232>>2] = $psize$1;
+  $psize$2 = $psize$1;
+ }
+ $233 = $psize$2 >>> 3;
+ $234 = ($psize$2>>>0)<(256);
+ if ($234) {
+  $235 = $233 << 1;
+  $236 = (212 + ($235<<2)|0);
+  $237 = HEAP32[43]|0;
+  $238 = 1 << $233;
+  $239 = $237 & $238;
+  $240 = ($239|0)==(0);
+  if ($240) {
+   $241 = $237 | $238;
+   HEAP32[43] = $241;
+   $$pre = ((($236)) + 8|0);
+   $$pre$phiZ2D = $$pre;$F18$0 = $236;
+  } else {
+   $242 = ((($236)) + 8|0);
+   $243 = HEAP32[$242>>2]|0;
+   $244 = HEAP32[(188)>>2]|0;
+   $245 = ($243>>>0)<($244>>>0);
+   if ($245) {
+    _abort();
+    // unreachable;
+   } else {
+    $$pre$phiZ2D = $242;$F18$0 = $243;
+   }
+  }
+  HEAP32[$$pre$phiZ2D>>2] = $p$1;
+  $246 = ((($F18$0)) + 12|0);
+  HEAP32[$246>>2] = $p$1;
+  $247 = ((($p$1)) + 8|0);
+  HEAP32[$247>>2] = $F18$0;
+  $248 = ((($p$1)) + 12|0);
+  HEAP32[$248>>2] = $236;
+  return;
+ }
+ $249 = $psize$2 >>> 8;
+ $250 = ($249|0)==(0);
+ if ($250) {
+  $I20$0 = 0;
+ } else {
+  $251 = ($psize$2>>>0)>(16777215);
+  if ($251) {
+   $I20$0 = 31;
+  } else {
+   $252 = (($249) + 1048320)|0;
+   $253 = $252 >>> 16;
+   $254 = $253 & 8;
+   $255 = $249 << $254;
+   $256 = (($255) + 520192)|0;
+   $257 = $256 >>> 16;
+   $258 = $257 & 4;
+   $259 = $258 | $254;
+   $260 = $255 << $258;
+   $261 = (($260) + 245760)|0;
+   $262 = $261 >>> 16;
+   $263 = $262 & 2;
+   $264 = $259 | $263;
+   $265 = (14 - ($264))|0;
+   $266 = $260 << $263;
+   $267 = $266 >>> 15;
+   $268 = (($265) + ($267))|0;
+   $269 = $268 << 1;
+   $270 = (($268) + 7)|0;
+   $271 = $psize$2 >>> $270;
+   $272 = $271 & 1;
+   $273 = $272 | $269;
+   $I20$0 = $273;
+  }
+ }
+ $274 = (476 + ($I20$0<<2)|0);
+ $275 = ((($p$1)) + 28|0);
+ HEAP32[$275>>2] = $I20$0;
+ $276 = ((($p$1)) + 16|0);
+ $277 = ((($p$1)) + 20|0);
+ HEAP32[$277>>2] = 0;
+ HEAP32[$276>>2] = 0;
+ $278 = HEAP32[(176)>>2]|0;
+ $279 = 1 << $I20$0;
+ $280 = $278 & $279;
+ $281 = ($280|0)==(0);
+ do {
+  if ($281) {
+   $282 = $278 | $279;
+   HEAP32[(176)>>2] = $282;
+   HEAP32[$274>>2] = $p$1;
+   $283 = ((($p$1)) + 24|0);
+   HEAP32[$283>>2] = $274;
+   $284 = ((($p$1)) + 12|0);
+   HEAP32[$284>>2] = $p$1;
+   $285 = ((($p$1)) + 8|0);
+   HEAP32[$285>>2] = $p$1;
+  } else {
+   $286 = HEAP32[$274>>2]|0;
+   $287 = ($I20$0|0)==(31);
+   $288 = $I20$0 >>> 1;
+   $289 = (25 - ($288))|0;
+   $290 = $287 ? 0 : $289;
+   $291 = $psize$2 << $290;
+   $K21$0 = $291;$T$0 = $286;
+   while(1) {
+    $292 = ((($T$0)) + 4|0);
+    $293 = HEAP32[$292>>2]|0;
+    $294 = $293 & -8;
+    $295 = ($294|0)==($psize$2|0);
+    if ($295) {
+     $T$0$lcssa = $T$0;
+     label = 130;
+     break;
+    }
+    $296 = $K21$0 >>> 31;
+    $297 = (((($T$0)) + 16|0) + ($296<<2)|0);
+    $298 = $K21$0 << 1;
+    $299 = HEAP32[$297>>2]|0;
+    $300 = ($299|0)==(0|0);
+    if ($300) {
+     $$lcssa = $297;$T$0$lcssa48 = $T$0;
+     label = 127;
+     break;
+    } else {
+     $K21$0 = $298;$T$0 = $299;
+    }
+   }
+   if ((label|0) == 127) {
+    $301 = HEAP32[(188)>>2]|0;
+    $302 = ($$lcssa>>>0)<($301>>>0);
+    if ($302) {
+     _abort();
+     // unreachable;
+    } else {
+     HEAP32[$$lcssa>>2] = $p$1;
+     $303 = ((($p$1)) + 24|0);
+     HEAP32[$303>>2] = $T$0$lcssa48;
+     $304 = ((($p$1)) + 12|0);
+     HEAP32[$304>>2] = $p$1;
+     $305 = ((($p$1)) + 8|0);
+     HEAP32[$305>>2] = $p$1;
+     break;
+    }
+   }
+   else if ((label|0) == 130) {
+    $306 = ((($T$0$lcssa)) + 8|0);
+    $307 = HEAP32[$306>>2]|0;
+    $308 = HEAP32[(188)>>2]|0;
+    $309 = ($307>>>0)>=($308>>>0);
+    $not$ = ($T$0$lcssa>>>0)>=($308>>>0);
+    $310 = $309 & $not$;
+    if ($310) {
+     $311 = ((($307)) + 12|0);
+     HEAP32[$311>>2] = $p$1;
+     HEAP32[$306>>2] = $p$1;
+     $312 = ((($p$1)) + 8|0);
+     HEAP32[$312>>2] = $307;
+     $313 = ((($p$1)) + 12|0);
+     HEAP32[$313>>2] = $T$0$lcssa;
+     $314 = ((($p$1)) + 24|0);
+     HEAP32[$314>>2] = 0;
+     break;
+    } else {
+     _abort();
+     // unreachable;
+    }
+   }
+  }
+ } while(0);
+ $315 = HEAP32[(204)>>2]|0;
+ $316 = (($315) + -1)|0;
+ HEAP32[(204)>>2] = $316;
+ $317 = ($316|0)==(0);
+ if ($317) {
+  $sp$0$in$i = (628);
+ } else {
+  return;
+ }
+ while(1) {
+  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
+  $318 = ($sp$0$i|0)==(0|0);
+  $319 = ((($sp$0$i)) + 8|0);
+  if ($318) {
+   break;
+  } else {
+   $sp$0$in$i = $319;
+  }
+ }
+ HEAP32[(204)>>2] = -1;
+ return;
+}
+function runPostSets() {
+}
+function _memset(ptr, value, num) {
+    ptr = ptr|0; value = value|0; num = num|0;
+    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
+    stop = (ptr + num)|0;
+    if ((num|0) >= 20) {
+      // This is unaligned, but quite large, so work hard to get to aligned settings
+      value = value & 0xff;
+      unaligned = ptr & 3;
+      value4 = value | (value << 8) | (value << 16) | (value << 24);
+      stop4 = stop & ~3;
+      if (unaligned) {
+        unaligned = (ptr + 4 - unaligned)|0;
+        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
+          HEAP8[((ptr)>>0)]=value;
+          ptr = (ptr+1)|0;
+        }
+      }
+      while ((ptr|0) < (stop4|0)) {
+        HEAP32[((ptr)>>2)]=value4;
+        ptr = (ptr+4)|0;
+      }
+    }
+    while ((ptr|0) < (stop|0)) {
+      HEAP8[((ptr)>>0)]=value;
+      ptr = (ptr+1)|0;
+    }
+    return (ptr-num)|0;
+}
+function _memcpy(dest, src, num) {
+    dest = dest|0; src = src|0; num = num|0;
+    var ret = 0;
+    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
+    ret = dest|0;
+    if ((dest&3) == (src&3)) {
+      while (dest & 3) {
+        if ((num|0) == 0) return ret|0;
+        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
+        dest = (dest+1)|0;
+        src = (src+1)|0;
+        num = (num-1)|0;
+      }
+      while ((num|0) >= 4) {
+        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
+        dest = (dest+4)|0;
+        src = (src+4)|0;
+        num = (num-4)|0;
+      }
+    }
+    while ((num|0) > 0) {
+      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
+      dest = (dest+1)|0;
+      src = (src+1)|0;
+      num = (num-1)|0;
+    }
+    return ret|0;
+}
+function _pthread_self() {
+    return 0;
+}
+
+  
+function dynCall_ii(index,a1) {
+  index = index|0;
+  a1=a1|0;
+  return FUNCTION_TABLE_ii[index&1](a1|0)|0;
+}
+
+
+function dynCall_iiii(index,a1,a2,a3) {
+  index = index|0;
+  a1=a1|0; a2=a2|0; a3=a3|0;
+  return FUNCTION_TABLE_iiii[index&7](a1|0,a2|0,a3|0)|0;
+}
+
+
+function dynCall_vi(index,a1) {
+  index = index|0;
+  a1=a1|0;
+  FUNCTION_TABLE_vi[index&7](a1|0);
+}
+
+function b0(p0) {
+ p0 = p0|0; nullFunc_ii(0);return 0;
+}
+function b1(p0,p1,p2) {
+ p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
+}
+function b2(p0) {
+ p0 = p0|0; nullFunc_vi(2);
+}
+
+// EMSCRIPTEN_END_FUNCS
+var FUNCTION_TABLE_ii = [b0,___stdio_close];
+var FUNCTION_TABLE_iiii = [b1,b1,___stdout_write,___stdio_seek,b1,___stdio_write,b1,b1];
+var FUNCTION_TABLE_vi = [b2,b2,b2,b2,_cleanup,b2,b2,b2];
+
+  return { _free: _free, _main: _main, _pthread_self: _pthread_self, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _fflush: _fflush, ___errno_location: ___errno_location, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi };
+})
+// EMSCRIPTEN_END_ASM
+(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
+
+var real__free = asm["_free"]; asm["_free"] = function() {
+assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
+assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
+return real__free.apply(null, arguments);
+};
+
+var real__main = asm["_main"]; asm["_main"] = function() {
+assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
+assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
+return real__main.apply(null, arguments);
+};
+
+var real__pthread_self = asm["_pthread_self"]; asm["_pthread_self"] = function() {
+assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
+assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
+return real__pthread_self.apply(null, arguments);
+};
+
+var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
+assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
+assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
+return real__malloc.apply(null, arguments);
+};
+
+var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
+assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
+assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
+return real__fflush.apply(null, arguments);
+};
+
+var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
+assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
+assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
+return real____errno_location.apply(null, arguments);
+};
+var _free = Module["_free"] = asm["_free"];
+var _main = Module["_main"] = asm["_main"];
+var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
+var _memset = Module["_memset"] = asm["_memset"];
+var _malloc = Module["_malloc"] = asm["_malloc"];
+var _memcpy = Module["_memcpy"] = asm["_memcpy"];
+var _fflush = Module["_fflush"] = asm["_fflush"];
+var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
+var runPostSets = Module["runPostSets"] = asm["runPostSets"];
+var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
+var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
+var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
+;
+
+Runtime.stackAlloc = asm['stackAlloc'];
+Runtime.stackSave = asm['stackSave'];
+Runtime.stackRestore = asm['stackRestore'];
+Runtime.establishStackSpace = asm['establishStackSpace'];
+
+Runtime.setTempRet0 = asm['setTempRet0'];
+Runtime.getTempRet0 = asm['getTempRet0'];
+
+
+
+// === Auto-generated postamble setup entry stuff ===
+
+
+
+
+
+function ExitStatus(status) {
+  this.name = "ExitStatus";
+  this.message = "Program terminated with exit(" + status + ")";
+  this.status = status;
+};
+ExitStatus.prototype = new Error();
+ExitStatus.prototype.constructor = ExitStatus;
+
+var initialStackTop;
+var preloadStartTime = null;
+var calledMain = false;
+
+dependenciesFulfilled = function runCaller() {
+  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
+  if (!Module['calledRun']) run();
+  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
+}
+
+Module['callMain'] = Module.callMain = function callMain(args) {
+  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
+  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');
+
+  args = args || [];
+
+  ensureInitRuntime();
+
+  var argc = args.length+1;
+  function pad() {
+    for (var i = 0; i < 4-1; i++) {
+      argv.push(0);
+    }
+  }
+  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
+  pad();
+  for (var i = 0; i < argc-1; i = i + 1) {
+    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
+    pad();
+  }
+  argv.push(0);
+  argv = allocate(argv, 'i32', ALLOC_NORMAL);
+
+
+  try {
+
+    var ret = Module['_main'](argc, argv, 0);
+
+
+    // if we're not running an evented main loop, it's time to exit
+    exit(ret, /* implicit = */ true);
+  }
+  catch(e) {
+    if (e instanceof ExitStatus) {
+      // exit() throws this once it's done to make sure execution
+      // has been stopped completely
+      return;
+    } else if (e == 'SimulateInfiniteLoop') {
+      // running an evented main loop, don't immediately exit
+      Module['noExitRuntime'] = true;
+      return;
+    } else {
+      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
+      throw e;
+    }
+  } finally {
+    calledMain = true;
+  }
+}
+
+
+
+
+function run(args) {
+  args = args || Module['arguments'];
+
+  if (preloadStartTime === null) preloadStartTime = Date.now();
+
+  if (runDependencies > 0) {
+    Module.printErr('run() called, but dependencies remain, so not running');
+    return;
+  }
+
+  writeStackCookie();
+
+  preRun();
+
+  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
+  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame
+
+  function doRun() {
+    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
+    Module['calledRun'] = true;
+
+    if (ABORT) return;
+
+    ensureInitRuntime();
+
+    preMain();
+
+    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
+      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
+    }
+
+    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();
+
+    if (Module['_main'] && shouldRunNow) Module['callMain'](args);
+
+    postRun();
+  }
+
+  if (Module['setStatus']) {
+    Module['setStatus']('Running...');
+    setTimeout(function() {
+      setTimeout(function() {
+        Module['setStatus']('');
+      }, 1);
+      doRun();
+    }, 1);
+  } else {
+    doRun();
+  }
+  checkStackCookie();
+}
+Module['run'] = Module.run = run;
+
+function exit(status, implicit) {
+  if (implicit && Module['noExitRuntime']) {
+    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
+    return;
+  }
+
+  if (Module['noExitRuntime']) {
+    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
+  } else {
+
+    ABORT = true;
+    EXITSTATUS = status;
+    STACKTOP = initialStackTop;
+
+    exitRuntime();
+
+    if (Module['onExit']) Module['onExit'](status);
+  }
+
+  if (ENVIRONMENT_IS_NODE) {
+    process['exit'](status);
+  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
+    quit(status);
+  }
+  // if we reach here, we must throw an exception to halt the current execution
+  throw new ExitStatus(status);
+}
+Module['exit'] = Module.exit = exit;
+
+var abortDecorators = [];
+
+function abort(what) {
+  if (what !== undefined) {
+    Module.print(what);
+    Module.printErr(what);
+    what = JSON.stringify(what)
+  } else {
+    what = '';
+  }
+
+  ABORT = true;
+  EXITSTATUS = 1;
+
+  var extra = '';
+
+  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
+  if (abortDecorators) {
+    abortDecorators.forEach(function(decorator) {
+      output = decorator(output, what);
+    });
+  }
+  throw output;
+}
+Module['abort'] = Module.abort = abort;
+
+// {{PRE_RUN_ADDITIONS}}
+
+if (Module['preInit']) {
+  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
+  while (Module['preInit'].length > 0) {
+    Module['preInit'].pop()();
+  }
+}
+
+// shouldRunNow refers to calling main(), not run().
+var shouldRunNow = true;
+if (Module['noInitialRun']) {
+  shouldRunNow = false;
+}
+
+
+run();
+
+// {{POST_RUN_ADDITIONS}}
+
+
+
+
+
+// {{MODULE_ADDITIONS}}
+
+
+
diff -urN Python-2.7.11/a.out.js Python-2.7.11-em/a.out.js
--- Python-2.7.11/a.out.js	1970-01-01 01:00:00.000000000 +0100
+++ Python-2.7.11-em/a.out.js	2016-05-15 02:50:51.704232555 +0200
@@ -0,0 +1,5747 @@
+// The Module object: Our interface to the outside world. We import
+// and export values on it, and do the work to get that through
+// closure compiler if necessary. There are various ways Module can be used:
+// 1. Not defined. We create it here
+// 2. A function parameter, function(Module) { ..generated code.. }
+// 3. pre-run appended it, var Module = {}; ..generated code..
+// 4. External script tag defines var Module.
+// We need to do an eval in order to handle the closure compiler
+// case, where this code here is minified but Module was defined
+// elsewhere (e.g. case 4 above). We also need to check if Module
+// already exists (e.g. case 3 above).
+// Note that if you want to run closure, and also to use Module
+// after the generated code, you will need to define   var Module = {};
+// before the code. Then that object will be used in the code, and you
+// can continue to use Module afterwards as well.
+var Module;
+if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};
+
+// Sometimes an existing Module object exists with properties
+// meant to overwrite the default module functionality. Here
+// we collect those properties and reapply _after_ we configure
+// the current environment's defaults to avoid having to be so
+// defensive during initialization.
+var moduleOverrides = {};
+for (var key in Module) {
+  if (Module.hasOwnProperty(key)) {
+    moduleOverrides[key] = Module[key];
+  }
+}
+
+// The environment setup code below is customized to use Module.
+// *** Environment setup code ***
+var ENVIRONMENT_IS_WEB = false;
+var ENVIRONMENT_IS_WORKER = false;
+var ENVIRONMENT_IS_NODE = false;
+var ENVIRONMENT_IS_SHELL = false;
+
+// Three configurations we can be running in:
+// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
+// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
+// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
+
+if (Module['ENVIRONMENT']) {
+  if (Module['ENVIRONMENT'] === 'WEB') {
+    ENVIRONMENT_IS_WEB = true;
+  } else if (Module['ENVIRONMENT'] === 'WORKER') {
+    ENVIRONMENT_IS_WORKER = true;
+  } else if (Module['ENVIRONMENT'] === 'NODE') {
+    ENVIRONMENT_IS_NODE = true;
+  } else if (Module['ENVIRONMENT'] === 'SHELL') {
+    ENVIRONMENT_IS_SHELL = true;
+  } else {
+    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
+  }
+} else {
+  ENVIRONMENT_IS_WEB = typeof window === 'object';
+  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
+  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
+  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
+}
+
+
+if (ENVIRONMENT_IS_NODE) {
+  // Expose functionality in the same simple way that the shells work
+  // Note that we pollute the global namespace here, otherwise we break in node
+  if (!Module['print']) Module['print'] = console.log;
+  if (!Module['printErr']) Module['printErr'] = console.warn;
+
+  var nodeFS;
+  var nodePath;
+
+  Module['read'] = function read(filename, binary) {
+    if (!nodeFS) nodeFS = require('fs');
+    if (!nodePath) nodePath = require('path');
+    filename = nodePath['normalize'](filename);
+    var ret = nodeFS['readFileSync'](filename);
+    return binary ? ret : ret.toString();
+  };
+
+  Module['readBinary'] = function readBinary(filename) {
+    var ret = Module['read'](filename, true);
+    if (!ret.buffer) {
+      ret = new Uint8Array(ret);
+    }
+    assert(ret.buffer);
+    return ret;
+  };
+
+  Module['load'] = function load(f) {
+    globalEval(read(f));
+  };
+
+  if (!Module['thisProgram']) {
+    if (process['argv'].length > 1) {
+      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
+    } else {
+      Module['thisProgram'] = 'unknown-program';
+    }
+  }
+
+  Module['arguments'] = process['argv'].slice(2);
+
+  if (typeof module !== 'undefined') {
+    module['exports'] = Module;
+  }
+
+  process['on']('uncaughtException', function(ex) {
+    // suppress ExitStatus exceptions from showing an error
+    if (!(ex instanceof ExitStatus)) {
+      throw ex;
+    }
+  });
+
+  Module['inspect'] = function () { return '[Emscripten Module object]'; };
+}
+else if (ENVIRONMENT_IS_SHELL) {
+  if (!Module['print']) Module['print'] = print;
+  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
+
+  if (typeof read != 'undefined') {
+    Module['read'] = read;
+  } else {
+    Module['read'] = function read() { throw 'no read() available (jsc?)' };
+  }
+
+  Module['readBinary'] = function readBinary(f) {
+    if (typeof readbuffer === 'function') {
+      return new Uint8Array(readbuffer(f));
+    }
+    var data = read(f, 'binary');
+    assert(typeof data === 'object');
+    return data;
+  };
+
+  if (typeof scriptArgs != 'undefined') {
+    Module['arguments'] = scriptArgs;
+  } else if (typeof arguments != 'undefined') {
+    Module['arguments'] = arguments;
+  }
+
+}
+else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
+  Module['read'] = function read(url) {
+    var xhr = new XMLHttpRequest();
+    xhr.open('GET', url, false);
+    xhr.send(null);
+    return xhr.responseText;
+  };
+
+  Module['readAsync'] = function readAsync(url, onload, onerror) {
+    var xhr = new XMLHttpRequest();
+    xhr.open('GET', url, true);
+    xhr.responseType = 'arraybuffer';
+    xhr.onload = function xhr_onload() {
+      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
+        onload(xhr.response);
+      } else {
+        onerror();
+      }
+    };
+    xhr.onerror = onerror;
+    xhr.send(null);
+  };
+
+  if (typeof arguments != 'undefined') {
+    Module['arguments'] = arguments;
+  }
+
+  if (typeof console !== 'undefined') {
+    if (!Module['print']) Module['print'] = function print(x) {
+      console.log(x);
+    };
+    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
+      console.warn(x);
+    };
+  } else {
+    // Probably a worker, and without console.log. We can do very little here...
+    var TRY_USE_DUMP = false;
+    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
+      dump(x);
+    }) : (function(x) {
+      // self.postMessage(x); // enable this if you want stdout to be sent as messages
+    }));
+  }
+
+  if (ENVIRONMENT_IS_WORKER) {
+    Module['load'] = importScripts;
+  }
+
+  if (typeof Module['setWindowTitle'] === 'undefined') {
+    Module['setWindowTitle'] = function(title) { document.title = title };
+  }
+}
+else {
+  // Unreachable because SHELL is dependant on the others
+  throw 'Unknown runtime environment. Where are we?';
+}
+
+function globalEval(x) {
+  eval.call(null, x);
+}
+if (!Module['load'] && Module['read']) {
+  Module['load'] = function load(f) {
+    globalEval(Module['read'](f));
+  };
+}
+if (!Module['print']) {
+  Module['print'] = function(){};
+}
+if (!Module['printErr']) {
+  Module['printErr'] = Module['print'];
+}
+if (!Module['arguments']) {
+  Module['arguments'] = [];
+}
+if (!Module['thisProgram']) {
+  Module['thisProgram'] = './this.program';
+}
+
+// *** Environment setup code ***
+
+// Closure helpers
+Module.print = Module['print'];
+Module.printErr = Module['printErr'];
+
+// Callbacks
+Module['preRun'] = [];
+Module['postRun'] = [];
+
+// Merge back in the overrides
+for (var key in moduleOverrides) {
+  if (moduleOverrides.hasOwnProperty(key)) {
+    Module[key] = moduleOverrides[key];
+  }
+}
+// Free the object hierarchy contained in the overrides, this lets the GC
+// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
+moduleOverrides = undefined;
+
+
+
+// {{PREAMBLE_ADDITIONS}}
+
+// === Preamble library stuff ===
+
+// Documentation for the public APIs defined in this file must be updated in:
+//    site/source/docs/api_reference/preamble.js.rst
+// A prebuilt local version of the documentation is available at:
+//    site/build/text/docs/api_reference/preamble.js.txt
+// You can also build docs locally as HTML or other formats in site/
+// An online HTML version (which may be of a different version of Emscripten)
+//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html
+
+//========================================
+// Runtime code shared with compiler
+//========================================
+
+var Runtime = {
+  setTempRet0: function (value) {
+    tempRet0 = value;
+  },
+  getTempRet0: function () {
+    return tempRet0;
+  },
+  stackSave: function () {
+    return STACKTOP;
+  },
+  stackRestore: function (stackTop) {
+    STACKTOP = stackTop;
+  },
+  getNativeTypeSize: function (type) {
+    switch (type) {
+      case 'i1': case 'i8': return 1;
+      case 'i16': return 2;
+      case 'i32': return 4;
+      case 'i64': return 8;
+      case 'float': return 4;
+      case 'double': return 8;
+      default: {
+        if (type[type.length-1] === '*') {
+          return Runtime.QUANTUM_SIZE; // A pointer
+        } else if (type[0] === 'i') {
+          var bits = parseInt(type.substr(1));
+          assert(bits % 8 === 0);
+          return bits/8;
+        } else {
+          return 0;
+        }
+      }
+    }
+  },
+  getNativeFieldSize: function (type) {
+    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
+  },
+  STACK_ALIGN: 16,
+  prepVararg: function (ptr, type) {
+    if (type === 'double' || type === 'i64') {
+      // move so the load is aligned
+      if (ptr & 7) {
+        assert((ptr & 7) === 4);
+        ptr += 4;
+      }
+    } else {
+      assert((ptr & 3) === 0);
+    }
+    return ptr;
+  },
+  getAlignSize: function (type, size, vararg) {
+    // we align i64s and doubles on 64-bit boundaries, unlike x86
+    if (!vararg && (type == 'i64' || type == 'double')) return 8;
+    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
+    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
+  },
+  dynCall: function (sig, ptr, args) {
+    if (args && args.length) {
+      assert(args.length == sig.length-1);
+      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
+      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
+    } else {
+      assert(sig.length == 1);
+      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
+      return Module['dynCall_' + sig].call(null, ptr);
+    }
+  },
+  functionPointers: [],
+  addFunction: function (func) {
+    for (var i = 0; i < Runtime.functionPointers.length; i++) {
+      if (!Runtime.functionPointers[i]) {
+        Runtime.functionPointers[i] = func;
+        return 2*(1 + i);
+      }
+    }
+    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
+  },
+  removeFunction: function (index) {
+    Runtime.functionPointers[(index-2)/2] = null;
+  },
+  warnOnce: function (text) {
+    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
+    if (!Runtime.warnOnce.shown[text]) {
+      Runtime.warnOnce.shown[text] = 1;
+      Module.printErr(text);
+    }
+  },
+  funcWrappers: {},
+  getFuncWrapper: function (func, sig) {
+    assert(sig);
+    if (!Runtime.funcWrappers[sig]) {
+      Runtime.funcWrappers[sig] = {};
+    }
+    var sigCache = Runtime.funcWrappers[sig];
+    if (!sigCache[func]) {
+      // optimize away arguments usage in common cases
+      if (sig.length === 1) {
+        sigCache[func] = function dynCall_wrapper() {
+          return Runtime.dynCall(sig, func);
+        };
+      } else if (sig.length === 2) {
+        sigCache[func] = function dynCall_wrapper(arg) {
+          return Runtime.dynCall(sig, func, [arg]);
+        };
+      } else {
+        // general case
+        sigCache[func] = function dynCall_wrapper() {
+          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
+        };
+      }
+    }
+    return sigCache[func];
+  },
+  getCompilerSetting: function (name) {
+    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
+  },
+  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
+  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
+  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
+  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
+  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
+  GLOBAL_BASE: 8,
+  QUANTUM_SIZE: 4,
+  __dummy__: 0
+}
+
+
+
+Module["Runtime"] = Runtime;
+
+
+
+//========================================
+// Runtime essentials
+//========================================
+
+var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
+var EXITSTATUS = 0;
+
+function assert(condition, text) {
+  if (!condition) {
+    abort('Assertion failed: ' + text);
+  }
+}
+
+var globalScope = this;
+
+// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
+function getCFunc(ident) {
+  var func = Module['_' + ident]; // closure exported function
+  if (!func) {
+    try { func = eval('_' + ident); } catch(e) {}
+  }
+  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
+  return func;
+}
+
+var cwrap, ccall;
+(function(){
+  var JSfuncs = {
+    // Helpers for cwrap -- it can't refer to Runtime directly because it might
+    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
+    // out what the minified function name is.
+    'stackSave': function() {
+      Runtime.stackSave()
+    },
+    'stackRestore': function() {
+      Runtime.stackRestore()
+    },
+    // type conversion from js to c
+    'arrayToC' : function(arr) {
+      var ret = Runtime.stackAlloc(arr.length);
+      writeArrayToMemory(arr, ret);
+      return ret;
+    },
+    'stringToC' : function(str) {
+      var ret = 0;
+      if (str !== null && str !== undefined && str !== 0) { // null string
+        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
+        ret = Runtime.stackAlloc((str.length << 2) + 1);
+        writeStringToMemory(str, ret);
+      }
+      return ret;
+    }
+  };
+  // For fast lookup of conversion functions
+  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};
+
+  // C calling interface.
+  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
+    var func = getCFunc(ident);
+    var cArgs = [];
+    var stack = 0;
+    assert(returnType !== 'array', 'Return type should not be "array".');
+    if (args) {
+      for (var i = 0; i < args.length; i++) {
+        var converter = toC[argTypes[i]];
+        if (converter) {
+          if (stack === 0) stack = Runtime.stackSave();
+          cArgs[i] = converter(args[i]);
+        } else {
+          cArgs[i] = args[i];
+        }
+      }
+    }
+    var ret = func.apply(null, cArgs);
+    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
+      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
+    }
+    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
+    if (returnType === 'string') ret = Pointer_stringify(ret);
+    if (stack !== 0) {
+      if (opts && opts.async) {
+        EmterpreterAsync.asyncFinalizers.push(function() {
+          Runtime.stackRestore(stack);
+        });
+        return;
+      }
+      Runtime.stackRestore(stack);
+    }
+    return ret;
+  }
+
+  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
+  function parseJSFunc(jsfunc) {
+    // Match the body and the return value of a javascript function source
+    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
+    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
+  }
+
+  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
+  var JSsource = null;
+  function ensureJSsource() {
+    if (!JSsource) {
+      JSsource = {};
+      for (var fun in JSfuncs) {
+        if (JSfuncs.hasOwnProperty(fun)) {
+          // Elements of toCsource are arrays of three items:
+          // the code, and the return value
+          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
+        }
+      }
+    }
+  }
+
+  cwrap = function cwrap(ident, returnType, argTypes) {
+    argTypes = argTypes || [];
+    var cfunc = getCFunc(ident);
+    // When the function takes numbers and returns a number, we can just return
+    // the original function
+    var numericArgs = argTypes.every(function(type){ return type === 'number'});
+    var numericRet = (returnType !== 'string');
+    if ( numericRet && numericArgs) {
+      return cfunc;
+    }
+    // Creation of the arguments list (["$1","$2",...,"$nargs"])
+    var argNames = argTypes.map(function(x,i){return '$'+i});
+    var funcstr = "(function(" + argNames.join(',') + ") {";
+    var nargs = argTypes.length;
+    if (!numericArgs) {
+      // Generate the code needed to convert the arguments from javascript
+      // values to pointers
+      ensureJSsource();
+      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
+      for (var i = 0; i < nargs; i++) {
+        var arg = argNames[i], type = argTypes[i];
+        if (type === 'number') continue;
+        var convertCode = JSsource[type + 'ToC']; // [code, return]
+        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
+        funcstr += convertCode.body + ';';
+        funcstr += arg + '=(' + convertCode.returnValue + ');';
+      }
+    }
+
+    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
+    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
+    // Call the function
+    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
+    if (!numericRet) { // Return type can only by 'string' or 'number'
+      // Convert the result to a string
+      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
+      funcstr += 'ret = ' + strgfy + '(ret);';
+    }
+    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
+    if (!numericArgs) {
+      // If we had a stack, restore it
+      ensureJSsource();
+      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
+    }
+    funcstr += 'return ret})';
+    return eval(funcstr);
+  };
+})();
+Module["ccall"] = ccall;
+Module["cwrap"] = cwrap;
+
+function setValue(ptr, value, type, noSafe) {
+  type = type || 'i8';
+  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
+    switch(type) {
+      case 'i1': HEAP8[((ptr)>>0)]=value; break;
+      case 'i8': HEAP8[((ptr)>>0)]=value; break;
+      case 'i16': HEAP16[((ptr)>>1)]=value; break;
+      case 'i32': HEAP32[((ptr)>>2)]=value; break;
+      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
+      case 'float': HEAPF32[((ptr)>>2)]=value; break;
+      case 'double': HEAPF64[((ptr)>>3)]=value; break;
+      default: abort('invalid type for setValue: ' + type);
+    }
+}
+Module["setValue"] = setValue;
+
+
+function getValue(ptr, type, noSafe) {
+  type = type || 'i8';
+  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
+    switch(type) {
+      case 'i1': return HEAP8[((ptr)>>0)];
+      case 'i8': return HEAP8[((ptr)>>0)];
+      case 'i16': return HEAP16[((ptr)>>1)];
+      case 'i32': return HEAP32[((ptr)>>2)];
+      case 'i64': return HEAP32[((ptr)>>2)];
+      case 'float': return HEAPF32[((ptr)>>2)];
+      case 'double': return HEAPF64[((ptr)>>3)];
+      default: abort('invalid type for setValue: ' + type);
+    }
+  return null;
+}
+Module["getValue"] = getValue;
+
+var ALLOC_NORMAL = 0; // Tries to use _malloc()
+var ALLOC_STACK = 1; // Lives for the duration of the current function call
+var ALLOC_STATIC = 2; // Cannot be freed
+var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
+var ALLOC_NONE = 4; // Do not allocate
+Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
+Module["ALLOC_STACK"] = ALLOC_STACK;
+Module["ALLOC_STATIC"] = ALLOC_STATIC;
+Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
+Module["ALLOC_NONE"] = ALLOC_NONE;
+
+// allocate(): This is for internal use. You can use it yourself as well, but the interface
+//             is a little tricky (see docs right below). The reason is that it is optimized
+//             for multiple syntaxes to save space in generated code. So you should
+//             normally not use allocate(), and instead allocate memory using _malloc(),
+//             initialize it with setValue(), and so forth.
+// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
+//        in *bytes* (note that this is sometimes confusing: the next parameter does not
+//        affect this!)
+// @types: Either an array of types, one for each byte (or 0 if no type at that position),
+//         or a single type which is used for the entire block. This only matters if there
+//         is initial data - if @slab is a number, then this does not matter at all and is
+//         ignored.
+// @allocator: How to allocate memory, see ALLOC_*
+function allocate(slab, types, allocator, ptr) {
+  var zeroinit, size;
+  if (typeof slab === 'number') {
+    zeroinit = true;
+    size = slab;
+  } else {
+    zeroinit = false;
+    size = slab.length;
+  }
+
+  var singleType = typeof types === 'string' ? types : null;
+
+  var ret;
+  if (allocator == ALLOC_NONE) {
+    ret = ptr;
+  } else {
+    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
+  }
+
+  if (zeroinit) {
+    var ptr = ret, stop;
+    assert((ret & 3) == 0);
+    stop = ret + (size & ~3);
+    for (; ptr < stop; ptr += 4) {
+      HEAP32[((ptr)>>2)]=0;
+    }
+    stop = ret + size;
+    while (ptr < stop) {
+      HEAP8[((ptr++)>>0)]=0;
+    }
+    return ret;
+  }
+
+  if (singleType === 'i8') {
+    if (slab.subarray || slab.slice) {
+      HEAPU8.set(slab, ret);
+    } else {
+      HEAPU8.set(new Uint8Array(slab), ret);
+    }
+    return ret;
+  }
+
+  var i = 0, type, typeSize, previousType;
+  while (i < size) {
+    var curr = slab[i];
+
+    if (typeof curr === 'function') {
+      curr = Runtime.getFunctionIndex(curr);
+    }
+
+    type = singleType || types[i];
+    if (type === 0) {
+      i++;
+      continue;
+    }
+    assert(type, 'Must know what type to store in allocate!');
+
+    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
+
+    setValue(ret+i, curr, type);
+
+    // no need to look up size unless type changes, so cache it
+    if (previousType !== type) {
+      typeSize = Runtime.getNativeTypeSize(type);
+      previousType = type;
+    }
+    i += typeSize;
+  }
+
+  return ret;
+}
+Module["allocate"] = allocate;
+
+// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
+function getMemory(size) {
+  if (!staticSealed) return Runtime.staticAlloc(size);
+  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
+  return _malloc(size);
+}
+Module["getMemory"] = getMemory;
+
+function Pointer_stringify(ptr, /* optional */ length) {
+  if (length === 0 || !ptr) return '';
+  // TODO: use TextDecoder
+  // Find the length, and check for UTF while doing so
+  var hasUtf = 0;
+  var t;
+  var i = 0;
+  while (1) {
+    assert(ptr + i < TOTAL_MEMORY);
+    t = HEAPU8[(((ptr)+(i))>>0)];
+    hasUtf |= t;
+    if (t == 0 && !length) break;
+    i++;
+    if (length && i == length) break;
+  }
+  if (!length) length = i;
+
+  var ret = '';
+
+  if (hasUtf < 128) {
+    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
+    var curr;
+    while (length > 0) {
+      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
+      ret = ret ? ret + curr : curr;
+      ptr += MAX_CHUNK;
+      length -= MAX_CHUNK;
+    }
+    return ret;
+  }
+  return Module['UTF8ToString'](ptr);
+}
+Module["Pointer_stringify"] = Pointer_stringify;
+
+// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
+// a copy of that string as a Javascript String object.
+
+function AsciiToString(ptr) {
+  var str = '';
+  while (1) {
+    var ch = HEAP8[((ptr++)>>0)];
+    if (!ch) return str;
+    str += String.fromCharCode(ch);
+  }
+}
+Module["AsciiToString"] = AsciiToString;
+
+// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
+// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.
+
+function stringToAscii(str, outPtr) {
+  return writeAsciiToMemory(str, outPtr, false);
+}
+Module["stringToAscii"] = stringToAscii;
+
+// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
+// a copy of that string as a Javascript String object.
+
+function UTF8ArrayToString(u8Array, idx) {
+  var u0, u1, u2, u3, u4, u5;
+
+  var str = '';
+  while (1) {
+    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
+    u0 = u8Array[idx++];
+    if (!u0) return str;
+    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
+    u1 = u8Array[idx++] & 63;
+    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
+    u2 = u8Array[idx++] & 63;
+    if ((u0 & 0xF0) == 0xE0) {
+      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
+    } else {
+      u3 = u8Array[idx++] & 63;
+      if ((u0 & 0xF8) == 0xF0) {
+        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
+      } else {
+        u4 = u8Array[idx++] & 63;
+        if ((u0 & 0xFC) == 0xF8) {
+          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
+        } else {
+          u5 = u8Array[idx++] & 63;
+          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
+        }
+      }
+    }
+    if (u0 < 0x10000) {
+      str += String.fromCharCode(u0);
+    } else {
+      var ch = u0 - 0x10000;
+      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
+    }
+  }
+}
+Module["UTF8ArrayToString"] = UTF8ArrayToString;
+
+// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
+// a copy of that string as a Javascript String object.
+
+function UTF8ToString(ptr) {
+  return UTF8ArrayToString(HEAPU8,ptr);
+}
+Module["UTF8ToString"] = UTF8ToString;
+
+// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
+// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
+// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
+// Parameters:
+//   str: the Javascript string to copy.
+//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
+//   outIdx: The starting offset in the array to begin the copying.
+//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
+//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
+//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
+// Returns the number of bytes written, EXCLUDING the null terminator.
+
+function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
+  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
+    return 0;
+
+  var startIdx = outIdx;
+  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
+  for (var i = 0; i < str.length; ++i) {
+    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
+    // See http://unicode.org/faq/utf_bom.html#utf16-3
+    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
+    var u = str.charCodeAt(i); // possibly a lead surrogate
+    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
+    if (u <= 0x7F) {
+      if (outIdx >= endIdx) break;
+      outU8Array[outIdx++] = u;
+    } else if (u <= 0x7FF) {
+      if (outIdx + 1 >= endIdx) break;
+      outU8Array[outIdx++] = 0xC0 | (u >> 6);
+      outU8Array[outIdx++] = 0x80 | (u & 63);
+    } else if (u <= 0xFFFF) {
+      if (outIdx + 2 >= endIdx) break;
+      outU8Array[outIdx++] = 0xE0 | (u >> 12);
+      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
+      outU8Array[outIdx++] = 0x80 | (u & 63);
+    } else if (u <= 0x1FFFFF) {
+      if (outIdx + 3 >= endIdx) break;
+      outU8Array[outIdx++] = 0xF0 | (u >> 18);
+      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
+      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
+      outU8Array[outIdx++] = 0x80 | (u & 63);
+    } else if (u <= 0x3FFFFFF) {
+      if (outIdx + 4 >= endIdx) break;
+      outU8Array[outIdx++] = 0xF8 | (u >> 24);
+      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
+      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
+      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
+      outU8Array[outIdx++] = 0x80 | (u & 63);
+    } else {
+      if (outIdx + 5 >= endIdx) break;
+      outU8Array[outIdx++] = 0xFC | (u >> 30);
+      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
+      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
+      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
+      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
+      outU8Array[outIdx++] = 0x80 | (u & 63);
+    }
+  }
+  // Null-terminate the pointer to the buffer.
+  outU8Array[outIdx] = 0;
+  return outIdx - startIdx;
+}
+Module["stringToUTF8Array"] = stringToUTF8Array;
+
+// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
+// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
+// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
+// Returns the number of bytes written, EXCLUDING the null terminator.
+
+function stringToUTF8(str, outPtr, maxBytesToWrite) {
+  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
+  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
+}
+Module["stringToUTF8"] = stringToUTF8;
+
+// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
+
+function lengthBytesUTF8(str) {
+  var len = 0;
+  for (var i = 0; i < str.length; ++i) {
+    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
+    // See http://unicode.org/faq/utf_bom.html#utf16-3
+    var u = str.charCodeAt(i); // possibly a lead surrogate
+    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
+    if (u <= 0x7F) {
+      ++len;
+    } else if (u <= 0x7FF) {
+      len += 2;
+    } else if (u <= 0xFFFF) {
+      len += 3;
+    } else if (u <= 0x1FFFFF) {
+      len += 4;
+    } else if (u <= 0x3FFFFFF) {
+      len += 5;
+    } else {
+      len += 6;
+    }
+  }
+  return len;
+}
+Module["lengthBytesUTF8"] = lengthBytesUTF8;
+
+// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
+// a copy of that string as a Javascript String object.
+
+function UTF16ToString(ptr) {
+  var i = 0;
+
+  var str = '';
+  while (1) {
+    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
+    if (codeUnit == 0)
+      return str;
+    ++i;
+    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
+    str += String.fromCharCode(codeUnit);
+  }
+}
+
+
+// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
+// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
+// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
+// Parameters:
+//   str: the Javascript string to copy.
+//   outPtr: Byte address in Emscripten HEAP where to write the string to.
+//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
+//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
+//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
+// Returns the number of bytes written, EXCLUDING the null terminator.
+
+function stringToUTF16(str, outPtr, maxBytesToWrite) {
+  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
+  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
+  if (maxBytesToWrite === undefined) {
+    maxBytesToWrite = 0x7FFFFFFF;
+  }
+  if (maxBytesToWrite < 2) return 0;
+  maxBytesToWrite -= 2; // Null terminator.
+  var startPtr = outPtr;
+  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
+  for (var i = 0; i < numCharsToWrite; ++i) {
+    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
+    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
+    HEAP16[((outPtr)>>1)]=codeUnit;
+    outPtr += 2;
+  }
+  // Null-terminate the pointer to the HEAP.
+  HEAP16[((outPtr)>>1)]=0;
+  return outPtr - startPtr;
+}
+
+
+// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.
+
+function lengthBytesUTF16(str) {
+  return str.length*2;
+}
+
+
+function UTF32ToString(ptr) {
+  var i = 0;
+
+  var str = '';
+  while (1) {
+    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
+    if (utf32 == 0)
+      return str;
+    ++i;
+    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
+    // See http://unicode.org/faq/utf_bom.html#utf16-3
+    if (utf32 >= 0x10000) {
+      var ch = utf32 - 0x10000;
+      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
+    } else {
+      str += String.fromCharCode(utf32);
+    }
+  }
+}
+
+
+// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
+// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
+// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
+// Parameters:
+//   str: the Javascript string to copy.
+//   outPtr: Byte address in Emscripten HEAP where to write the string to.
+//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
+//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
+//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
+// Returns the number of bytes written, EXCLUDING the null terminator.
+
+function stringToUTF32(str, outPtr, maxBytesToWrite) {
+  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
+  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
+  if (maxBytesToWrite === undefined) {
+    maxBytesToWrite = 0x7FFFFFFF;
+  }
+  if (maxBytesToWrite < 4) return 0;
+  var startPtr = outPtr;
+  var endPtr = startPtr + maxBytesToWrite - 4;
+  for (var i = 0; i < str.length; ++i) {
+    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
+    // See http://unicode.org/faq/utf_bom.html#utf16-3
+    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
+    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
+      var trailSurrogate = str.charCodeAt(++i);
+      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
+    }
+    HEAP32[((outPtr)>>2)]=codeUnit;
+    outPtr += 4;
+    if (outPtr + 4 > endPtr) break;
+  }
+  // Null-terminate the pointer to the HEAP.
+  HEAP32[((outPtr)>>2)]=0;
+  return outPtr - startPtr;
+}
+
+
+// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.
+
+function lengthBytesUTF32(str) {
+  var len = 0;
+  for (var i = 0; i < str.length; ++i) {
+    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
+    // See http://unicode.org/faq/utf_bom.html#utf16-3
+    var codeUnit = str.charCodeAt(i);
+    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
+    len += 4;
+  }
+
+  return len;
+}
+
+
+function demangle(func) {
+  var hasLibcxxabi = !!Module['___cxa_demangle'];
+  if (hasLibcxxabi) {
+    try {
+      var buf = _malloc(func.length);
+      writeStringToMemory(func.substr(1), buf);
+      var status = _malloc(4);
+      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
+      if (getValue(status, 'i32') === 0 && ret) {
+        return Pointer_stringify(ret);
+      }
+      // otherwise, libcxxabi failed
+    } catch(e) {
+      // ignore problems here
+    } finally {
+      if (buf) _free(buf);
+      if (status) _free(status);
+      if (ret) _free(ret);
+    }
+    // failure when using libcxxabi, don't demangle
+    return func;
+  }
+  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
+  return func;
+}
+
+function demangleAll(text) {
+  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
+}
+
+function jsStackTrace() {
+  var err = new Error();
+  if (!err.stack) {
+    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
+    // so try that as a special-case.
+    try {
+      throw new Error(0);
+    } catch(e) {
+      err = e;
+    }
+    if (!err.stack) {
+      return '(no stack trace available)';
+    }
+  }
+  return err.stack.toString();
+}
+
+function stackTrace() {
+  var js = jsStackTrace();
+  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
+  return demangleAll(js);
+}
+Module["stackTrace"] = stackTrace;
+
+// Memory management
+
+var PAGE_SIZE = 4096;
+
+function alignMemoryPage(x) {
+  if (x % 4096 > 0) {
+    x += (4096 - (x % 4096));
+  }
+  return x;
+}
+
+var HEAP;
+var buffer;
+var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
+
+function updateGlobalBuffer(buf) {
+  Module['buffer'] = buffer = buf;
+}
+
+function updateGlobalBufferViews() {
+  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
+  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
+  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
+  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
+  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
+  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
+  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
+  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
+}
+
+var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
+var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
+var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
+
+
+// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
+function writeStackCookie() {
+  assert((STACK_MAX & 3) == 0);
+  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
+  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
+}
+
+function checkStackCookie() {
+  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
+    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
+  }
+}
+
+function abortStackOverflow(allocSize) {
+  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
+}
+
+function abortOnCannotGrowMemory() {
+  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
+}
+
+function enlargeMemory() {
+  abortOnCannotGrowMemory();
+}
+
+
+var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
+var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
+
+var totalMemory = 64*1024;
+while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
+  if (totalMemory < 16*1024*1024) {
+    totalMemory *= 2;
+  } else {
+    totalMemory += 16*1024*1024
+  }
+}
+if (totalMemory !== TOTAL_MEMORY) {
+  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
+  TOTAL_MEMORY = totalMemory;
+}
+
+// Initialize the runtime's memory
+// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
+assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
+       'JS engine does not provide full typed array support');
+
+
+
+// Use a provided buffer, if there is one, or else allocate a new one
+if (Module['buffer']) {
+  buffer = Module['buffer'];
+  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
+} else {
+  buffer = new ArrayBuffer(TOTAL_MEMORY);
+}
+updateGlobalBufferViews();
+
+
+// Endianness check (note: assumes compiler arch was little-endian)
+HEAP32[0] = 255;
+if (HEAPU8[0] !== 255 || HEAPU8[3] !== 0) throw 'Typed arrays 2 must be run on a little-endian system';
+
+Module['HEAP'] = HEAP;
+Module['buffer'] = buffer;
+Module['HEAP8'] = HEAP8;
+Module['HEAP16'] = HEAP16;
+Module['HEAP32'] = HEAP32;
+Module['HEAPU8'] = HEAPU8;
+Module['HEAPU16'] = HEAPU16;
+Module['HEAPU32'] = HEAPU32;
+Module['HEAPF32'] = HEAPF32;
+Module['HEAPF64'] = HEAPF64;
+
+function callRuntimeCallbacks(callbacks) {
+  while(callbacks.length > 0) {
+    var callback = callbacks.shift();
+    if (typeof callback == 'function') {
+      callback();
+      continue;
+    }
+    var func = callback.func;
+    if (typeof func === 'number') {
+      if (callback.arg === undefined) {
+        Runtime.dynCall('v', func);
+      } else {
+        Runtime.dynCall('vi', func, [callback.arg]);
+      }
+    } else {
+      func(callback.arg === undefined ? null : callback.arg);
+    }
+  }
+}
+
+var __ATPRERUN__  = []; // functions called before the runtime is initialized
+var __ATINIT__    = []; // functions called during startup
+var __ATMAIN__    = []; // functions called when main() is to be run
+var __ATEXIT__    = []; // functions called during shutdown
+var __ATPOSTRUN__ = []; // functions called after the runtime has exited
+
+var runtimeInitialized = false;
+var runtimeExited = false;
+
+
+function preRun() {
+  // compatibility - merge in anything from Module['preRun'] at this time
+  if (Module['preRun']) {
+    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
+    while (Module['preRun'].length) {
+      addOnPreRun(Module['preRun'].shift());
+    }
+  }
+  callRuntimeCallbacks(__ATPRERUN__);
+}
+
+function ensureInitRuntime() {
+  checkStackCookie();
+  if (runtimeInitialized) return;
+  runtimeInitialized = true;
+  callRuntimeCallbacks(__ATINIT__);
+}
+
+function preMain() {
+  checkStackCookie();
+  callRuntimeCallbacks(__ATMAIN__);
+}
+
+function exitRuntime() {
+  checkStackCookie();
+  callRuntimeCallbacks(__ATEXIT__);
+  runtimeExited = true;
+}
+
+function postRun() {
+  checkStackCookie();
+  // compatibility - merge in anything from Module['postRun'] at this time
+  if (Module['postRun']) {
+    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
+    while (Module['postRun'].length) {
+      addOnPostRun(Module['postRun'].shift());
+    }
+  }
+  callRuntimeCallbacks(__ATPOSTRUN__);
+}
+
+function addOnPreRun(cb) {
+  __ATPRERUN__.unshift(cb);
+}
+Module["addOnPreRun"] = addOnPreRun;
+
+function addOnInit(cb) {
+  __ATINIT__.unshift(cb);
+}
+Module["addOnInit"] = addOnInit;
+
+function addOnPreMain(cb) {
+  __ATMAIN__.unshift(cb);
+}
+Module["addOnPreMain"] = addOnPreMain;
+
+function addOnExit(cb) {
+  __ATEXIT__.unshift(cb);
+}
+Module["addOnExit"] = addOnExit;
+
+function addOnPostRun(cb) {
+  __ATPOSTRUN__.unshift(cb);
+}
+Module["addOnPostRun"] = addOnPostRun;
+
+// Tools
+
+
+function intArrayFromString(stringy, dontAddNull, length /* optional */) {
+  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
+  var u8array = new Array(len);
+  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
+  if (dontAddNull) u8array.length = numBytesWritten;
+  return u8array;
+}
+Module["intArrayFromString"] = intArrayFromString;
+
+function intArrayToString(array) {
+  var ret = [];
+  for (var i = 0; i < array.length; i++) {
+    var chr = array[i];
+    if (chr > 0xFF) {
+      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
+      chr &= 0xFF;
+    }
+    ret.push(String.fromCharCode(chr));
+  }
+  return ret.join('');
+}
+Module["intArrayToString"] = intArrayToString;
+
+function writeStringToMemory(string, buffer, dontAddNull) {
+  var array = intArrayFromString(string, dontAddNull);
+  var i = 0;
+  while (i < array.length) {
+    var chr = array[i];
+    HEAP8[(((buffer)+(i))>>0)]=chr;
+    i = i + 1;
+  }
+}
+Module["writeStringToMemory"] = writeStringToMemory;
+
+function writeArrayToMemory(array, buffer) {
+  for (var i = 0; i < array.length; i++) {
+    HEAP8[((buffer++)>>0)]=array[i];
+  }
+}
+Module["writeArrayToMemory"] = writeArrayToMemory;
+
+function writeAsciiToMemory(str, buffer, dontAddNull) {
+  for (var i = 0; i < str.length; ++i) {
+    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
+    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
+  }
+  // Null-terminate the pointer to the HEAP.
+  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
+}
+Module["writeAsciiToMemory"] = writeAsciiToMemory;
+
+function unSign(value, bits, ignore) {
+  if (value >= 0) {
+    return value;
+  }
+  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
+                    : Math.pow(2, bits)         + value;
+}
+function reSign(value, bits, ignore) {
+  if (value <= 0) {
+    return value;
+  }
+  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
+                        : Math.pow(2, bits-1);
+  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
+                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
+                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
+    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
+  }
+  return value;
+}
+
+
+// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
+if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
+  var ah  = a >>> 16;
+  var al = a & 0xffff;
+  var bh  = b >>> 16;
+  var bl = b & 0xffff;
+  return (al*bl + ((ah*bl + al*bh) << 16))|0;
+};
+Math.imul = Math['imul'];
+
+
+if (!Math['clz32']) Math['clz32'] = function(x) {
+  x = x >>> 0;
+  for (var i = 0; i < 32; i++) {
+    if (x & (1 << (31 - i))) return i;
+  }
+  return 32;
+};
+Math.clz32 = Math['clz32']
+
+if (!Math['trunc']) Math['trunc'] = function(x) {
+  return x < 0 ? Math.ceil(x) : Math.floor(x);
+};
+Math.trunc = Math['trunc'];
+
+var Math_abs = Math.abs;
+var Math_cos = Math.cos;
+var Math_sin = Math.sin;
+var Math_tan = Math.tan;
+var Math_acos = Math.acos;
+var Math_asin = Math.asin;
+var Math_atan = Math.atan;
+var Math_atan2 = Math.atan2;
+var Math_exp = Math.exp;
+var Math_log = Math.log;
+var Math_sqrt = Math.sqrt;
+var Math_ceil = Math.ceil;
+var Math_floor = Math.floor;
+var Math_pow = Math.pow;
+var Math_imul = Math.imul;
+var Math_fround = Math.fround;
+var Math_min = Math.min;
+var Math_clz32 = Math.clz32;
+var Math_trunc = Math.trunc;
+
+// A counter of dependencies for calling run(). If we need to
+// do asynchronous work before running, increment this and
+// decrement it. Incrementing must happen in a place like
+// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
+// Note that you can add dependencies in preRun, even though
+// it happens right before run - run will be postponed until
+// the dependencies are met.
+var runDependencies = 0;
+var runDependencyWatcher = null;
+var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
+var runDependencyTracking = {};
+
+function getUniqueRunDependency(id) {
+  var orig = id;
+  while (1) {
+    if (!runDependencyTracking[id]) return id;
+    id = orig + Math.random();
+  }
+  return id;
+}
+
+function addRunDependency(id) {
+  runDependencies++;
+  if (Module['monitorRunDependencies']) {
+    Module['monitorRunDependencies'](runDependencies);
+  }
+  if (id) {
+    assert(!runDependencyTracking[id]);
+    runDependencyTracking[id] = 1;
+    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
+      // Check for missing dependencies every few seconds
+      runDependencyWatcher = setInterval(function() {
+        if (ABORT) {
+          clearInterval(runDependencyWatcher);
+          runDependencyWatcher = null;
+          return;
+        }
+        var shown = false;
+        for (var dep in runDependencyTracking) {
+          if (!shown) {
+            shown = true;
+            Module.printErr('still waiting on run dependencies:');
+          }
+          Module.printErr('dependency: ' + dep);
+        }
+        if (shown) {
+          Module.printErr('(end of list)');
+        }
+      }, 10000);
+    }
+  } else {
+    Module.printErr('warning: run dependency added without ID');
+  }
+}
+Module["addRunDependency"] = addRunDependency;
+
+function removeRunDependency(id) {
+  runDependencies--;
+  if (Module['monitorRunDependencies']) {
+    Module['monitorRunDependencies'](runDependencies);
+  }
+  if (id) {
+    assert(runDependencyTracking[id]);
+    delete runDependencyTracking[id];
+  } else {
+    Module.printErr('warning: run dependency removed without ID');
+  }
+  if (runDependencies == 0) {
+    if (runDependencyWatcher !== null) {
+      clearInterval(runDependencyWatcher);
+      runDependencyWatcher = null;
+    }
+    if (dependenciesFulfilled) {
+      var callback = dependenciesFulfilled;
+      dependenciesFulfilled = null;
+      callback(); // can add another dependenciesFulfilled
+    }
+  }
+}
+Module["removeRunDependency"] = removeRunDependency;
+
+Module["preloadedImages"] = {}; // maps url to image data
+Module["preloadedAudios"] = {}; // maps url to audio data
+
+
+
+var memoryInitializer = null;
+
+
+
+var /* show errors on likely calls to FS when it was not included */ FS = {
+  error: function() {
+    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
+  },
+  init: function() { FS.error() },
+  createDataFile: function() { FS.error() },
+  createPreloadedFile: function() { FS.error() },
+  createLazyFile: function() { FS.error() },
+  open: function() { FS.error() },
+  mkdev: function() { FS.error() },
+  registerDevice: function() { FS.error() },
+  analyzePath: function() { FS.error() },
+  loadFilesFromDB: function() { FS.error() },
+
+  ErrnoError: function ErrnoError() { FS.error() },
+};
+Module['FS_createDataFile'] = FS.createDataFile;
+Module['FS_createPreloadedFile'] = FS.createPreloadedFile;
+
+
+// === Body ===
+
+var ASM_CONSTS = [];
+
+
+
+
+STATIC_BASE = 8;
+
+STATICTOP = STATIC_BASE + 1712;
+  /* global initializers */  __ATINIT__.push();
+  
+
+/* memory initializer */ allocate([5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,164,2,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
+
+
+
+
+
+/* no memory initializer */
+var tempDoublePtr = STATICTOP; STATICTOP += 16;
+
+assert(tempDoublePtr % 8 == 0);
+
+function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
+
+  HEAP8[tempDoublePtr] = HEAP8[ptr];
+
+  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
+
+  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
+
+  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
+
+}
+
+function copyTempDouble(ptr) {
+
+  HEAP8[tempDoublePtr] = HEAP8[ptr];
+
+  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
+
+  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
+
+  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
+
+  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
+
+  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
+
+  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
+
+  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
+
+}
+
+// {{PRE_LIBRARY}}
+
+
+  function _sbrk(bytes) {
+      // Implement a Linux-like 'memory area' for our 'process'.
+      // Changes the size of the memory area by |bytes|; returns the
+      // address of the previous top ('break') of the memory area
+      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
+      var self = _sbrk;
+      if (!self.called) {
+        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
+        self.called = true;
+        assert(Runtime.dynamicAlloc);
+        self.alloc = Runtime.dynamicAlloc;
+        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
+      }
+      var ret = DYNAMICTOP;
+      if (bytes != 0) {
+        var success = self.alloc(bytes);
+        if (!success) return -1 >>> 0; // sbrk failure code
+      }
+      return ret;  // Previous break location.
+    }
+
+   
+  Module["_memset"] = _memset;
+
+  function _pthread_cleanup_push(routine, arg) {
+      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
+      _pthread_cleanup_push.level = __ATEXIT__.length;
+    }
+
+  function ___lock() {}
+
+  
+  function _emscripten_memcpy_big(dest, src, num) {
+      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
+      return dest;
+    } 
+  Module["_memcpy"] = _memcpy;
+
+  function _pthread_cleanup_pop() {
+      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
+      __ATEXIT__.pop();
+      _pthread_cleanup_push.level = __ATEXIT__.length;
+    }
+
+  function _abort() {
+      Module['abort']();
+    }
+
+   
+  Module["_pthread_self"] = _pthread_self;
+
+  
+  var SYSCALLS={varargs:0,get:function (varargs) {
+        SYSCALLS.varargs += 4;
+        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
+        return ret;
+      },getStr:function () {
+        var ret = Pointer_stringify(SYSCALLS.get());
+        return ret;
+      },get64:function () {
+        var low = SYSCALLS.get(), high = SYSCALLS.get();
+        if (low >= 0) assert(high === 0);
+        else assert(high === -1);
+        return low;
+      },getZero:function () {
+        assert(SYSCALLS.get() === 0);
+      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
+  try {
+   // llseek
+      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
+      var offset = offset_low;
+      assert(offset_high === 0);
+      FS.llseek(stream, offset, whence);
+      HEAP32[((result)>>2)]=stream.position;
+      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
+      return 0;
+    } catch (e) {
+    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
+    return -e.errno;
+  }
+  }
+
+  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
+  try {
+   // writev
+      // hack to support printf in NO_FILESYSTEM
+      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
+      var ret = 0;
+      if (!___syscall146.buffer) {
+        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
+        ___syscall146.printChar = function(stream, curr) {
+          var buffer = ___syscall146.buffers[stream];
+          assert(buffer);
+          if (curr === 0 || curr === 10) {
+            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
+            buffer.length = 0;
+          } else {
+            buffer.push(curr);
+          }
+        };
+      }
+      for (var i = 0; i < iovcnt; i++) {
+        var ptr = HEAP32[(((iov)+(i*8))>>2)];
+        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
+        for (var j = 0; j < len; j++) {
+          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
+        }
+        ret += len;
+      }
+      return ret;
+    } catch (e) {
+    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
+    return -e.errno;
+  }
+  }
+
+  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
+  try {
+   // ioctl
+      return 0;
+    } catch (e) {
+    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
+    return -e.errno;
+  }
+  }
+
+  function ___unlock() {}
+
+  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
+  try {
+   // close
+      var stream = SYSCALLS.getStreamFromFD();
+      FS.close(stream);
+      return 0;
+    } catch (e) {
+    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
+    return -e.errno;
+  }
+  }
+/* flush anything remaining in the buffer during shutdown */ __ATEXIT__.push(function() { var fflush = Module["_fflush"]; if (fflush) fflush(0); var printChar = ___syscall146.printChar; if (!printChar) return; var buffers = ___syscall146.buffers; if (buffers[1].length) printChar(1, 10); if (buffers[2].length) printChar(2, 10); });;
+STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
+
+staticSealed = true; // seal the static portion of memory
+
+STACK_MAX = STACK_BASE + TOTAL_STACK;
+
+DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
+
+assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");
+
+
+
+function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }
+
+function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }
+
+function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }
+
+function invoke_ii(index,a1) {
+  try {
+    return Module["dynCall_ii"](index,a1);
+  } catch(e) {
+    if (typeof e !== 'number' && e !== 'longjmp') throw e;
+    asm["setThrew"](1, 0);
+  }
+}
+
+function invoke_iiii(index,a1,a2,a3) {
+  try {
+    return Module["dynCall_iiii"](index,a1,a2,a3);
+  } catch(e) {
+    if (typeof e !== 'number' && e !== 'longjmp') throw e;
+    asm["setThrew"](1, 0);
+  }
+}
+
+function invoke_vi(index,a1) {
+  try {
+    Module["dynCall_vi"](index,a1);
+  } catch(e) {
+    if (typeof e !== 'number' && e !== 'longjmp') throw e;
+    asm["setThrew"](1, 0);
+  }
+}
+
+Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
+
+Module.asmLibraryArg = { "abort": abort, "assert": assert, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vi": nullFunc_vi, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___lock": ___lock, "_abort": _abort, "_pthread_cleanup_push": _pthread_cleanup_push, "___syscall6": ___syscall6, "_sbrk": _sbrk, "___syscall140": ___syscall140, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___syscall54": ___syscall54, "___unlock": ___unlock, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT };
+// EMSCRIPTEN_START_ASM
+var asm = (function(global, env, buffer) {
+  'almost asm';
+  
+  
+  var HEAP8 = new global.Int8Array(buffer);
+  var HEAP16 = new global.Int16Array(buffer);
+  var HEAP32 = new global.Int32Array(buffer);
+  var HEAPU8 = new global.Uint8Array(buffer);
+  var HEAPU16 = new global.Uint16Array(buffer);
+  var HEAPU32 = new global.Uint32Array(buffer);
+  var HEAPF32 = new global.Float32Array(buffer);
+  var HEAPF64 = new global.Float64Array(buffer);
+
+
+  var STACKTOP=env.STACKTOP|0;
+  var STACK_MAX=env.STACK_MAX|0;
+  var tempDoublePtr=env.tempDoublePtr|0;
+  var ABORT=env.ABORT|0;
+
+  var __THREW__ = 0;
+  var threwValue = 0;
+  var setjmpId = 0;
+  var undef = 0;
+  var nan = global.NaN, inf = global.Infinity;
+  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
+  var tempRet0 = 0;
+
+  var Math_floor=global.Math.floor;
+  var Math_abs=global.Math.abs;
+  var Math_sqrt=global.Math.sqrt;
+  var Math_pow=global.Math.pow;
+  var Math_cos=global.Math.cos;
+  var Math_sin=global.Math.sin;
+  var Math_tan=global.Math.tan;
+  var Math_acos=global.Math.acos;
+  var Math_asin=global.Math.asin;
+  var Math_atan=global.Math.atan;
+  var Math_atan2=global.Math.atan2;
+  var Math_exp=global.Math.exp;
+  var Math_log=global.Math.log;
+  var Math_ceil=global.Math.ceil;
+  var Math_imul=global.Math.imul;
+  var Math_min=global.Math.min;
+  var Math_clz32=global.Math.clz32;
+  var abort=env.abort;
+  var assert=env.assert;
+  var abortStackOverflow=env.abortStackOverflow;
+  var nullFunc_ii=env.nullFunc_ii;
+  var nullFunc_iiii=env.nullFunc_iiii;
+  var nullFunc_vi=env.nullFunc_vi;
+  var invoke_ii=env.invoke_ii;
+  var invoke_iiii=env.invoke_iiii;
+  var invoke_vi=env.invoke_vi;
+  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
+  var ___lock=env.___lock;
+  var _abort=env._abort;
+  var _pthread_cleanup_push=env._pthread_cleanup_push;
+  var ___syscall6=env.___syscall6;
+  var _sbrk=env._sbrk;
+  var ___syscall140=env.___syscall140;
+  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
+  var ___syscall54=env.___syscall54;
+  var ___unlock=env.___unlock;
+  var ___syscall146=env.___syscall146;
+  var tempFloat = 0.0;
+
+// EMSCRIPTEN_START_FUNCS
+
+function stackAlloc(size) {
+  size = size|0;
+  var ret = 0;
+  ret = STACKTOP;
+  STACKTOP = (STACKTOP + size)|0;
+  STACKTOP = (STACKTOP + 15)&-16;
+  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);
+
+  return ret|0;
+}
+function stackSave() {
+  return STACKTOP|0;
+}
+function stackRestore(top) {
+  top = top|0;
+  STACKTOP = top;
+}
+function establishStackSpace(stackBase, stackMax) {
+  stackBase = stackBase|0;
+  stackMax = stackMax|0;
+  STACKTOP = stackBase;
+  STACK_MAX = stackMax;
+}
+
+function setThrew(threw, value) {
+  threw = threw|0;
+  value = value|0;
+  if ((__THREW__|0) == 0) {
+    __THREW__ = threw;
+    threwValue = value;
+  }
+}
+
+function setTempRet0(value) {
+  value = value|0;
+  tempRet0 = value;
+}
+function getTempRet0() {
+  return tempRet0|0;
+}
+
+function _main() {
+ var $0 = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
+ $0 = 0;
+ STACKTOP = sp;return 0;
+}
+function ___stdio_close($f) {
+ $f = $f|0;
+ var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
+ $vararg_buffer = sp;
+ $0 = ((($f)) + 60|0);
+ $1 = HEAP32[$0>>2]|0;
+ HEAP32[$vararg_buffer>>2] = $1;
+ $2 = (___syscall6(6,($vararg_buffer|0))|0);
+ $3 = (___syscall_ret($2)|0);
+ STACKTOP = sp;return ($3|0);
+}
+function ___syscall_ret($r) {
+ $r = $r|0;
+ var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ $0 = ($r>>>0)>(4294963200);
+ if ($0) {
+  $1 = (0 - ($r))|0;
+  $2 = (___errno_location()|0);
+  HEAP32[$2>>2] = $1;
+  $$0 = -1;
+ } else {
+  $$0 = $r;
+ }
+ return ($$0|0);
+}
+function ___errno_location() {
+ var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ $0 = HEAP32[31]|0;
+ $1 = ($0|0)==(0|0);
+ if ($1) {
+  $$0 = 168;
+ } else {
+  $2 = (_pthread_self()|0);
+  $3 = ((($2)) + 64|0);
+  $4 = HEAP32[$3>>2]|0;
+  $$0 = $4;
+ }
+ return ($$0|0);
+}
+function ___stdio_write($f,$buf,$len) {
+ $f = $f|0;
+ $buf = $buf|0;
+ $len = $len|0;
+ var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
+ var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
+ var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0;
+ var $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
+ $vararg_buffer3 = sp + 16|0;
+ $vararg_buffer = sp;
+ $iovs = sp + 32|0;
+ $0 = ((($f)) + 28|0);
+ $1 = HEAP32[$0>>2]|0;
+ HEAP32[$iovs>>2] = $1;
+ $2 = ((($iovs)) + 4|0);
+ $3 = ((($f)) + 20|0);
+ $4 = HEAP32[$3>>2]|0;
+ $5 = (($4) - ($1))|0;
+ HEAP32[$2>>2] = $5;
+ $6 = ((($iovs)) + 8|0);
+ HEAP32[$6>>2] = $buf;
+ $7 = ((($iovs)) + 12|0);
+ HEAP32[$7>>2] = $len;
+ $8 = (($5) + ($len))|0;
+ $9 = ((($f)) + 60|0);
+ $10 = ((($f)) + 44|0);
+ $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $8;
+ while(1) {
+  $11 = HEAP32[31]|0;
+  $12 = ($11|0)==(0|0);
+  if ($12) {
+   $16 = HEAP32[$9>>2]|0;
+   HEAP32[$vararg_buffer3>>2] = $16;
+   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
+   HEAP32[$vararg_ptr6>>2] = $iov$0;
+   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
+   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
+   $17 = (___syscall146(146,($vararg_buffer3|0))|0);
+   $18 = (___syscall_ret($17)|0);
+   $cnt$0 = $18;
+  } else {
+   _pthread_cleanup_push((4|0),($f|0));
+   $13 = HEAP32[$9>>2]|0;
+   HEAP32[$vararg_buffer>>2] = $13;
+   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
+   HEAP32[$vararg_ptr1>>2] = $iov$0;
+   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
+   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
+   $14 = (___syscall146(146,($vararg_buffer|0))|0);
+   $15 = (___syscall_ret($14)|0);
+   _pthread_cleanup_pop(0);
+   $cnt$0 = $15;
+  }
+  $19 = ($rem$0|0)==($cnt$0|0);
+  if ($19) {
+   label = 6;
+   break;
+  }
+  $26 = ($cnt$0|0)<(0);
+  if ($26) {
+   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
+   label = 8;
+   break;
+  }
+  $34 = (($rem$0) - ($cnt$0))|0;
+  $35 = ((($iov$0)) + 4|0);
+  $36 = HEAP32[$35>>2]|0;
+  $37 = ($cnt$0>>>0)>($36>>>0);
+  if ($37) {
+   $38 = HEAP32[$10>>2]|0;
+   HEAP32[$0>>2] = $38;
+   HEAP32[$3>>2] = $38;
+   $39 = (($cnt$0) - ($36))|0;
+   $40 = ((($iov$0)) + 8|0);
+   $41 = (($iovcnt$0) + -1)|0;
+   $$phi$trans$insert = ((($iov$0)) + 12|0);
+   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
+   $49 = $$pre;$cnt$1 = $39;$iov$1 = $40;$iovcnt$1 = $41;
+  } else {
+   $42 = ($iovcnt$0|0)==(2);
+   if ($42) {
+    $43 = HEAP32[$0>>2]|0;
+    $44 = (($43) + ($cnt$0)|0);
+    HEAP32[$0>>2] = $44;
+    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
+   } else {
+    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
+   }
+  }
+  $45 = HEAP32[$iov$1>>2]|0;
+  $46 = (($45) + ($cnt$1)|0);
+  HEAP32[$iov$1>>2] = $46;
+  $47 = ((($iov$1)) + 4|0);
+  $48 = (($49) - ($cnt$1))|0;
+  HEAP32[$47>>2] = $48;
+  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $34;
+ }
+ if ((label|0) == 6) {
+  $20 = HEAP32[$10>>2]|0;
+  $21 = ((($f)) + 48|0);
+  $22 = HEAP32[$21>>2]|0;
+  $23 = (($20) + ($22)|0);
+  $24 = ((($f)) + 16|0);
+  HEAP32[$24>>2] = $23;
+  $25 = $20;
+  HEAP32[$0>>2] = $25;
+  HEAP32[$3>>2] = $25;
+  $$0 = $len;
+ }
+ else if ((label|0) == 8) {
+  $27 = ((($f)) + 16|0);
+  HEAP32[$27>>2] = 0;
+  HEAP32[$0>>2] = 0;
+  HEAP32[$3>>2] = 0;
+  $28 = HEAP32[$f>>2]|0;
+  $29 = $28 | 32;
+  HEAP32[$f>>2] = $29;
+  $30 = ($iovcnt$0$lcssa12|0)==(2);
+  if ($30) {
+   $$0 = 0;
+  } else {
+   $31 = ((($iov$0$lcssa11)) + 4|0);
+   $32 = HEAP32[$31>>2]|0;
+   $33 = (($len) - ($32))|0;
+   $$0 = $33;
+  }
+ }
+ STACKTOP = sp;return ($$0|0);
+}
+function _cleanup($p) {
+ $p = $p|0;
+ var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ $0 = ((($p)) + 68|0);
+ $1 = HEAP32[$0>>2]|0;
+ $2 = ($1|0)==(0);
+ if ($2) {
+  ___unlockfile($p);
+ }
+ return;
+}
+function ___unlockfile($f) {
+ $f = $f|0;
+ var label = 0, sp = 0;
+ sp = STACKTOP;
+ return;
+}
+function ___stdio_seek($f,$off,$whence) {
+ $f = $f|0;
+ $off = $off|0;
+ $whence = $whence|0;
+ var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
+ $vararg_buffer = sp;
+ $ret = sp + 20|0;
+ $0 = ((($f)) + 60|0);
+ $1 = HEAP32[$0>>2]|0;
+ HEAP32[$vararg_buffer>>2] = $1;
+ $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
+ HEAP32[$vararg_ptr1>>2] = 0;
+ $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
+ HEAP32[$vararg_ptr2>>2] = $off;
+ $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
+ HEAP32[$vararg_ptr3>>2] = $ret;
+ $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
+ HEAP32[$vararg_ptr4>>2] = $whence;
+ $2 = (___syscall140(140,($vararg_buffer|0))|0);
+ $3 = (___syscall_ret($2)|0);
+ $4 = ($3|0)<(0);
+ if ($4) {
+  HEAP32[$ret>>2] = -1;
+  $5 = -1;
+ } else {
+  $$pre = HEAP32[$ret>>2]|0;
+  $5 = $$pre;
+ }
+ STACKTOP = sp;return ($5|0);
+}
+function ___stdout_write($f,$buf,$len) {
+ $f = $f|0;
+ $buf = $buf|0;
+ $len = $len|0;
+ var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
+ $vararg_buffer = sp;
+ $tio = sp + 12|0;
+ $0 = ((($f)) + 36|0);
+ HEAP32[$0>>2] = 5;
+ $1 = HEAP32[$f>>2]|0;
+ $2 = $1 & 64;
+ $3 = ($2|0)==(0);
+ if ($3) {
+  $4 = ((($f)) + 60|0);
+  $5 = HEAP32[$4>>2]|0;
+  HEAP32[$vararg_buffer>>2] = $5;
+  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
+  HEAP32[$vararg_ptr1>>2] = 21505;
+  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
+  HEAP32[$vararg_ptr2>>2] = $tio;
+  $6 = (___syscall54(54,($vararg_buffer|0))|0);
+  $7 = ($6|0)==(0);
+  if (!($7)) {
+   $8 = ((($f)) + 75|0);
+   HEAP8[$8>>0] = -1;
+  }
+ }
+ $9 = (___stdio_write($f,$buf,$len)|0);
+ STACKTOP = sp;return ($9|0);
+}
+function ___lockfile($f) {
+ $f = $f|0;
+ var label = 0, sp = 0;
+ sp = STACKTOP;
+ return 0;
+}
+function _fflush($f) {
+ $f = $f|0;
+ var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
+ var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ $0 = ($f|0)==(0|0);
+ do {
+  if ($0) {
+   $7 = HEAP32[30]|0;
+   $8 = ($7|0)==(0|0);
+   if ($8) {
+    $27 = 0;
+   } else {
+    $9 = HEAP32[30]|0;
+    $10 = (_fflush($9)|0);
+    $27 = $10;
+   }
+   ___lock(((152)|0));
+   $$012 = HEAP32[(148)>>2]|0;
+   $11 = ($$012|0)==(0|0);
+   if ($11) {
+    $r$0$lcssa = $27;
+   } else {
+    $$014 = $$012;$r$03 = $27;
+    while(1) {
+     $12 = ((($$014)) + 76|0);
+     $13 = HEAP32[$12>>2]|0;
+     $14 = ($13|0)>(-1);
+     if ($14) {
+      $15 = (___lockfile($$014)|0);
+      $23 = $15;
+     } else {
+      $23 = 0;
+     }
+     $16 = ((($$014)) + 20|0);
+     $17 = HEAP32[$16>>2]|0;
+     $18 = ((($$014)) + 28|0);
+     $19 = HEAP32[$18>>2]|0;
+     $20 = ($17>>>0)>($19>>>0);
+     if ($20) {
+      $21 = (___fflush_unlocked($$014)|0);
+      $22 = $21 | $r$03;
+      $r$1 = $22;
+     } else {
+      $r$1 = $r$03;
+     }
+     $24 = ($23|0)==(0);
+     if (!($24)) {
+      ___unlockfile($$014);
+     }
+     $25 = ((($$014)) + 56|0);
+     $$01 = HEAP32[$25>>2]|0;
+     $26 = ($$01|0)==(0|0);
+     if ($26) {
+      $r$0$lcssa = $r$1;
+      break;
+     } else {
+      $$014 = $$01;$r$03 = $r$1;
+     }
+    }
+   }
+   ___unlock(((152)|0));
+   $$0 = $r$0$lcssa;
+  } else {
+   $1 = ((($f)) + 76|0);
+   $2 = HEAP32[$1>>2]|0;
+   $3 = ($2|0)>(-1);
+   if (!($3)) {
+    $4 = (___fflush_unlocked($f)|0);
+    $$0 = $4;
+    break;
+   }
+   $5 = (___lockfile($f)|0);
+   $phitmp = ($5|0)==(0);
+   $6 = (___fflush_unlocked($f)|0);
+   if ($phitmp) {
+    $$0 = $6;
+   } else {
+    ___unlockfile($f);
+    $$0 = $6;
+   }
+  }
+ } while(0);
+ return ($$0|0);
+}
+function ___fflush_unlocked($f) {
+ $f = $f|0;
+ var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
+ var $9 = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ $0 = ((($f)) + 20|0);
+ $1 = HEAP32[$0>>2]|0;
+ $2 = ((($f)) + 28|0);
+ $3 = HEAP32[$2>>2]|0;
+ $4 = ($1>>>0)>($3>>>0);
+ if ($4) {
+  $5 = ((($f)) + 36|0);
+  $6 = HEAP32[$5>>2]|0;
+  (FUNCTION_TABLE_iiii[$6 & 7]($f,0,0)|0);
+  $7 = HEAP32[$0>>2]|0;
+  $8 = ($7|0)==(0|0);
+  if ($8) {
+   $$0 = -1;
+  } else {
+   label = 3;
+  }
+ } else {
+  label = 3;
+ }
+ if ((label|0) == 3) {
+  $9 = ((($f)) + 4|0);
+  $10 = HEAP32[$9>>2]|0;
+  $11 = ((($f)) + 8|0);
+  $12 = HEAP32[$11>>2]|0;
+  $13 = ($10>>>0)<($12>>>0);
+  if ($13) {
+   $14 = ((($f)) + 40|0);
+   $15 = HEAP32[$14>>2]|0;
+   $16 = $10;
+   $17 = $12;
+   $18 = (($16) - ($17))|0;
+   (FUNCTION_TABLE_iiii[$15 & 7]($f,$18,1)|0);
+  }
+  $19 = ((($f)) + 16|0);
+  HEAP32[$19>>2] = 0;
+  HEAP32[$2>>2] = 0;
+  HEAP32[$0>>2] = 0;
+  HEAP32[$11>>2] = 0;
+  HEAP32[$9>>2] = 0;
+  $$0 = 0;
+ }
+ return ($$0|0);
+}
+function _malloc($bytes) {
+ $bytes = $bytes|0;
+ var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i13 = 0, $$pre$i16$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i14Z2D = 0, $$pre$phi$i17$iZ2D = 0;
+ var $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre71 = 0, $$pre9$i$i = 0, $$rsize$0$i = 0, $$rsize$4$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
+ var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
+ var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
+ var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $107 = 0, $108 = 0;
+ var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
+ var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
+ var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
+ var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
+ var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
+ var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
+ var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
+ var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
+ var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
+ var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
+ var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
+ var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
+ var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
+ var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
+ var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
+ var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
+ var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
+ var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
+ var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
+ var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
+ var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
+ var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
+ var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
+ var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
+ var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
+ var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
+ var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
+ var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
+ var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
+ var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
+ var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
+ var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
+ var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
+ var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
+ var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
+ var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
+ var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
+ var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
+ var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
+ var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
+ var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
+ var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
+ var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
+ var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
+ var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
+ var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
+ var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
+ var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
+ var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
+ var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0;
+ var $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$1$i9 = 0, $R$1$i9$lcssa = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i11 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $RP$1$i8 = 0, $RP$1$i8$lcssa = 0, $T$0$i = 0, $T$0$i$i = 0, $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0;
+ var $T$0$i18$i = 0, $T$0$i18$i$lcssa = 0, $T$0$i18$i$lcssa139 = 0, $br$2$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i12 = 0, $exitcond$i$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $magic$i$i = 0, $nb$0 = 0, $not$$i$i = 0, $not$$i20$i = 0, $not$7$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i17 = 0, $or$cond1$i = 0, $or$cond1$i16 = 0;
+ var $or$cond10$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond48$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i5 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$$i = 0, $sizebits$0$i = 0;
+ var $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$068$i = 0, $sp$068$i$lcssa = 0, $sp$167$i = 0, $sp$167$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$746$i = 0, $tsize$745$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i6 = 0;
+ var $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
+ $magic$i$i = sp;
+ $0 = ($bytes>>>0)<(245);
+ do {
+  if ($0) {
+   $1 = ($bytes>>>0)<(11);
+   $2 = (($bytes) + 11)|0;
+   $3 = $2 & -8;
+   $4 = $1 ? 16 : $3;
+   $5 = $4 >>> 3;
+   $6 = HEAP32[43]|0;
+   $7 = $6 >>> $5;
+   $8 = $7 & 3;
+   $9 = ($8|0)==(0);
+   if (!($9)) {
+    $10 = $7 & 1;
+    $11 = $10 ^ 1;
+    $12 = (($11) + ($5))|0;
+    $13 = $12 << 1;
+    $14 = (212 + ($13<<2)|0);
+    $15 = ((($14)) + 8|0);
+    $16 = HEAP32[$15>>2]|0;
+    $17 = ((($16)) + 8|0);
+    $18 = HEAP32[$17>>2]|0;
+    $19 = ($14|0)==($18|0);
+    do {
+     if ($19) {
+      $20 = 1 << $12;
+      $21 = $20 ^ -1;
+      $22 = $6 & $21;
+      HEAP32[43] = $22;
+     } else {
+      $23 = HEAP32[(188)>>2]|0;
+      $24 = ($18>>>0)<($23>>>0);
+      if ($24) {
+       _abort();
+       // unreachable;
+      }
+      $25 = ((($18)) + 12|0);
+      $26 = HEAP32[$25>>2]|0;
+      $27 = ($26|0)==($16|0);
+      if ($27) {
+       HEAP32[$25>>2] = $14;
+       HEAP32[$15>>2] = $18;
+       break;
+      } else {
+       _abort();
+       // unreachable;
+      }
+     }
+    } while(0);
+    $28 = $12 << 3;
+    $29 = $28 | 3;
+    $30 = ((($16)) + 4|0);
+    HEAP32[$30>>2] = $29;
+    $31 = (($16) + ($28)|0);
+    $32 = ((($31)) + 4|0);
+    $33 = HEAP32[$32>>2]|0;
+    $34 = $33 | 1;
+    HEAP32[$32>>2] = $34;
+    $$0 = $17;
+    STACKTOP = sp;return ($$0|0);
+   }
+   $35 = HEAP32[(180)>>2]|0;
+   $36 = ($4>>>0)>($35>>>0);
+   if ($36) {
+    $37 = ($7|0)==(0);
+    if (!($37)) {
+     $38 = $7 << $5;
+     $39 = 2 << $5;
+     $40 = (0 - ($39))|0;
+     $41 = $39 | $40;
+     $42 = $38 & $41;
+     $43 = (0 - ($42))|0;
+     $44 = $42 & $43;
+     $45 = (($44) + -1)|0;
+     $46 = $45 >>> 12;
+     $47 = $46 & 16;
+     $48 = $45 >>> $47;
+     $49 = $48 >>> 5;
+     $50 = $49 & 8;
+     $51 = $50 | $47;
+     $52 = $48 >>> $50;
+     $53 = $52 >>> 2;
+     $54 = $53 & 4;
+     $55 = $51 | $54;
+     $56 = $52 >>> $54;
+     $57 = $56 >>> 1;
+     $58 = $57 & 2;
+     $59 = $55 | $58;
+     $60 = $56 >>> $58;
+     $61 = $60 >>> 1;
+     $62 = $61 & 1;
+     $63 = $59 | $62;
+     $64 = $60 >>> $62;
+     $65 = (($63) + ($64))|0;
+     $66 = $65 << 1;
+     $67 = (212 + ($66<<2)|0);
+     $68 = ((($67)) + 8|0);
+     $69 = HEAP32[$68>>2]|0;
+     $70 = ((($69)) + 8|0);
+     $71 = HEAP32[$70>>2]|0;
+     $72 = ($67|0)==($71|0);
+     do {
+      if ($72) {
+       $73 = 1 << $65;
+       $74 = $73 ^ -1;
+       $75 = $6 & $74;
+       HEAP32[43] = $75;
+       $89 = $35;
+      } else {
+       $76 = HEAP32[(188)>>2]|0;
+       $77 = ($71>>>0)<($76>>>0);
+       if ($77) {
+        _abort();
+        // unreachable;
+       }
+       $78 = ((($71)) + 12|0);
+       $79 = HEAP32[$78>>2]|0;
+       $80 = ($79|0)==($69|0);
+       if ($80) {
+        HEAP32[$78>>2] = $67;
+        HEAP32[$68>>2] = $71;
+        $$pre = HEAP32[(180)>>2]|0;
+        $89 = $$pre;
+        break;
+       } else {
+        _abort();
+        // unreachable;
+       }
+      }
+     } while(0);
+     $81 = $65 << 3;
+     $82 = (($81) - ($4))|0;
+     $83 = $4 | 3;
+     $84 = ((($69)) + 4|0);
+     HEAP32[$84>>2] = $83;
+     $85 = (($69) + ($4)|0);
+     $86 = $82 | 1;
+     $87 = ((($85)) + 4|0);
+     HEAP32[$87>>2] = $86;
+     $88 = (($85) + ($82)|0);
+     HEAP32[$88>>2] = $82;
+     $90 = ($89|0)==(0);
+     if (!($90)) {
+      $91 = HEAP32[(192)>>2]|0;
+      $92 = $89 >>> 3;
+      $93 = $92 << 1;
+      $94 = (212 + ($93<<2)|0);
+      $95 = HEAP32[43]|0;
+      $96 = 1 << $92;
+      $97 = $95 & $96;
+      $98 = ($97|0)==(0);
+      if ($98) {
+       $99 = $95 | $96;
+       HEAP32[43] = $99;
+       $$pre71 = ((($94)) + 8|0);
+       $$pre$phiZ2D = $$pre71;$F4$0 = $94;
+      } else {
+       $100 = ((($94)) + 8|0);
+       $101 = HEAP32[$100>>2]|0;
+       $102 = HEAP32[(188)>>2]|0;
+       $103 = ($101>>>0)<($102>>>0);
+       if ($103) {
+        _abort();
+        // unreachable;
+       } else {
+        $$pre$phiZ2D = $100;$F4$0 = $101;
+       }
+      }
+      HEAP32[$$pre$phiZ2D>>2] = $91;
+      $104 = ((($F4$0)) + 12|0);
+      HEAP32[$104>>2] = $91;
+      $105 = ((($91)) + 8|0);
+      HEAP32[$105>>2] = $F4$0;
+      $106 = ((($91)) + 12|0);
+      HEAP32[$106>>2] = $94;
+     }
+     HEAP32[(180)>>2] = $82;
+     HEAP32[(192)>>2] = $85;
+     $$0 = $70;
+     STACKTOP = sp;return ($$0|0);
+    }
+    $107 = HEAP32[(176)>>2]|0;
+    $108 = ($107|0)==(0);
+    if ($108) {
+     $nb$0 = $4;
+    } else {
+     $109 = (0 - ($107))|0;
+     $110 = $107 & $109;
+     $111 = (($110) + -1)|0;
+     $112 = $111 >>> 12;
+     $113 = $112 & 16;
+     $114 = $111 >>> $113;
+     $115 = $114 >>> 5;
+     $116 = $115 & 8;
+     $117 = $116 | $113;
+     $118 = $114 >>> $116;
+     $119 = $118 >>> 2;
+     $120 = $119 & 4;
+     $121 = $117 | $120;
+     $122 = $118 >>> $120;
+     $123 = $122 >>> 1;
+     $124 = $123 & 2;
+     $125 = $121 | $124;
+     $126 = $122 >>> $124;
+     $127 = $126 >>> 1;
+     $128 = $127 & 1;
+     $129 = $125 | $128;
+     $130 = $126 >>> $128;
+     $131 = (($129) + ($130))|0;
+     $132 = (476 + ($131<<2)|0);
+     $133 = HEAP32[$132>>2]|0;
+     $134 = ((($133)) + 4|0);
+     $135 = HEAP32[$134>>2]|0;
+     $136 = $135 & -8;
+     $137 = (($136) - ($4))|0;
+     $rsize$0$i = $137;$t$0$i = $133;$v$0$i = $133;
+     while(1) {
+      $138 = ((($t$0$i)) + 16|0);
+      $139 = HEAP32[$138>>2]|0;
+      $140 = ($139|0)==(0|0);
+      if ($140) {
+       $141 = ((($t$0$i)) + 20|0);
+       $142 = HEAP32[$141>>2]|0;
+       $143 = ($142|0)==(0|0);
+       if ($143) {
+        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
+        break;
+       } else {
+        $145 = $142;
+       }
+      } else {
+       $145 = $139;
+      }
+      $144 = ((($145)) + 4|0);
+      $146 = HEAP32[$144>>2]|0;
+      $147 = $146 & -8;
+      $148 = (($147) - ($4))|0;
+      $149 = ($148>>>0)<($rsize$0$i>>>0);
+      $$rsize$0$i = $149 ? $148 : $rsize$0$i;
+      $$v$0$i = $149 ? $145 : $v$0$i;
+      $rsize$0$i = $$rsize$0$i;$t$0$i = $145;$v$0$i = $$v$0$i;
+     }
+     $150 = HEAP32[(188)>>2]|0;
+     $151 = ($v$0$i$lcssa>>>0)<($150>>>0);
+     if ($151) {
+      _abort();
+      // unreachable;
+     }
+     $152 = (($v$0$i$lcssa) + ($4)|0);
+     $153 = ($v$0$i$lcssa>>>0)<($152>>>0);
+     if (!($153)) {
+      _abort();
+      // unreachable;
+     }
+     $154 = ((($v$0$i$lcssa)) + 24|0);
+     $155 = HEAP32[$154>>2]|0;
+     $156 = ((($v$0$i$lcssa)) + 12|0);
+     $157 = HEAP32[$156>>2]|0;
+     $158 = ($157|0)==($v$0$i$lcssa|0);
+     do {
+      if ($158) {
+       $168 = ((($v$0$i$lcssa)) + 20|0);
+       $169 = HEAP32[$168>>2]|0;
+       $170 = ($169|0)==(0|0);
+       if ($170) {
+        $171 = ((($v$0$i$lcssa)) + 16|0);
+        $172 = HEAP32[$171>>2]|0;
+        $173 = ($172|0)==(0|0);
+        if ($173) {
+         $R$3$i = 0;
+         break;
+        } else {
+         $R$1$i = $172;$RP$1$i = $171;
+        }
+       } else {
+        $R$1$i = $169;$RP$1$i = $168;
+       }
+       while(1) {
+        $174 = ((($R$1$i)) + 20|0);
+        $175 = HEAP32[$174>>2]|0;
+        $176 = ($175|0)==(0|0);
+        if (!($176)) {
+         $R$1$i = $175;$RP$1$i = $174;
+         continue;
+        }
+        $177 = ((($R$1$i)) + 16|0);
+        $178 = HEAP32[$177>>2]|0;
+        $179 = ($178|0)==(0|0);
+        if ($179) {
+         $R$1$i$lcssa = $R$1$i;$RP$1$i$lcssa = $RP$1$i;
+         break;
+        } else {
+         $R$1$i = $178;$RP$1$i = $177;
+        }
+       }
+       $180 = ($RP$1$i$lcssa>>>0)<($150>>>0);
+       if ($180) {
+        _abort();
+        // unreachable;
+       } else {
+        HEAP32[$RP$1$i$lcssa>>2] = 0;
+        $R$3$i = $R$1$i$lcssa;
+        break;
+       }
+      } else {
+       $159 = ((($v$0$i$lcssa)) + 8|0);
+       $160 = HEAP32[$159>>2]|0;
+       $161 = ($160>>>0)<($150>>>0);
+       if ($161) {
+        _abort();
+        // unreachable;
+       }
+       $162 = ((($160)) + 12|0);
+       $163 = HEAP32[$162>>2]|0;
+       $164 = ($163|0)==($v$0$i$lcssa|0);
+       if (!($164)) {
+        _abort();
+        // unreachable;
+       }
+       $165 = ((($157)) + 8|0);
+       $166 = HEAP32[$165>>2]|0;
+       $167 = ($166|0)==($v$0$i$lcssa|0);
+       if ($167) {
+        HEAP32[$162>>2] = $157;
+        HEAP32[$165>>2] = $160;
+        $R$3$i = $157;
+        break;
+       } else {
+        _abort();
+        // unreachable;
+       }
+      }
+     } while(0);
+     $181 = ($155|0)==(0|0);
+     do {
+      if (!($181)) {
+       $182 = ((($v$0$i$lcssa)) + 28|0);
+       $183 = HEAP32[$182>>2]|0;
+       $184 = (476 + ($183<<2)|0);
+       $185 = HEAP32[$184>>2]|0;
+       $186 = ($v$0$i$lcssa|0)==($185|0);
+       if ($186) {
+        HEAP32[$184>>2] = $R$3$i;
+        $cond$i = ($R$3$i|0)==(0|0);
+        if ($cond$i) {
+         $187 = 1 << $183;
+         $188 = $187 ^ -1;
+         $189 = HEAP32[(176)>>2]|0;
+         $190 = $189 & $188;
+         HEAP32[(176)>>2] = $190;
+         break;
+        }
+       } else {
+        $191 = HEAP32[(188)>>2]|0;
+        $192 = ($155>>>0)<($191>>>0);
+        if ($192) {
+         _abort();
+         // unreachable;
+        }
+        $193 = ((($155)) + 16|0);
+        $194 = HEAP32[$193>>2]|0;
+        $195 = ($194|0)==($v$0$i$lcssa|0);
+        if ($195) {
+         HEAP32[$193>>2] = $R$3$i;
+        } else {
+         $196 = ((($155)) + 20|0);
+         HEAP32[$196>>2] = $R$3$i;
+        }
+        $197 = ($R$3$i|0)==(0|0);
+        if ($197) {
+         break;
+        }
+       }
+       $198 = HEAP32[(188)>>2]|0;
+       $199 = ($R$3$i>>>0)<($198>>>0);
+       if ($199) {
+        _abort();
+        // unreachable;
+       }
+       $200 = ((($R$3$i)) + 24|0);
+       HEAP32[$200>>2] = $155;
+       $201 = ((($v$0$i$lcssa)) + 16|0);
+       $202 = HEAP32[$201>>2]|0;
+       $203 = ($202|0)==(0|0);
+       do {
+        if (!($203)) {
+         $204 = ($202>>>0)<($198>>>0);
+         if ($204) {
+          _abort();
+          // unreachable;
+         } else {
+          $205 = ((($R$3$i)) + 16|0);
+          HEAP32[$205>>2] = $202;
+          $206 = ((($202)) + 24|0);
+          HEAP32[$206>>2] = $R$3$i;
+          break;
+         }
+        }
+       } while(0);
+       $207 = ((($v$0$i$lcssa)) + 20|0);
+       $208 = HEAP32[$207>>2]|0;
+       $209 = ($208|0)==(0|0);
+       if (!($209)) {
+        $210 = HEAP32[(188)>>2]|0;
+        $211 = ($208>>>0)<($210>>>0);
+        if ($211) {
+         _abort();
+         // unreachable;
+        } else {
+         $212 = ((($R$3$i)) + 20|0);
+         HEAP32[$212>>2] = $208;
+         $213 = ((($208)) + 24|0);
+         HEAP32[$213>>2] = $R$3$i;
+         break;
+        }
+       }
+      }
+     } while(0);
+     $214 = ($rsize$0$i$lcssa>>>0)<(16);
+     if ($214) {
+      $215 = (($rsize$0$i$lcssa) + ($4))|0;
+      $216 = $215 | 3;
+      $217 = ((($v$0$i$lcssa)) + 4|0);
+      HEAP32[$217>>2] = $216;
+      $218 = (($v$0$i$lcssa) + ($215)|0);
+      $219 = ((($218)) + 4|0);
+      $220 = HEAP32[$219>>2]|0;
+      $221 = $220 | 1;
+      HEAP32[$219>>2] = $221;
+     } else {
+      $222 = $4 | 3;
+      $223 = ((($v$0$i$lcssa)) + 4|0);
+      HEAP32[$223>>2] = $222;
+      $224 = $rsize$0$i$lcssa | 1;
+      $225 = ((($152)) + 4|0);
+      HEAP32[$225>>2] = $224;
+      $226 = (($152) + ($rsize$0$i$lcssa)|0);
+      HEAP32[$226>>2] = $rsize$0$i$lcssa;
+      $227 = HEAP32[(180)>>2]|0;
+      $228 = ($227|0)==(0);
+      if (!($228)) {
+       $229 = HEAP32[(192)>>2]|0;
+       $230 = $227 >>> 3;
+       $231 = $230 << 1;
+       $232 = (212 + ($231<<2)|0);
+       $233 = HEAP32[43]|0;
+       $234 = 1 << $230;
+       $235 = $233 & $234;
+       $236 = ($235|0)==(0);
+       if ($236) {
+        $237 = $233 | $234;
+        HEAP32[43] = $237;
+        $$pre$i = ((($232)) + 8|0);
+        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $232;
+       } else {
+        $238 = ((($232)) + 8|0);
+        $239 = HEAP32[$238>>2]|0;
+        $240 = HEAP32[(188)>>2]|0;
+        $241 = ($239>>>0)<($240>>>0);
+        if ($241) {
+         _abort();
+         // unreachable;
+        } else {
+         $$pre$phi$iZ2D = $238;$F1$0$i = $239;
+        }
+       }
+       HEAP32[$$pre$phi$iZ2D>>2] = $229;
+       $242 = ((($F1$0$i)) + 12|0);
+       HEAP32[$242>>2] = $229;
+       $243 = ((($229)) + 8|0);
+       HEAP32[$243>>2] = $F1$0$i;
+       $244 = ((($229)) + 12|0);
+       HEAP32[$244>>2] = $232;
+      }
+      HEAP32[(180)>>2] = $rsize$0$i$lcssa;
+      HEAP32[(192)>>2] = $152;
+     }
+     $245 = ((($v$0$i$lcssa)) + 8|0);
+     $$0 = $245;
+     STACKTOP = sp;return ($$0|0);
+    }
+   } else {
+    $nb$0 = $4;
+   }
+  } else {
+   $246 = ($bytes>>>0)>(4294967231);
+   if ($246) {
+    $nb$0 = -1;
+   } else {
+    $247 = (($bytes) + 11)|0;
+    $248 = $247 & -8;
+    $249 = HEAP32[(176)>>2]|0;
+    $250 = ($249|0)==(0);
+    if ($250) {
+     $nb$0 = $248;
+    } else {
+     $251 = (0 - ($248))|0;
+     $252 = $247 >>> 8;
+     $253 = ($252|0)==(0);
+     if ($253) {
+      $idx$0$i = 0;
+     } else {
+      $254 = ($248>>>0)>(16777215);
+      if ($254) {
+       $idx$0$i = 31;
+      } else {
+       $255 = (($252) + 1048320)|0;
+       $256 = $255 >>> 16;
+       $257 = $256 & 8;
+       $258 = $252 << $257;
+       $259 = (($258) + 520192)|0;
+       $260 = $259 >>> 16;
+       $261 = $260 & 4;
+       $262 = $261 | $257;
+       $263 = $258 << $261;
+       $264 = (($263) + 245760)|0;
+       $265 = $264 >>> 16;
+       $266 = $265 & 2;
+       $267 = $262 | $266;
+       $268 = (14 - ($267))|0;
+       $269 = $263 << $266;
+       $270 = $269 >>> 15;
+       $271 = (($268) + ($270))|0;
+       $272 = $271 << 1;
+       $273 = (($271) + 7)|0;
+       $274 = $248 >>> $273;
+       $275 = $274 & 1;
+       $276 = $275 | $272;
+       $idx$0$i = $276;
+      }
+     }
+     $277 = (476 + ($idx$0$i<<2)|0);
+     $278 = HEAP32[$277>>2]|0;
+     $279 = ($278|0)==(0|0);
+     L123: do {
+      if ($279) {
+       $rsize$3$i = $251;$t$2$i = 0;$v$3$i = 0;
+       label = 86;
+      } else {
+       $280 = ($idx$0$i|0)==(31);
+       $281 = $idx$0$i >>> 1;
+       $282 = (25 - ($281))|0;
+       $283 = $280 ? 0 : $282;
+       $284 = $248 << $283;
+       $rsize$0$i5 = $251;$rst$0$i = 0;$sizebits$0$i = $284;$t$0$i4 = $278;$v$0$i6 = 0;
+       while(1) {
+        $285 = ((($t$0$i4)) + 4|0);
+        $286 = HEAP32[$285>>2]|0;
+        $287 = $286 & -8;
+        $288 = (($287) - ($248))|0;
+        $289 = ($288>>>0)<($rsize$0$i5>>>0);
+        if ($289) {
+         $290 = ($287|0)==($248|0);
+         if ($290) {
+          $rsize$412$i = $288;$t$411$i = $t$0$i4;$v$413$i = $t$0$i4;
+          label = 90;
+          break L123;
+         } else {
+          $rsize$1$i = $288;$v$1$i = $t$0$i4;
+         }
+        } else {
+         $rsize$1$i = $rsize$0$i5;$v$1$i = $v$0$i6;
+        }
+        $291 = ((($t$0$i4)) + 20|0);
+        $292 = HEAP32[$291>>2]|0;
+        $293 = $sizebits$0$i >>> 31;
+        $294 = (((($t$0$i4)) + 16|0) + ($293<<2)|0);
+        $295 = HEAP32[$294>>2]|0;
+        $296 = ($292|0)==(0|0);
+        $297 = ($292|0)==($295|0);
+        $or$cond1$i = $296 | $297;
+        $rst$1$i = $or$cond1$i ? $rst$0$i : $292;
+        $298 = ($295|0)==(0|0);
+        $299 = $298&1;
+        $300 = $299 ^ 1;
+        $sizebits$0$$i = $sizebits$0$i << $300;
+        if ($298) {
+         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
+         label = 86;
+         break;
+        } else {
+         $rsize$0$i5 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $sizebits$0$$i;$t$0$i4 = $295;$v$0$i6 = $v$1$i;
+        }
+       }
+      }
+     } while(0);
+     if ((label|0) == 86) {
+      $301 = ($t$2$i|0)==(0|0);
+      $302 = ($v$3$i|0)==(0|0);
+      $or$cond$i = $301 & $302;
+      if ($or$cond$i) {
+       $303 = 2 << $idx$0$i;
+       $304 = (0 - ($303))|0;
+       $305 = $303 | $304;
+       $306 = $249 & $305;
+       $307 = ($306|0)==(0);
+       if ($307) {
+        $nb$0 = $248;
+        break;
+       }
+       $308 = (0 - ($306))|0;
+       $309 = $306 & $308;
+       $310 = (($309) + -1)|0;
+       $311 = $310 >>> 12;
+       $312 = $311 & 16;
+       $313 = $310 >>> $312;
+       $314 = $313 >>> 5;
+       $315 = $314 & 8;
+       $316 = $315 | $312;
+       $317 = $313 >>> $315;
+       $318 = $317 >>> 2;
+       $319 = $318 & 4;
+       $320 = $316 | $319;
+       $321 = $317 >>> $319;
+       $322 = $321 >>> 1;
+       $323 = $322 & 2;
+       $324 = $320 | $323;
+       $325 = $321 >>> $323;
+       $326 = $325 >>> 1;
+       $327 = $326 & 1;
+       $328 = $324 | $327;
+       $329 = $325 >>> $327;
+       $330 = (($328) + ($329))|0;
+       $331 = (476 + ($330<<2)|0);
+       $332 = HEAP32[$331>>2]|0;
+       $t$4$ph$i = $332;
+      } else {
+       $t$4$ph$i = $t$2$i;
+      }
+      $333 = ($t$4$ph$i|0)==(0|0);
+      if ($333) {
+       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i;
+      } else {
+       $rsize$412$i = $rsize$3$i;$t$411$i = $t$4$ph$i;$v$413$i = $v$3$i;
+       label = 90;
+      }
+     }
+     if ((label|0) == 90) {
+      while(1) {
+       label = 0;
+       $334 = ((($t$411$i)) + 4|0);
+       $335 = HEAP32[$334>>2]|0;
+       $336 = $335 & -8;
+       $337 = (($336) - ($248))|0;
+       $338 = ($337>>>0)<($rsize$412$i>>>0);
+       $$rsize$4$i = $338 ? $337 : $rsize$412$i;
+       $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
+       $339 = ((($t$411$i)) + 16|0);
+       $340 = HEAP32[$339>>2]|0;
+       $341 = ($340|0)==(0|0);
+       if (!($341)) {
+        $rsize$412$i = $$rsize$4$i;$t$411$i = $340;$v$413$i = $t$4$v$4$i;
+        label = 90;
+        continue;
+       }
+       $342 = ((($t$411$i)) + 20|0);
+       $343 = HEAP32[$342>>2]|0;
+       $344 = ($343|0)==(0|0);
+       if ($344) {
+        $rsize$4$lcssa$i = $$rsize$4$i;$v$4$lcssa$i = $t$4$v$4$i;
+        break;
+       } else {
+        $rsize$412$i = $$rsize$4$i;$t$411$i = $343;$v$413$i = $t$4$v$4$i;
+        label = 90;
+       }
+      }
+     }
+     $345 = ($v$4$lcssa$i|0)==(0|0);
+     if ($345) {
+      $nb$0 = $248;
+     } else {
+      $346 = HEAP32[(180)>>2]|0;
+      $347 = (($346) - ($248))|0;
+      $348 = ($rsize$4$lcssa$i>>>0)<($347>>>0);
+      if ($348) {
+       $349 = HEAP32[(188)>>2]|0;
+       $350 = ($v$4$lcssa$i>>>0)<($349>>>0);
+       if ($350) {
+        _abort();
+        // unreachable;
+       }
+       $351 = (($v$4$lcssa$i) + ($248)|0);
+       $352 = ($v$4$lcssa$i>>>0)<($351>>>0);
+       if (!($352)) {
+        _abort();
+        // unreachable;
+       }
+       $353 = ((($v$4$lcssa$i)) + 24|0);
+       $354 = HEAP32[$353>>2]|0;
+       $355 = ((($v$4$lcssa$i)) + 12|0);
+       $356 = HEAP32[$355>>2]|0;
+       $357 = ($356|0)==($v$4$lcssa$i|0);
+       do {
+        if ($357) {
+         $367 = ((($v$4$lcssa$i)) + 20|0);
+         $368 = HEAP32[$367>>2]|0;
+         $369 = ($368|0)==(0|0);
+         if ($369) {
+          $370 = ((($v$4$lcssa$i)) + 16|0);
+          $371 = HEAP32[$370>>2]|0;
+          $372 = ($371|0)==(0|0);
+          if ($372) {
+           $R$3$i11 = 0;
+           break;
+          } else {
+           $R$1$i9 = $371;$RP$1$i8 = $370;
+          }
+         } else {
+          $R$1$i9 = $368;$RP$1$i8 = $367;
+         }
+         while(1) {
+          $373 = ((($R$1$i9)) + 20|0);
+          $374 = HEAP32[$373>>2]|0;
+          $375 = ($374|0)==(0|0);
+          if (!($375)) {
+           $R$1$i9 = $374;$RP$1$i8 = $373;
+           continue;
+          }
+          $376 = ((($R$1$i9)) + 16|0);
+          $377 = HEAP32[$376>>2]|0;
+          $378 = ($377|0)==(0|0);
+          if ($378) {
+           $R$1$i9$lcssa = $R$1$i9;$RP$1$i8$lcssa = $RP$1$i8;
+           break;
+          } else {
+           $R$1$i9 = $377;$RP$1$i8 = $376;
+          }
+         }
+         $379 = ($RP$1$i8$lcssa>>>0)<($349>>>0);
+         if ($379) {
+          _abort();
+          // unreachable;
+         } else {
+          HEAP32[$RP$1$i8$lcssa>>2] = 0;
+          $R$3$i11 = $R$1$i9$lcssa;
+          break;
+         }
+        } else {
+         $358 = ((($v$4$lcssa$i)) + 8|0);
+         $359 = HEAP32[$358>>2]|0;
+         $360 = ($359>>>0)<($349>>>0);
+         if ($360) {
+          _abort();
+          // unreachable;
+         }
+         $361 = ((($359)) + 12|0);
+         $362 = HEAP32[$361>>2]|0;
+         $363 = ($362|0)==($v$4$lcssa$i|0);
+         if (!($363)) {
+          _abort();
+          // unreachable;
+         }
+         $364 = ((($356)) + 8|0);
+         $365 = HEAP32[$364>>2]|0;
+         $366 = ($365|0)==($v$4$lcssa$i|0);
+         if ($366) {
+          HEAP32[$361>>2] = $356;
+          HEAP32[$364>>2] = $359;
+          $R$3$i11 = $356;
+          break;
+         } else {
+          _abort();
+          // unreachable;
+         }
+        }
+       } while(0);
+       $380 = ($354|0)==(0|0);
+       do {
+        if (!($380)) {
+         $381 = ((($v$4$lcssa$i)) + 28|0);
+         $382 = HEAP32[$381>>2]|0;
+         $383 = (476 + ($382<<2)|0);
+         $384 = HEAP32[$383>>2]|0;
+         $385 = ($v$4$lcssa$i|0)==($384|0);
+         if ($385) {
+          HEAP32[$383>>2] = $R$3$i11;
+          $cond$i12 = ($R$3$i11|0)==(0|0);
+          if ($cond$i12) {
+           $386 = 1 << $382;
+           $387 = $386 ^ -1;
+           $388 = HEAP32[(176)>>2]|0;
+           $389 = $388 & $387;
+           HEAP32[(176)>>2] = $389;
+           break;
+          }
+         } else {
+          $390 = HEAP32[(188)>>2]|0;
+          $391 = ($354>>>0)<($390>>>0);
+          if ($391) {
+           _abort();
+           // unreachable;
+          }
+          $392 = ((($354)) + 16|0);
+          $393 = HEAP32[$392>>2]|0;
+          $394 = ($393|0)==($v$4$lcssa$i|0);
+          if ($394) {
+           HEAP32[$392>>2] = $R$3$i11;
+          } else {
+           $395 = ((($354)) + 20|0);
+           HEAP32[$395>>2] = $R$3$i11;
+          }
+          $396 = ($R$3$i11|0)==(0|0);
+          if ($396) {
+           break;
+          }
+         }
+         $397 = HEAP32[(188)>>2]|0;
+         $398 = ($R$3$i11>>>0)<($397>>>0);
+         if ($398) {
+          _abort();
+          // unreachable;
+         }
+         $399 = ((($R$3$i11)) + 24|0);
+         HEAP32[$399>>2] = $354;
+         $400 = ((($v$4$lcssa$i)) + 16|0);
+         $401 = HEAP32[$400>>2]|0;
+         $402 = ($401|0)==(0|0);
+         do {
+          if (!($402)) {
+           $403 = ($401>>>0)<($397>>>0);
+           if ($403) {
+            _abort();
+            // unreachable;
+           } else {
+            $404 = ((($R$3$i11)) + 16|0);
+            HEAP32[$404>>2] = $401;
+            $405 = ((($401)) + 24|0);
+            HEAP32[$405>>2] = $R$3$i11;
+            break;
+           }
+          }
+         } while(0);
+         $406 = ((($v$4$lcssa$i)) + 20|0);
+         $407 = HEAP32[$406>>2]|0;
+         $408 = ($407|0)==(0|0);
+         if (!($408)) {
+          $409 = HEAP32[(188)>>2]|0;
+          $410 = ($407>>>0)<($409>>>0);
+          if ($410) {
+           _abort();
+           // unreachable;
+          } else {
+           $411 = ((($R$3$i11)) + 20|0);
+           HEAP32[$411>>2] = $407;
+           $412 = ((($407)) + 24|0);
+           HEAP32[$412>>2] = $R$3$i11;
+           break;
+          }
+         }
+        }
+       } while(0);
+       $413 = ($rsize$4$lcssa$i>>>0)<(16);
+       do {
+        if ($413) {
+         $414 = (($rsize$4$lcssa$i) + ($248))|0;
+         $415 = $414 | 3;
+         $416 = ((($v$4$lcssa$i)) + 4|0);
+         HEAP32[$416>>2] = $415;
+         $417 = (($v$4$lcssa$i) + ($414)|0);
+         $418 = ((($417)) + 4|0);
+         $419 = HEAP32[$418>>2]|0;
+         $420 = $419 | 1;
+         HEAP32[$418>>2] = $420;
+        } else {
+         $421 = $248 | 3;
+         $422 = ((($v$4$lcssa$i)) + 4|0);
+         HEAP32[$422>>2] = $421;
+         $423 = $rsize$4$lcssa$i | 1;
+         $424 = ((($351)) + 4|0);
+         HEAP32[$424>>2] = $423;
+         $425 = (($351) + ($rsize$4$lcssa$i)|0);
+         HEAP32[$425>>2] = $rsize$4$lcssa$i;
+         $426 = $rsize$4$lcssa$i >>> 3;
+         $427 = ($rsize$4$lcssa$i>>>0)<(256);
+         if ($427) {
+          $428 = $426 << 1;
+          $429 = (212 + ($428<<2)|0);
+          $430 = HEAP32[43]|0;
+          $431 = 1 << $426;
+          $432 = $430 & $431;
+          $433 = ($432|0)==(0);
+          if ($433) {
+           $434 = $430 | $431;
+           HEAP32[43] = $434;
+           $$pre$i13 = ((($429)) + 8|0);
+           $$pre$phi$i14Z2D = $$pre$i13;$F5$0$i = $429;
+          } else {
+           $435 = ((($429)) + 8|0);
+           $436 = HEAP32[$435>>2]|0;
+           $437 = HEAP32[(188)>>2]|0;
+           $438 = ($436>>>0)<($437>>>0);
+           if ($438) {
+            _abort();
+            // unreachable;
+           } else {
+            $$pre$phi$i14Z2D = $435;$F5$0$i = $436;
+           }
+          }
+          HEAP32[$$pre$phi$i14Z2D>>2] = $351;
+          $439 = ((($F5$0$i)) + 12|0);
+          HEAP32[$439>>2] = $351;
+          $440 = ((($351)) + 8|0);
+          HEAP32[$440>>2] = $F5$0$i;
+          $441 = ((($351)) + 12|0);
+          HEAP32[$441>>2] = $429;
+          break;
+         }
+         $442 = $rsize$4$lcssa$i >>> 8;
+         $443 = ($442|0)==(0);
+         if ($443) {
+          $I7$0$i = 0;
+         } else {
+          $444 = ($rsize$4$lcssa$i>>>0)>(16777215);
+          if ($444) {
+           $I7$0$i = 31;
+          } else {
+           $445 = (($442) + 1048320)|0;
+           $446 = $445 >>> 16;
+           $447 = $446 & 8;
+           $448 = $442 << $447;
+           $449 = (($448) + 520192)|0;
+           $450 = $449 >>> 16;
+           $451 = $450 & 4;
+           $452 = $451 | $447;
+           $453 = $448 << $451;
+           $454 = (($453) + 245760)|0;
+           $455 = $454 >>> 16;
+           $456 = $455 & 2;
+           $457 = $452 | $456;
+           $458 = (14 - ($457))|0;
+           $459 = $453 << $456;
+           $460 = $459 >>> 15;
+           $461 = (($458) + ($460))|0;
+           $462 = $461 << 1;
+           $463 = (($461) + 7)|0;
+           $464 = $rsize$4$lcssa$i >>> $463;
+           $465 = $464 & 1;
+           $466 = $465 | $462;
+           $I7$0$i = $466;
+          }
+         }
+         $467 = (476 + ($I7$0$i<<2)|0);
+         $468 = ((($351)) + 28|0);
+         HEAP32[$468>>2] = $I7$0$i;
+         $469 = ((($351)) + 16|0);
+         $470 = ((($469)) + 4|0);
+         HEAP32[$470>>2] = 0;
+         HEAP32[$469>>2] = 0;
+         $471 = HEAP32[(176)>>2]|0;
+         $472 = 1 << $I7$0$i;
+         $473 = $471 & $472;
+         $474 = ($473|0)==(0);
+         if ($474) {
+          $475 = $471 | $472;
+          HEAP32[(176)>>2] = $475;
+          HEAP32[$467>>2] = $351;
+          $476 = ((($351)) + 24|0);
+          HEAP32[$476>>2] = $467;
+          $477 = ((($351)) + 12|0);
+          HEAP32[$477>>2] = $351;
+          $478 = ((($351)) + 8|0);
+          HEAP32[$478>>2] = $351;
+          break;
+         }
+         $479 = HEAP32[$467>>2]|0;
+         $480 = ($I7$0$i|0)==(31);
+         $481 = $I7$0$i >>> 1;
+         $482 = (25 - ($481))|0;
+         $483 = $480 ? 0 : $482;
+         $484 = $rsize$4$lcssa$i << $483;
+         $K12$0$i = $484;$T$0$i = $479;
+         while(1) {
+          $485 = ((($T$0$i)) + 4|0);
+          $486 = HEAP32[$485>>2]|0;
+          $487 = $486 & -8;
+          $488 = ($487|0)==($rsize$4$lcssa$i|0);
+          if ($488) {
+           $T$0$i$lcssa = $T$0$i;
+           label = 148;
+           break;
+          }
+          $489 = $K12$0$i >>> 31;
+          $490 = (((($T$0$i)) + 16|0) + ($489<<2)|0);
+          $491 = $K12$0$i << 1;
+          $492 = HEAP32[$490>>2]|0;
+          $493 = ($492|0)==(0|0);
+          if ($493) {
+           $$lcssa157 = $490;$T$0$i$lcssa156 = $T$0$i;
+           label = 145;
+           break;
+          } else {
+           $K12$0$i = $491;$T$0$i = $492;
+          }
+         }
+         if ((label|0) == 145) {
+          $494 = HEAP32[(188)>>2]|0;
+          $495 = ($$lcssa157>>>0)<($494>>>0);
+          if ($495) {
+           _abort();
+           // unreachable;
+          } else {
+           HEAP32[$$lcssa157>>2] = $351;
+           $496 = ((($351)) + 24|0);
+           HEAP32[$496>>2] = $T$0$i$lcssa156;
+           $497 = ((($351)) + 12|0);
+           HEAP32[$497>>2] = $351;
+           $498 = ((($351)) + 8|0);
+           HEAP32[$498>>2] = $351;
+           break;
+          }
+         }
+         else if ((label|0) == 148) {
+          $499 = ((($T$0$i$lcssa)) + 8|0);
+          $500 = HEAP32[$499>>2]|0;
+          $501 = HEAP32[(188)>>2]|0;
+          $502 = ($500>>>0)>=($501>>>0);
+          $not$7$i = ($T$0$i$lcssa>>>0)>=($501>>>0);
+          $503 = $502 & $not$7$i;
+          if ($503) {
+           $504 = ((($500)) + 12|0);
+           HEAP32[$504>>2] = $351;
+           HEAP32[$499>>2] = $351;
+           $505 = ((($351)) + 8|0);
+           HEAP32[$505>>2] = $500;
+           $506 = ((($351)) + 12|0);
+           HEAP32[$506>>2] = $T$0$i$lcssa;
+           $507 = ((($351)) + 24|0);
+           HEAP32[$507>>2] = 0;
+           break;
+          } else {
+           _abort();
+           // unreachable;
+          }
+         }
+        }
+       } while(0);
+       $508 = ((($v$4$lcssa$i)) + 8|0);
+       $$0 = $508;
+       STACKTOP = sp;return ($$0|0);
+      } else {
+       $nb$0 = $248;
+      }
+     }
+    }
+   }
+  }
+ } while(0);
+ $509 = HEAP32[(180)>>2]|0;
+ $510 = ($509>>>0)<($nb$0>>>0);
+ if (!($510)) {
+  $511 = (($509) - ($nb$0))|0;
+  $512 = HEAP32[(192)>>2]|0;
+  $513 = ($511>>>0)>(15);
+  if ($513) {
+   $514 = (($512) + ($nb$0)|0);
+   HEAP32[(192)>>2] = $514;
+   HEAP32[(180)>>2] = $511;
+   $515 = $511 | 1;
+   $516 = ((($514)) + 4|0);
+   HEAP32[$516>>2] = $515;
+   $517 = (($514) + ($511)|0);
+   HEAP32[$517>>2] = $511;
+   $518 = $nb$0 | 3;
+   $519 = ((($512)) + 4|0);
+   HEAP32[$519>>2] = $518;
+  } else {
+   HEAP32[(180)>>2] = 0;
+   HEAP32[(192)>>2] = 0;
+   $520 = $509 | 3;
+   $521 = ((($512)) + 4|0);
+   HEAP32[$521>>2] = $520;
+   $522 = (($512) + ($509)|0);
+   $523 = ((($522)) + 4|0);
+   $524 = HEAP32[$523>>2]|0;
+   $525 = $524 | 1;
+   HEAP32[$523>>2] = $525;
+  }
+  $526 = ((($512)) + 8|0);
+  $$0 = $526;
+  STACKTOP = sp;return ($$0|0);
+ }
+ $527 = HEAP32[(184)>>2]|0;
+ $528 = ($527>>>0)>($nb$0>>>0);
+ if ($528) {
+  $529 = (($527) - ($nb$0))|0;
+  HEAP32[(184)>>2] = $529;
+  $530 = HEAP32[(196)>>2]|0;
+  $531 = (($530) + ($nb$0)|0);
+  HEAP32[(196)>>2] = $531;
+  $532 = $529 | 1;
+  $533 = ((($531)) + 4|0);
+  HEAP32[$533>>2] = $532;
+  $534 = $nb$0 | 3;
+  $535 = ((($530)) + 4|0);
+  HEAP32[$535>>2] = $534;
+  $536 = ((($530)) + 8|0);
+  $$0 = $536;
+  STACKTOP = sp;return ($$0|0);
+ }
+ $537 = HEAP32[161]|0;
+ $538 = ($537|0)==(0);
+ if ($538) {
+  HEAP32[(652)>>2] = 4096;
+  HEAP32[(648)>>2] = 4096;
+  HEAP32[(656)>>2] = -1;
+  HEAP32[(660)>>2] = -1;
+  HEAP32[(664)>>2] = 0;
+  HEAP32[(616)>>2] = 0;
+  $539 = $magic$i$i;
+  $540 = $539 & -16;
+  $541 = $540 ^ 1431655768;
+  HEAP32[$magic$i$i>>2] = $541;
+  HEAP32[161] = $541;
+ }
+ $542 = (($nb$0) + 48)|0;
+ $543 = HEAP32[(652)>>2]|0;
+ $544 = (($nb$0) + 47)|0;
+ $545 = (($543) + ($544))|0;
+ $546 = (0 - ($543))|0;
+ $547 = $545 & $546;
+ $548 = ($547>>>0)>($nb$0>>>0);
+ if (!($548)) {
+  $$0 = 0;
+  STACKTOP = sp;return ($$0|0);
+ }
+ $549 = HEAP32[(612)>>2]|0;
+ $550 = ($549|0)==(0);
+ if (!($550)) {
+  $551 = HEAP32[(604)>>2]|0;
+  $552 = (($551) + ($547))|0;
+  $553 = ($552>>>0)<=($551>>>0);
+  $554 = ($552>>>0)>($549>>>0);
+  $or$cond1$i16 = $553 | $554;
+  if ($or$cond1$i16) {
+   $$0 = 0;
+   STACKTOP = sp;return ($$0|0);
+  }
+ }
+ $555 = HEAP32[(616)>>2]|0;
+ $556 = $555 & 4;
+ $557 = ($556|0)==(0);
+ L254: do {
+  if ($557) {
+   $558 = HEAP32[(196)>>2]|0;
+   $559 = ($558|0)==(0|0);
+   L256: do {
+    if ($559) {
+     label = 171;
+    } else {
+     $sp$0$i$i = (620);
+     while(1) {
+      $560 = HEAP32[$sp$0$i$i>>2]|0;
+      $561 = ($560>>>0)>($558>>>0);
+      if (!($561)) {
+       $562 = ((($sp$0$i$i)) + 4|0);
+       $563 = HEAP32[$562>>2]|0;
+       $564 = (($560) + ($563)|0);
+       $565 = ($564>>>0)>($558>>>0);
+       if ($565) {
+        $$lcssa153 = $sp$0$i$i;$$lcssa155 = $562;
+        break;
+       }
+      }
+      $566 = ((($sp$0$i$i)) + 8|0);
+      $567 = HEAP32[$566>>2]|0;
+      $568 = ($567|0)==(0|0);
+      if ($568) {
+       label = 171;
+       break L256;
+      } else {
+       $sp$0$i$i = $567;
+      }
+     }
+     $591 = HEAP32[(184)>>2]|0;
+     $592 = (($545) - ($591))|0;
+     $593 = $592 & $546;
+     $594 = ($593>>>0)<(2147483647);
+     if ($594) {
+      $595 = (_sbrk(($593|0))|0);
+      $596 = HEAP32[$$lcssa153>>2]|0;
+      $597 = HEAP32[$$lcssa155>>2]|0;
+      $598 = (($596) + ($597)|0);
+      $599 = ($595|0)==($598|0);
+      if ($599) {
+       $600 = ($595|0)==((-1)|0);
+       if (!($600)) {
+        $tbase$746$i = $595;$tsize$745$i = $593;
+        label = 191;
+        break L254;
+       }
+      } else {
+       $br$2$ph$i = $595;$ssize$2$ph$i = $593;
+       label = 181;
+      }
+     }
+    }
+   } while(0);
+   do {
+    if ((label|0) == 171) {
+     $569 = (_sbrk(0)|0);
+     $570 = ($569|0)==((-1)|0);
+     if (!($570)) {
+      $571 = $569;
+      $572 = HEAP32[(648)>>2]|0;
+      $573 = (($572) + -1)|0;
+      $574 = $573 & $571;
+      $575 = ($574|0)==(0);
+      if ($575) {
+       $ssize$0$i = $547;
+      } else {
+       $576 = (($573) + ($571))|0;
+       $577 = (0 - ($572))|0;
+       $578 = $576 & $577;
+       $579 = (($547) - ($571))|0;
+       $580 = (($579) + ($578))|0;
+       $ssize$0$i = $580;
+      }
+      $581 = HEAP32[(604)>>2]|0;
+      $582 = (($581) + ($ssize$0$i))|0;
+      $583 = ($ssize$0$i>>>0)>($nb$0>>>0);
+      $584 = ($ssize$0$i>>>0)<(2147483647);
+      $or$cond$i17 = $583 & $584;
+      if ($or$cond$i17) {
+       $585 = HEAP32[(612)>>2]|0;
+       $586 = ($585|0)==(0);
+       if (!($586)) {
+        $587 = ($582>>>0)<=($581>>>0);
+        $588 = ($582>>>0)>($585>>>0);
+        $or$cond2$i = $587 | $588;
+        if ($or$cond2$i) {
+         break;
+        }
+       }
+       $589 = (_sbrk(($ssize$0$i|0))|0);
+       $590 = ($589|0)==($569|0);
+       if ($590) {
+        $tbase$746$i = $569;$tsize$745$i = $ssize$0$i;
+        label = 191;
+        break L254;
+       } else {
+        $br$2$ph$i = $589;$ssize$2$ph$i = $ssize$0$i;
+        label = 181;
+       }
+      }
+     }
+    }
+   } while(0);
+   L276: do {
+    if ((label|0) == 181) {
+     $601 = (0 - ($ssize$2$ph$i))|0;
+     $602 = ($br$2$ph$i|0)!=((-1)|0);
+     $603 = ($ssize$2$ph$i>>>0)<(2147483647);
+     $or$cond7$i = $603 & $602;
+     $604 = ($542>>>0)>($ssize$2$ph$i>>>0);
+     $or$cond8$i = $604 & $or$cond7$i;
+     do {
+      if ($or$cond8$i) {
+       $605 = HEAP32[(652)>>2]|0;
+       $606 = (($544) - ($ssize$2$ph$i))|0;
+       $607 = (($606) + ($605))|0;
+       $608 = (0 - ($605))|0;
+       $609 = $607 & $608;
+       $610 = ($609>>>0)<(2147483647);
+       if ($610) {
+        $611 = (_sbrk(($609|0))|0);
+        $612 = ($611|0)==((-1)|0);
+        if ($612) {
+         (_sbrk(($601|0))|0);
+         break L276;
+        } else {
+         $613 = (($609) + ($ssize$2$ph$i))|0;
+         $ssize$5$i = $613;
+         break;
+        }
+       } else {
+        $ssize$5$i = $ssize$2$ph$i;
+       }
+      } else {
+       $ssize$5$i = $ssize$2$ph$i;
+      }
+     } while(0);
+     $614 = ($br$2$ph$i|0)==((-1)|0);
+     if (!($614)) {
+      $tbase$746$i = $br$2$ph$i;$tsize$745$i = $ssize$5$i;
+      label = 191;
+      break L254;
+     }
+    }
+   } while(0);
+   $615 = HEAP32[(616)>>2]|0;
+   $616 = $615 | 4;
+   HEAP32[(616)>>2] = $616;
+   label = 188;
+  } else {
+   label = 188;
+  }
+ } while(0);
+ if ((label|0) == 188) {
+  $617 = ($547>>>0)<(2147483647);
+  if ($617) {
+   $618 = (_sbrk(($547|0))|0);
+   $619 = (_sbrk(0)|0);
+   $620 = ($618|0)!=((-1)|0);
+   $621 = ($619|0)!=((-1)|0);
+   $or$cond5$i = $620 & $621;
+   $622 = ($618>>>0)<($619>>>0);
+   $or$cond10$i = $622 & $or$cond5$i;
+   if ($or$cond10$i) {
+    $623 = $619;
+    $624 = $618;
+    $625 = (($623) - ($624))|0;
+    $626 = (($nb$0) + 40)|0;
+    $$not$i = ($625>>>0)>($626>>>0);
+    if ($$not$i) {
+     $tbase$746$i = $618;$tsize$745$i = $625;
+     label = 191;
+    }
+   }
+  }
+ }
+ if ((label|0) == 191) {
+  $627 = HEAP32[(604)>>2]|0;
+  $628 = (($627) + ($tsize$745$i))|0;
+  HEAP32[(604)>>2] = $628;
+  $629 = HEAP32[(608)>>2]|0;
+  $630 = ($628>>>0)>($629>>>0);
+  if ($630) {
+   HEAP32[(608)>>2] = $628;
+  }
+  $631 = HEAP32[(196)>>2]|0;
+  $632 = ($631|0)==(0|0);
+  do {
+   if ($632) {
+    $633 = HEAP32[(188)>>2]|0;
+    $634 = ($633|0)==(0|0);
+    $635 = ($tbase$746$i>>>0)<($633>>>0);
+    $or$cond11$i = $634 | $635;
+    if ($or$cond11$i) {
+     HEAP32[(188)>>2] = $tbase$746$i;
+    }
+    HEAP32[(620)>>2] = $tbase$746$i;
+    HEAP32[(624)>>2] = $tsize$745$i;
+    HEAP32[(632)>>2] = 0;
+    $636 = HEAP32[161]|0;
+    HEAP32[(208)>>2] = $636;
+    HEAP32[(204)>>2] = -1;
+    $i$01$i$i = 0;
+    while(1) {
+     $637 = $i$01$i$i << 1;
+     $638 = (212 + ($637<<2)|0);
+     $639 = ((($638)) + 12|0);
+     HEAP32[$639>>2] = $638;
+     $640 = ((($638)) + 8|0);
+     HEAP32[$640>>2] = $638;
+     $641 = (($i$01$i$i) + 1)|0;
+     $exitcond$i$i = ($641|0)==(32);
+     if ($exitcond$i$i) {
+      break;
+     } else {
+      $i$01$i$i = $641;
+     }
+    }
+    $642 = (($tsize$745$i) + -40)|0;
+    $643 = ((($tbase$746$i)) + 8|0);
+    $644 = $643;
+    $645 = $644 & 7;
+    $646 = ($645|0)==(0);
+    $647 = (0 - ($644))|0;
+    $648 = $647 & 7;
+    $649 = $646 ? 0 : $648;
+    $650 = (($tbase$746$i) + ($649)|0);
+    $651 = (($642) - ($649))|0;
+    HEAP32[(196)>>2] = $650;
+    HEAP32[(184)>>2] = $651;
+    $652 = $651 | 1;
+    $653 = ((($650)) + 4|0);
+    HEAP32[$653>>2] = $652;
+    $654 = (($650) + ($651)|0);
+    $655 = ((($654)) + 4|0);
+    HEAP32[$655>>2] = 40;
+    $656 = HEAP32[(660)>>2]|0;
+    HEAP32[(200)>>2] = $656;
+   } else {
+    $sp$068$i = (620);
+    while(1) {
+     $657 = HEAP32[$sp$068$i>>2]|0;
+     $658 = ((($sp$068$i)) + 4|0);
+     $659 = HEAP32[$658>>2]|0;
+     $660 = (($657) + ($659)|0);
+     $661 = ($tbase$746$i|0)==($660|0);
+     if ($661) {
+      $$lcssa147 = $657;$$lcssa149 = $658;$$lcssa151 = $659;$sp$068$i$lcssa = $sp$068$i;
+      label = 201;
+      break;
+     }
+     $662 = ((($sp$068$i)) + 8|0);
+     $663 = HEAP32[$662>>2]|0;
+     $664 = ($663|0)==(0|0);
+     if ($664) {
+      break;
+     } else {
+      $sp$068$i = $663;
+     }
+    }
+    if ((label|0) == 201) {
+     $665 = ((($sp$068$i$lcssa)) + 12|0);
+     $666 = HEAP32[$665>>2]|0;
+     $667 = $666 & 8;
+     $668 = ($667|0)==(0);
+     if ($668) {
+      $669 = ($631>>>0)>=($$lcssa147>>>0);
+      $670 = ($631>>>0)<($tbase$746$i>>>0);
+      $or$cond48$i = $670 & $669;
+      if ($or$cond48$i) {
+       $671 = (($$lcssa151) + ($tsize$745$i))|0;
+       HEAP32[$$lcssa149>>2] = $671;
+       $672 = HEAP32[(184)>>2]|0;
+       $673 = ((($631)) + 8|0);
+       $674 = $673;
+       $675 = $674 & 7;
+       $676 = ($675|0)==(0);
+       $677 = (0 - ($674))|0;
+       $678 = $677 & 7;
+       $679 = $676 ? 0 : $678;
+       $680 = (($631) + ($679)|0);
+       $681 = (($tsize$745$i) - ($679))|0;
+       $682 = (($681) + ($672))|0;
+       HEAP32[(196)>>2] = $680;
+       HEAP32[(184)>>2] = $682;
+       $683 = $682 | 1;
+       $684 = ((($680)) + 4|0);
+       HEAP32[$684>>2] = $683;
+       $685 = (($680) + ($682)|0);
+       $686 = ((($685)) + 4|0);
+       HEAP32[$686>>2] = 40;
+       $687 = HEAP32[(660)>>2]|0;
+       HEAP32[(200)>>2] = $687;
+       break;
+      }
+     }
+    }
+    $688 = HEAP32[(188)>>2]|0;
+    $689 = ($tbase$746$i>>>0)<($688>>>0);
+    if ($689) {
+     HEAP32[(188)>>2] = $tbase$746$i;
+     $753 = $tbase$746$i;
+    } else {
+     $753 = $688;
+    }
+    $690 = (($tbase$746$i) + ($tsize$745$i)|0);
+    $sp$167$i = (620);
+    while(1) {
+     $691 = HEAP32[$sp$167$i>>2]|0;
+     $692 = ($691|0)==($690|0);
+     if ($692) {
+      $$lcssa144 = $sp$167$i;$sp$167$i$lcssa = $sp$167$i;
+      label = 209;
+      break;
+     }
+     $693 = ((($sp$167$i)) + 8|0);
+     $694 = HEAP32[$693>>2]|0;
+     $695 = ($694|0)==(0|0);
+     if ($695) {
+      $sp$0$i$i$i = (620);
+      break;
+     } else {
+      $sp$167$i = $694;
+     }
+    }
+    if ((label|0) == 209) {
+     $696 = ((($sp$167$i$lcssa)) + 12|0);
+     $697 = HEAP32[$696>>2]|0;
+     $698 = $697 & 8;
+     $699 = ($698|0)==(0);
+     if ($699) {
+      HEAP32[$$lcssa144>>2] = $tbase$746$i;
+      $700 = ((($sp$167$i$lcssa)) + 4|0);
+      $701 = HEAP32[$700>>2]|0;
+      $702 = (($701) + ($tsize$745$i))|0;
+      HEAP32[$700>>2] = $702;
+      $703 = ((($tbase$746$i)) + 8|0);
+      $704 = $703;
+      $705 = $704 & 7;
+      $706 = ($705|0)==(0);
+      $707 = (0 - ($704))|0;
+      $708 = $707 & 7;
+      $709 = $706 ? 0 : $708;
+      $710 = (($tbase$746$i) + ($709)|0);
+      $711 = ((($690)) + 8|0);
+      $712 = $711;
+      $713 = $712 & 7;
+      $714 = ($713|0)==(0);
+      $715 = (0 - ($712))|0;
+      $716 = $715 & 7;
+      $717 = $714 ? 0 : $716;
+      $718 = (($690) + ($717)|0);
+      $719 = $718;
+      $720 = $710;
+      $721 = (($719) - ($720))|0;
+      $722 = (($710) + ($nb$0)|0);
+      $723 = (($721) - ($nb$0))|0;
+      $724 = $nb$0 | 3;
+      $725 = ((($710)) + 4|0);
+      HEAP32[$725>>2] = $724;
+      $726 = ($718|0)==($631|0);
+      do {
+       if ($726) {
+        $727 = HEAP32[(184)>>2]|0;
+        $728 = (($727) + ($723))|0;
+        HEAP32[(184)>>2] = $728;
+        HEAP32[(196)>>2] = $722;
+        $729 = $728 | 1;
+        $730 = ((($722)) + 4|0);
+        HEAP32[$730>>2] = $729;
+       } else {
+        $731 = HEAP32[(192)>>2]|0;
+        $732 = ($718|0)==($731|0);
+        if ($732) {
+         $733 = HEAP32[(180)>>2]|0;
+         $734 = (($733) + ($723))|0;
+         HEAP32[(180)>>2] = $734;
+         HEAP32[(192)>>2] = $722;
+         $735 = $734 | 1;
+         $736 = ((($722)) + 4|0);
+         HEAP32[$736>>2] = $735;
+         $737 = (($722) + ($734)|0);
+         HEAP32[$737>>2] = $734;
+         break;
+        }
+        $738 = ((($718)) + 4|0);
+        $739 = HEAP32[$738>>2]|0;
+        $740 = $739 & 3;
+        $741 = ($740|0)==(1);
+        if ($741) {
+         $742 = $739 & -8;
+         $743 = $739 >>> 3;
+         $744 = ($739>>>0)<(256);
+         L328: do {
+          if ($744) {
+           $745 = ((($718)) + 8|0);
+           $746 = HEAP32[$745>>2]|0;
+           $747 = ((($718)) + 12|0);
+           $748 = HEAP32[$747>>2]|0;
+           $749 = $743 << 1;
+           $750 = (212 + ($749<<2)|0);
+           $751 = ($746|0)==($750|0);
+           do {
+            if (!($751)) {
+             $752 = ($746>>>0)<($753>>>0);
+             if ($752) {
+              _abort();
+              // unreachable;
+             }
+             $754 = ((($746)) + 12|0);
+             $755 = HEAP32[$754>>2]|0;
+             $756 = ($755|0)==($718|0);
+             if ($756) {
+              break;
+             }
+             _abort();
+             // unreachable;
+            }
+           } while(0);
+           $757 = ($748|0)==($746|0);
+           if ($757) {
+            $758 = 1 << $743;
+            $759 = $758 ^ -1;
+            $760 = HEAP32[43]|0;
+            $761 = $760 & $759;
+            HEAP32[43] = $761;
+            break;
+           }
+           $762 = ($748|0)==($750|0);
+           do {
+            if ($762) {
+             $$pre9$i$i = ((($748)) + 8|0);
+             $$pre$phi10$i$iZ2D = $$pre9$i$i;
+            } else {
+             $763 = ($748>>>0)<($753>>>0);
+             if ($763) {
+              _abort();
+              // unreachable;
+             }
+             $764 = ((($748)) + 8|0);
+             $765 = HEAP32[$764>>2]|0;
+             $766 = ($765|0)==($718|0);
+             if ($766) {
+              $$pre$phi10$i$iZ2D = $764;
+              break;
+             }
+             _abort();
+             // unreachable;
+            }
+           } while(0);
+           $767 = ((($746)) + 12|0);
+           HEAP32[$767>>2] = $748;
+           HEAP32[$$pre$phi10$i$iZ2D>>2] = $746;
+          } else {
+           $768 = ((($718)) + 24|0);
+           $769 = HEAP32[$768>>2]|0;
+           $770 = ((($718)) + 12|0);
+           $771 = HEAP32[$770>>2]|0;
+           $772 = ($771|0)==($718|0);
+           do {
+            if ($772) {
+             $782 = ((($718)) + 16|0);
+             $783 = ((($782)) + 4|0);
+             $784 = HEAP32[$783>>2]|0;
+             $785 = ($784|0)==(0|0);
+             if ($785) {
+              $786 = HEAP32[$782>>2]|0;
+              $787 = ($786|0)==(0|0);
+              if ($787) {
+               $R$3$i$i = 0;
+               break;
+              } else {
+               $R$1$i$i = $786;$RP$1$i$i = $782;
+              }
+             } else {
+              $R$1$i$i = $784;$RP$1$i$i = $783;
+             }
+             while(1) {
+              $788 = ((($R$1$i$i)) + 20|0);
+              $789 = HEAP32[$788>>2]|0;
+              $790 = ($789|0)==(0|0);
+              if (!($790)) {
+               $R$1$i$i = $789;$RP$1$i$i = $788;
+               continue;
+              }
+              $791 = ((($R$1$i$i)) + 16|0);
+              $792 = HEAP32[$791>>2]|0;
+              $793 = ($792|0)==(0|0);
+              if ($793) {
+               $R$1$i$i$lcssa = $R$1$i$i;$RP$1$i$i$lcssa = $RP$1$i$i;
+               break;
+              } else {
+               $R$1$i$i = $792;$RP$1$i$i = $791;
+              }
+             }
+             $794 = ($RP$1$i$i$lcssa>>>0)<($753>>>0);
+             if ($794) {
+              _abort();
+              // unreachable;
+             } else {
+              HEAP32[$RP$1$i$i$lcssa>>2] = 0;
+              $R$3$i$i = $R$1$i$i$lcssa;
+              break;
+             }
+            } else {
+             $773 = ((($718)) + 8|0);
+             $774 = HEAP32[$773>>2]|0;
+             $775 = ($774>>>0)<($753>>>0);
+             if ($775) {
+              _abort();
+              // unreachable;
+             }
+             $776 = ((($774)) + 12|0);
+             $777 = HEAP32[$776>>2]|0;
+             $778 = ($777|0)==($718|0);
+             if (!($778)) {
+              _abort();
+              // unreachable;
+             }
+             $779 = ((($771)) + 8|0);
+             $780 = HEAP32[$779>>2]|0;
+             $781 = ($780|0)==($718|0);
+             if ($781) {
+              HEAP32[$776>>2] = $771;
+              HEAP32[$779>>2] = $774;
+              $R$3$i$i = $771;
+              break;
+             } else {
+              _abort();
+              // unreachable;
+             }
+            }
+           } while(0);
+           $795 = ($769|0)==(0|0);
+           if ($795) {
+            break;
+           }
+           $796 = ((($718)) + 28|0);
+           $797 = HEAP32[$796>>2]|0;
+           $798 = (476 + ($797<<2)|0);
+           $799 = HEAP32[$798>>2]|0;
+           $800 = ($718|0)==($799|0);
+           do {
+            if ($800) {
+             HEAP32[$798>>2] = $R$3$i$i;
+             $cond$i$i = ($R$3$i$i|0)==(0|0);
+             if (!($cond$i$i)) {
+              break;
+             }
+             $801 = 1 << $797;
+             $802 = $801 ^ -1;
+             $803 = HEAP32[(176)>>2]|0;
+             $804 = $803 & $802;
+             HEAP32[(176)>>2] = $804;
+             break L328;
+            } else {
+             $805 = HEAP32[(188)>>2]|0;
+             $806 = ($769>>>0)<($805>>>0);
+             if ($806) {
+              _abort();
+              // unreachable;
+             }
+             $807 = ((($769)) + 16|0);
+             $808 = HEAP32[$807>>2]|0;
+             $809 = ($808|0)==($718|0);
+             if ($809) {
+              HEAP32[$807>>2] = $R$3$i$i;
+             } else {
+              $810 = ((($769)) + 20|0);
+              HEAP32[$810>>2] = $R$3$i$i;
+             }
+             $811 = ($R$3$i$i|0)==(0|0);
+             if ($811) {
+              break L328;
+             }
+            }
+           } while(0);
+           $812 = HEAP32[(188)>>2]|0;
+           $813 = ($R$3$i$i>>>0)<($812>>>0);
+           if ($813) {
+            _abort();
+            // unreachable;
+           }
+           $814 = ((($R$3$i$i)) + 24|0);
+           HEAP32[$814>>2] = $769;
+           $815 = ((($718)) + 16|0);
+           $816 = HEAP32[$815>>2]|0;
+           $817 = ($816|0)==(0|0);
+           do {
+            if (!($817)) {
+             $818 = ($816>>>0)<($812>>>0);
+             if ($818) {
+              _abort();
+              // unreachable;
+             } else {
+              $819 = ((($R$3$i$i)) + 16|0);
+              HEAP32[$819>>2] = $816;
+              $820 = ((($816)) + 24|0);
+              HEAP32[$820>>2] = $R$3$i$i;
+              break;
+             }
+            }
+           } while(0);
+           $821 = ((($815)) + 4|0);
+           $822 = HEAP32[$821>>2]|0;
+           $823 = ($822|0)==(0|0);
+           if ($823) {
+            break;
+           }
+           $824 = HEAP32[(188)>>2]|0;
+           $825 = ($822>>>0)<($824>>>0);
+           if ($825) {
+            _abort();
+            // unreachable;
+           } else {
+            $826 = ((($R$3$i$i)) + 20|0);
+            HEAP32[$826>>2] = $822;
+            $827 = ((($822)) + 24|0);
+            HEAP32[$827>>2] = $R$3$i$i;
+            break;
+           }
+          }
+         } while(0);
+         $828 = (($718) + ($742)|0);
+         $829 = (($742) + ($723))|0;
+         $oldfirst$0$i$i = $828;$qsize$0$i$i = $829;
+        } else {
+         $oldfirst$0$i$i = $718;$qsize$0$i$i = $723;
+        }
+        $830 = ((($oldfirst$0$i$i)) + 4|0);
+        $831 = HEAP32[$830>>2]|0;
+        $832 = $831 & -2;
+        HEAP32[$830>>2] = $832;
+        $833 = $qsize$0$i$i | 1;
+        $834 = ((($722)) + 4|0);
+        HEAP32[$834>>2] = $833;
+        $835 = (($722) + ($qsize$0$i$i)|0);
+        HEAP32[$835>>2] = $qsize$0$i$i;
+        $836 = $qsize$0$i$i >>> 3;
+        $837 = ($qsize$0$i$i>>>0)<(256);
+        if ($837) {
+         $838 = $836 << 1;
+         $839 = (212 + ($838<<2)|0);
+         $840 = HEAP32[43]|0;
+         $841 = 1 << $836;
+         $842 = $840 & $841;
+         $843 = ($842|0)==(0);
+         do {
+          if ($843) {
+           $844 = $840 | $841;
+           HEAP32[43] = $844;
+           $$pre$i16$i = ((($839)) + 8|0);
+           $$pre$phi$i17$iZ2D = $$pre$i16$i;$F4$0$i$i = $839;
+          } else {
+           $845 = ((($839)) + 8|0);
+           $846 = HEAP32[$845>>2]|0;
+           $847 = HEAP32[(188)>>2]|0;
+           $848 = ($846>>>0)<($847>>>0);
+           if (!($848)) {
+            $$pre$phi$i17$iZ2D = $845;$F4$0$i$i = $846;
+            break;
+           }
+           _abort();
+           // unreachable;
+          }
+         } while(0);
+         HEAP32[$$pre$phi$i17$iZ2D>>2] = $722;
+         $849 = ((($F4$0$i$i)) + 12|0);
+         HEAP32[$849>>2] = $722;
+         $850 = ((($722)) + 8|0);
+         HEAP32[$850>>2] = $F4$0$i$i;
+         $851 = ((($722)) + 12|0);
+         HEAP32[$851>>2] = $839;
+         break;
+        }
+        $852 = $qsize$0$i$i >>> 8;
+        $853 = ($852|0)==(0);
+        do {
+         if ($853) {
+          $I7$0$i$i = 0;
+         } else {
+          $854 = ($qsize$0$i$i>>>0)>(16777215);
+          if ($854) {
+           $I7$0$i$i = 31;
+           break;
+          }
+          $855 = (($852) + 1048320)|0;
+          $856 = $855 >>> 16;
+          $857 = $856 & 8;
+          $858 = $852 << $857;
+          $859 = (($858) + 520192)|0;
+          $860 = $859 >>> 16;
+          $861 = $860 & 4;
+          $862 = $861 | $857;
+          $863 = $858 << $861;
+          $864 = (($863) + 245760)|0;
+          $865 = $864 >>> 16;
+          $866 = $865 & 2;
+          $867 = $862 | $866;
+          $868 = (14 - ($867))|0;
+          $869 = $863 << $866;
+          $870 = $869 >>> 15;
+          $871 = (($868) + ($870))|0;
+          $872 = $871 << 1;
+          $873 = (($871) + 7)|0;
+          $874 = $qsize$0$i$i >>> $873;
+          $875 = $874 & 1;
+          $876 = $875 | $872;
+          $I7$0$i$i = $876;
+         }
+        } while(0);
+        $877 = (476 + ($I7$0$i$i<<2)|0);
+        $878 = ((($722)) + 28|0);
+        HEAP32[$878>>2] = $I7$0$i$i;
+        $879 = ((($722)) + 16|0);
+        $880 = ((($879)) + 4|0);
+        HEAP32[$880>>2] = 0;
+        HEAP32[$879>>2] = 0;
+        $881 = HEAP32[(176)>>2]|0;
+        $882 = 1 << $I7$0$i$i;
+        $883 = $881 & $882;
+        $884 = ($883|0)==(0);
+        if ($884) {
+         $885 = $881 | $882;
+         HEAP32[(176)>>2] = $885;
+         HEAP32[$877>>2] = $722;
+         $886 = ((($722)) + 24|0);
+         HEAP32[$886>>2] = $877;
+         $887 = ((($722)) + 12|0);
+         HEAP32[$887>>2] = $722;
+         $888 = ((($722)) + 8|0);
+         HEAP32[$888>>2] = $722;
+         break;
+        }
+        $889 = HEAP32[$877>>2]|0;
+        $890 = ($I7$0$i$i|0)==(31);
+        $891 = $I7$0$i$i >>> 1;
+        $892 = (25 - ($891))|0;
+        $893 = $890 ? 0 : $892;
+        $894 = $qsize$0$i$i << $893;
+        $K8$0$i$i = $894;$T$0$i18$i = $889;
+        while(1) {
+         $895 = ((($T$0$i18$i)) + 4|0);
+         $896 = HEAP32[$895>>2]|0;
+         $897 = $896 & -8;
+         $898 = ($897|0)==($qsize$0$i$i|0);
+         if ($898) {
+          $T$0$i18$i$lcssa = $T$0$i18$i;
+          label = 279;
+          break;
+         }
+         $899 = $K8$0$i$i >>> 31;
+         $900 = (((($T$0$i18$i)) + 16|0) + ($899<<2)|0);
+         $901 = $K8$0$i$i << 1;
+         $902 = HEAP32[$900>>2]|0;
+         $903 = ($902|0)==(0|0);
+         if ($903) {
+          $$lcssa = $900;$T$0$i18$i$lcssa139 = $T$0$i18$i;
+          label = 276;
+          break;
+         } else {
+          $K8$0$i$i = $901;$T$0$i18$i = $902;
+         }
+        }
+        if ((label|0) == 276) {
+         $904 = HEAP32[(188)>>2]|0;
+         $905 = ($$lcssa>>>0)<($904>>>0);
+         if ($905) {
+          _abort();
+          // unreachable;
+         } else {
+          HEAP32[$$lcssa>>2] = $722;
+          $906 = ((($722)) + 24|0);
+          HEAP32[$906>>2] = $T$0$i18$i$lcssa139;
+          $907 = ((($722)) + 12|0);
+          HEAP32[$907>>2] = $722;
+          $908 = ((($722)) + 8|0);
+          HEAP32[$908>>2] = $722;
+          break;
+         }
+        }
+        else if ((label|0) == 279) {
+         $909 = ((($T$0$i18$i$lcssa)) + 8|0);
+         $910 = HEAP32[$909>>2]|0;
+         $911 = HEAP32[(188)>>2]|0;
+         $912 = ($910>>>0)>=($911>>>0);
+         $not$$i20$i = ($T$0$i18$i$lcssa>>>0)>=($911>>>0);
+         $913 = $912 & $not$$i20$i;
+         if ($913) {
+          $914 = ((($910)) + 12|0);
+          HEAP32[$914>>2] = $722;
+          HEAP32[$909>>2] = $722;
+          $915 = ((($722)) + 8|0);
+          HEAP32[$915>>2] = $910;
+          $916 = ((($722)) + 12|0);
+          HEAP32[$916>>2] = $T$0$i18$i$lcssa;
+          $917 = ((($722)) + 24|0);
+          HEAP32[$917>>2] = 0;
+          break;
+         } else {
+          _abort();
+          // unreachable;
+         }
+        }
+       }
+      } while(0);
+      $1048 = ((($710)) + 8|0);
+      $$0 = $1048;
+      STACKTOP = sp;return ($$0|0);
+     } else {
+      $sp$0$i$i$i = (620);
+     }
+    }
+    while(1) {
+     $918 = HEAP32[$sp$0$i$i$i>>2]|0;
+     $919 = ($918>>>0)>($631>>>0);
+     if (!($919)) {
+      $920 = ((($sp$0$i$i$i)) + 4|0);
+      $921 = HEAP32[$920>>2]|0;
+      $922 = (($918) + ($921)|0);
+      $923 = ($922>>>0)>($631>>>0);
+      if ($923) {
+       $$lcssa142 = $922;
+       break;
+      }
+     }
+     $924 = ((($sp$0$i$i$i)) + 8|0);
+     $925 = HEAP32[$924>>2]|0;
+     $sp$0$i$i$i = $925;
+    }
+    $926 = ((($$lcssa142)) + -47|0);
+    $927 = ((($926)) + 8|0);
+    $928 = $927;
+    $929 = $928 & 7;
+    $930 = ($929|0)==(0);
+    $931 = (0 - ($928))|0;
+    $932 = $931 & 7;
+    $933 = $930 ? 0 : $932;
+    $934 = (($926) + ($933)|0);
+    $935 = ((($631)) + 16|0);
+    $936 = ($934>>>0)<($935>>>0);
+    $937 = $936 ? $631 : $934;
+    $938 = ((($937)) + 8|0);
+    $939 = ((($937)) + 24|0);
+    $940 = (($tsize$745$i) + -40)|0;
+    $941 = ((($tbase$746$i)) + 8|0);
+    $942 = $941;
+    $943 = $942 & 7;
+    $944 = ($943|0)==(0);
+    $945 = (0 - ($942))|0;
+    $946 = $945 & 7;
+    $947 = $944 ? 0 : $946;
+    $948 = (($tbase$746$i) + ($947)|0);
+    $949 = (($940) - ($947))|0;
+    HEAP32[(196)>>2] = $948;
+    HEAP32[(184)>>2] = $949;
+    $950 = $949 | 1;
+    $951 = ((($948)) + 4|0);
+    HEAP32[$951>>2] = $950;
+    $952 = (($948) + ($949)|0);
+    $953 = ((($952)) + 4|0);
+    HEAP32[$953>>2] = 40;
+    $954 = HEAP32[(660)>>2]|0;
+    HEAP32[(200)>>2] = $954;
+    $955 = ((($937)) + 4|0);
+    HEAP32[$955>>2] = 27;
+    ;HEAP32[$938>>2]=HEAP32[(620)>>2]|0;HEAP32[$938+4>>2]=HEAP32[(620)+4>>2]|0;HEAP32[$938+8>>2]=HEAP32[(620)+8>>2]|0;HEAP32[$938+12>>2]=HEAP32[(620)+12>>2]|0;
+    HEAP32[(620)>>2] = $tbase$746$i;
+    HEAP32[(624)>>2] = $tsize$745$i;
+    HEAP32[(632)>>2] = 0;
+    HEAP32[(628)>>2] = $938;
+    $p$0$i$i = $939;
+    while(1) {
+     $956 = ((($p$0$i$i)) + 4|0);
+     HEAP32[$956>>2] = 7;
+     $957 = ((($956)) + 4|0);
+     $958 = ($957>>>0)<($$lcssa142>>>0);
+     if ($958) {
+      $p$0$i$i = $956;
+     } else {
+      break;
+     }
+    }
+    $959 = ($937|0)==($631|0);
+    if (!($959)) {
+     $960 = $937;
+     $961 = $631;
+     $962 = (($960) - ($961))|0;
+     $963 = HEAP32[$955>>2]|0;
+     $964 = $963 & -2;
+     HEAP32[$955>>2] = $964;
+     $965 = $962 | 1;
+     $966 = ((($631)) + 4|0);
+     HEAP32[$966>>2] = $965;
+     HEAP32[$937>>2] = $962;
+     $967 = $962 >>> 3;
+     $968 = ($962>>>0)<(256);
+     if ($968) {
+      $969 = $967 << 1;
+      $970 = (212 + ($969<<2)|0);
+      $971 = HEAP32[43]|0;
+      $972 = 1 << $967;
+      $973 = $971 & $972;
+      $974 = ($973|0)==(0);
+      if ($974) {
+       $975 = $971 | $972;
+       HEAP32[43] = $975;
+       $$pre$i$i = ((($970)) + 8|0);
+       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $970;
+      } else {
+       $976 = ((($970)) + 8|0);
+       $977 = HEAP32[$976>>2]|0;
+       $978 = HEAP32[(188)>>2]|0;
+       $979 = ($977>>>0)<($978>>>0);
+       if ($979) {
+        _abort();
+        // unreachable;
+       } else {
+        $$pre$phi$i$iZ2D = $976;$F$0$i$i = $977;
+       }
+      }
+      HEAP32[$$pre$phi$i$iZ2D>>2] = $631;
+      $980 = ((($F$0$i$i)) + 12|0);
+      HEAP32[$980>>2] = $631;
+      $981 = ((($631)) + 8|0);
+      HEAP32[$981>>2] = $F$0$i$i;
+      $982 = ((($631)) + 12|0);
+      HEAP32[$982>>2] = $970;
+      break;
+     }
+     $983 = $962 >>> 8;
+     $984 = ($983|0)==(0);
+     if ($984) {
+      $I1$0$i$i = 0;
+     } else {
+      $985 = ($962>>>0)>(16777215);
+      if ($985) {
+       $I1$0$i$i = 31;
+      } else {
+       $986 = (($983) + 1048320)|0;
+       $987 = $986 >>> 16;
+       $988 = $987 & 8;
+       $989 = $983 << $988;
+       $990 = (($989) + 520192)|0;
+       $991 = $990 >>> 16;
+       $992 = $991 & 4;
+       $993 = $992 | $988;
+       $994 = $989 << $992;
+       $995 = (($994) + 245760)|0;
+       $996 = $995 >>> 16;
+       $997 = $996 & 2;
+       $998 = $993 | $997;
+       $999 = (14 - ($998))|0;
+       $1000 = $994 << $997;
+       $1001 = $1000 >>> 15;
+       $1002 = (($999) + ($1001))|0;
+       $1003 = $1002 << 1;
+       $1004 = (($1002) + 7)|0;
+       $1005 = $962 >>> $1004;
+       $1006 = $1005 & 1;
+       $1007 = $1006 | $1003;
+       $I1$0$i$i = $1007;
+      }
+     }
+     $1008 = (476 + ($I1$0$i$i<<2)|0);
+     $1009 = ((($631)) + 28|0);
+     HEAP32[$1009>>2] = $I1$0$i$i;
+     $1010 = ((($631)) + 20|0);
+     HEAP32[$1010>>2] = 0;
+     HEAP32[$935>>2] = 0;
+     $1011 = HEAP32[(176)>>2]|0;
+     $1012 = 1 << $I1$0$i$i;
+     $1013 = $1011 & $1012;
+     $1014 = ($1013|0)==(0);
+     if ($1014) {
+      $1015 = $1011 | $1012;
+      HEAP32[(176)>>2] = $1015;
+      HEAP32[$1008>>2] = $631;
+      $1016 = ((($631)) + 24|0);
+      HEAP32[$1016>>2] = $1008;
+      $1017 = ((($631)) + 12|0);
+      HEAP32[$1017>>2] = $631;
+      $1018 = ((($631)) + 8|0);
+      HEAP32[$1018>>2] = $631;
+      break;
+     }
+     $1019 = HEAP32[$1008>>2]|0;
+     $1020 = ($I1$0$i$i|0)==(31);
+     $1021 = $I1$0$i$i >>> 1;
+     $1022 = (25 - ($1021))|0;
+     $1023 = $1020 ? 0 : $1022;
+     $1024 = $962 << $1023;
+     $K2$0$i$i = $1024;$T$0$i$i = $1019;
+     while(1) {
+      $1025 = ((($T$0$i$i)) + 4|0);
+      $1026 = HEAP32[$1025>>2]|0;
+      $1027 = $1026 & -8;
+      $1028 = ($1027|0)==($962|0);
+      if ($1028) {
+       $T$0$i$i$lcssa = $T$0$i$i;
+       label = 305;
+       break;
+      }
+      $1029 = $K2$0$i$i >>> 31;
+      $1030 = (((($T$0$i$i)) + 16|0) + ($1029<<2)|0);
+      $1031 = $K2$0$i$i << 1;
+      $1032 = HEAP32[$1030>>2]|0;
+      $1033 = ($1032|0)==(0|0);
+      if ($1033) {
+       $$lcssa141 = $1030;$T$0$i$i$lcssa140 = $T$0$i$i;
+       label = 302;
+       break;
+      } else {
+       $K2$0$i$i = $1031;$T$0$i$i = $1032;
+      }
+     }
+     if ((label|0) == 302) {
+      $1034 = HEAP32[(188)>>2]|0;
+      $1035 = ($$lcssa141>>>0)<($1034>>>0);
+      if ($1035) {
+       _abort();
+       // unreachable;
+      } else {
+       HEAP32[$$lcssa141>>2] = $631;
+       $1036 = ((($631)) + 24|0);
+       HEAP32[$1036>>2] = $T$0$i$i$lcssa140;
+       $1037 = ((($631)) + 12|0);
+       HEAP32[$1037>>2] = $631;
+       $1038 = ((($631)) + 8|0);
+       HEAP32[$1038>>2] = $631;
+       break;
+      }
+     }
+     else if ((label|0) == 305) {
+      $1039 = ((($T$0$i$i$lcssa)) + 8|0);
+      $1040 = HEAP32[$1039>>2]|0;
+      $1041 = HEAP32[(188)>>2]|0;
+      $1042 = ($1040>>>0)>=($1041>>>0);
+      $not$$i$i = ($T$0$i$i$lcssa>>>0)>=($1041>>>0);
+      $1043 = $1042 & $not$$i$i;
+      if ($1043) {
+       $1044 = ((($1040)) + 12|0);
+       HEAP32[$1044>>2] = $631;
+       HEAP32[$1039>>2] = $631;
+       $1045 = ((($631)) + 8|0);
+       HEAP32[$1045>>2] = $1040;
+       $1046 = ((($631)) + 12|0);
+       HEAP32[$1046>>2] = $T$0$i$i$lcssa;
+       $1047 = ((($631)) + 24|0);
+       HEAP32[$1047>>2] = 0;
+       break;
+      } else {
+       _abort();
+       // unreachable;
+      }
+     }
+    }
+   }
+  } while(0);
+  $1049 = HEAP32[(184)>>2]|0;
+  $1050 = ($1049>>>0)>($nb$0>>>0);
+  if ($1050) {
+   $1051 = (($1049) - ($nb$0))|0;
+   HEAP32[(184)>>2] = $1051;
+   $1052 = HEAP32[(196)>>2]|0;
+   $1053 = (($1052) + ($nb$0)|0);
+   HEAP32[(196)>>2] = $1053;
+   $1054 = $1051 | 1;
+   $1055 = ((($1053)) + 4|0);
+   HEAP32[$1055>>2] = $1054;
+   $1056 = $nb$0 | 3;
+   $1057 = ((($1052)) + 4|0);
+   HEAP32[$1057>>2] = $1056;
+   $1058 = ((($1052)) + 8|0);
+   $$0 = $1058;
+   STACKTOP = sp;return ($$0|0);
+  }
+ }
+ $1059 = (___errno_location()|0);
+ HEAP32[$1059>>2] = 12;
+ $$0 = 0;
+ STACKTOP = sp;return ($$0|0);
+}
+function _free($mem) {
+ $mem = $mem|0;
+ var $$lcssa = 0, $$pre = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
+ var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
+ var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
+ var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
+ var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
+ var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
+ var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
+ var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
+ var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
+ var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
+ var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
+ var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
+ var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
+ var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
+ var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
+ var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
+ var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0;
+ var $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa48 = 0, $cond20 = 0, $cond21 = 0, $not$ = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
+ sp = STACKTOP;
+ $0 = ($mem|0)==(0|0);
+ if ($0) {
+  return;
+ }
+ $1 = ((($mem)) + -8|0);
+ $2 = HEAP32[(188)>>2]|0;
+ $3 = ($1>>>0)<($2>>>0);
+ if ($3) {
+  _abort();
+  // unreachable;
+ }
+ $4 = ((($mem)) + -4|0);
+ $5 = HEAP32[$4>>2]|0;
+ $6 = $5 & 3;
+ $7 = ($6|0)==(1);
+ if ($7) {
+  _abort();
+  // unreachable;
+ }
+ $8 = $5 & -8;
+ $9 = (($1) + ($8)|0);
+ $10 = $5 & 1;
+ $11 = ($10|0)==(0);
+ do {
+  if ($11) {
+   $12 = HEAP32[$1>>2]|0;
+   $13 = ($6|0)==(0);
+   if ($13) {
+    return;
+   }
+   $14 = (0 - ($12))|0;
+   $15 = (($1) + ($14)|0);
+   $16 = (($12) + ($8))|0;
+   $17 = ($15>>>0)<($2>>>0);
+   if ($17) {
+    _abort();
+    // unreachable;
+   }
+   $18 = HEAP32[(192)>>2]|0;
+   $19 = ($15|0)==($18|0);
+   if ($19) {
+    $104 = ((($9)) + 4|0);
+    $105 = HEAP32[$104>>2]|0;
+    $106 = $105 & 3;
+    $107 = ($106|0)==(3);
+    if (!($107)) {
+     $p$1 = $15;$psize$1 = $16;
+     break;
+    }
+    HEAP32[(180)>>2] = $16;
+    $108 = $105 & -2;
+    HEAP32[$104>>2] = $108;
+    $109 = $16 | 1;
+    $110 = ((($15)) + 4|0);
+    HEAP32[$110>>2] = $109;
+    $111 = (($15) + ($16)|0);
+    HEAP32[$111>>2] = $16;
+    return;
+   }
+   $20 = $12 >>> 3;
+   $21 = ($12>>>0)<(256);
+   if ($21) {
+    $22 = ((($15)) + 8|0);
+    $23 = HEAP32[$22>>2]|0;
+    $24 = ((($15)) + 12|0);
+    $25 = HEAP32[$24>>2]|0;
+    $26 = $20 << 1;
+    $27 = (212 + ($26<<2)|0);
+    $28 = ($23|0)==($27|0);
+    if (!($28)) {
+     $29 = ($23>>>0)<($2>>>0);
+     if ($29) {
+      _abort();
+      // unreachable;
+     }
+     $30 = ((($23)) + 12|0);
+     $31 = HEAP32[$30>>2]|0;
+     $32 = ($31|0)==($15|0);
+     if (!($32)) {
+      _abort();
+      // unreachable;
+     }
+    }
+    $33 = ($25|0)==($23|0);
+    if ($33) {
+     $34 = 1 << $20;
+     $35 = $34 ^ -1;
+     $36 = HEAP32[43]|0;
+     $37 = $36 & $35;
+     HEAP32[43] = $37;
+     $p$1 = $15;$psize$1 = $16;
+     break;
+    }
+    $38 = ($25|0)==($27|0);
+    if ($38) {
+     $$pre42 = ((($25)) + 8|0);
+     $$pre$phi43Z2D = $$pre42;
+    } else {
+     $39 = ($25>>>0)<($2>>>0);
+     if ($39) {
+      _abort();
+      // unreachable;
+     }
+     $40 = ((($25)) + 8|0);
+     $41 = HEAP32[$40>>2]|0;
+     $42 = ($41|0)==($15|0);
+     if ($42) {
+      $$pre$phi43Z2D = $40;
+     } else {
+      _abort();
+      // unreachable;
+     }
+    }
+    $43 = ((($23)) + 12|0);
+    HEAP32[$43>>2] = $25;
+    HEAP32[$$pre$phi43Z2D>>2] = $23;
+    $p$1 = $15;$psize$1 = $16;
+    break;
+   }
+   $44 = ((($15)) + 24|0);
+   $45 = HEAP32[$44>>2]|0;
+   $46 = ((($15)) + 12|0);
+   $47 = HEAP32[$46>>2]|0;
+   $48 = ($47|0)==($15|0);
+   do {
+    if ($48) {
+     $58 = ((($15)) + 16|0);
+     $59 = ((($58)) + 4|0);
+     $60 = HEAP32[$59>>2]|0;
+     $61 = ($60|0)==(0|0);
+     if ($61) {
+      $62 = HEAP32[$58>>2]|0;
+      $63 = ($62|0)==(0|0);
+      if ($63) {
+       $R$3 = 0;
+       break;
+      } else {
+       $R$1 = $62;$RP$1 = $58;
+      }
+     } else {
+      $R$1 = $60;$RP$1 = $59;
+     }
+     while(1) {
+      $64 = ((($R$1)) + 20|0);
+      $65 = HEAP32[$64>>2]|0;
+      $66 = ($65|0)==(0|0);
+      if (!($66)) {
+       $R$1 = $65;$RP$1 = $64;
+       continue;
+      }
+      $67 = ((($R$1)) + 16|0);
+      $68 = HEAP32[$67>>2]|0;
+      $69 = ($68|0)==(0|0);
+      if ($69) {
+       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
+       break;
+      } else {
+       $R$1 = $68;$RP$1 = $67;
+      }
+     }
+     $70 = ($RP$1$lcssa>>>0)<($2>>>0);
+     if ($70) {
+      _abort();
+      // unreachable;
+     } else {
+      HEAP32[$RP$1$lcssa>>2] = 0;
+      $R$3 = $R$1$lcssa;
+      break;
+     }
+    } else {
+     $49 = ((($15)) + 8|0);
+     $50 = HEAP32[$49>>2]|0;
+     $51 = ($50>>>0)<($2>>>0);
+     if ($51) {
+      _abort();
+      // unreachable;
+     }
+     $52 = ((($50)) + 12|0);
+     $53 = HEAP32[$52>>2]|0;
+     $54 = ($53|0)==($15|0);
+     if (!($54)) {
+      _abort();
+      // unreachable;
+     }
+     $55 = ((($47)) + 8|0);
+     $56 = HEAP32[$55>>2]|0;
+     $57 = ($56|0)==($15|0);
+     if ($57) {
+      HEAP32[$52>>2] = $47;
+      HEAP32[$55>>2] = $50;
+      $R$3 = $47;
+      break;
+     } else {
+      _abort();
+      // unreachable;
+     }
+    }
+   } while(0);
+   $71 = ($45|0)==(0|0);
+   if ($71) {
+    $p$1 = $15;$psize$1 = $16;
+   } else {
+    $72 = ((($15)) + 28|0);
+    $73 = HEAP32[$72>>2]|0;
+    $74 = (476 + ($73<<2)|0);
+    $75 = HEAP32[$74>>2]|0;
+    $76 = ($15|0)==($75|0);
+    if ($76) {
+     HEAP32[$74>>2] = $R$3;
+     $cond20 = ($R$3|0)==(0|0);
+     if ($cond20) {
+      $77 = 1 << $73;
+      $78 = $77 ^ -1;
+      $79 = HEAP32[(176)>>2]|0;
+      $80 = $79 & $78;
+      HEAP32[(176)>>2] = $80;
+      $p$1 = $15;$psize$1 = $16;
+      break;
+     }
+    } else {
+     $81 = HEAP32[(188)>>2]|0;
+     $82 = ($45>>>0)<($81>>>0);
+     if ($82) {
+      _abort();
+      // unreachable;
+     }
+     $83 = ((($45)) + 16|0);
+     $84 = HEAP32[$83>>2]|0;
+     $85 = ($84|0)==($15|0);
+     if ($85) {
+      HEAP32[$83>>2] = $R$3;
+     } else {
+      $86 = ((($45)) + 20|0);
+      HEAP32[$86>>2] = $R$3;
+     }
+     $87 = ($R$3|0)==(0|0);
+     if ($87) {
+      $p$1 = $15;$psize$1 = $16;
+      break;
+     }
+    }
+    $88 = HEAP32[(188)>>2]|0;
+    $89 = ($R$3>>>0)<($88>>>0);
+    if ($89) {
+     _abort();
+     // unreachable;
+    }
+    $90 = ((($R$3)) + 24|0);
+    HEAP32[$90>>2] = $45;
+    $91 = ((($15)) + 16|0);
+    $92 = HEAP32[$91>>2]|0;
+    $93 = ($92|0)==(0|0);
+    do {
+     if (!($93)) {
+      $94 = ($92>>>0)<($88>>>0);
+      if ($94) {
+       _abort();
+       // unreachable;
+      } else {
+       $95 = ((($R$3)) + 16|0);
+       HEAP32[$95>>2] = $92;
+       $96 = ((($92)) + 24|0);
+       HEAP32[$96>>2] = $R$3;
+       break;
+      }
+     }
+    } while(0);
+    $97 = ((($91)) + 4|0);
+    $98 = HEAP32[$97>>2]|0;
+    $99 = ($98|0)==(0|0);
+    if ($99) {
+     $p$1 = $15;$psize$1 = $16;
+    } else {
+     $100 = HEAP32[(188)>>2]|0;
+     $101 = ($98>>>0)<($100>>>0);
+     if ($101) {
+      _abort();
+      // unreachable;
+     } else {
+      $102 = ((($R$3)) + 20|0);
+      HEAP32[$102>>2] = $98;
+      $103 = ((($98)) + 24|0);
+      HEAP32[$103>>2] = $R$3;
+      $p$1 = $15;$psize$1 = $16;
+      break;
+     }
+    }
+   }
+  } else {
+   $p$1 = $1;$psize$1 = $8;
+  }
+ } while(0);
+ $112 = ($p$1>>>0)<($9>>>0);
+ if (!($112)) {
+  _abort();
+  // unreachable;
+ }
+ $113 = ((($9)) + 4|0);
+ $114 = HEAP32[$113>>2]|0;
+ $115 = $114 & 1;
+ $116 = ($115|0)==(0);
+ if ($116) {
+  _abort();
+  // unreachable;
+ }
+ $117 = $114 & 2;
+ $118 = ($117|0)==(0);
+ if ($118) {
+  $119 = HEAP32[(196)>>2]|0;
+  $120 = ($9|0)==($119|0);
+  if ($120) {
+   $121 = HEAP32[(184)>>2]|0;
+   $122 = (($121) + ($psize$1))|0;
+   HEAP32[(184)>>2] = $122;
+   HEAP32[(196)>>2] = $p$1;
+   $123 = $122 | 1;
+   $124 = ((($p$1)) + 4|0);
+   HEAP32[$124>>2] = $123;
+   $125 = HEAP32[(192)>>2]|0;
+   $126 = ($p$1|0)==($125|0);
+   if (!($126)) {
+    return;
+   }
+   HEAP32[(192)>>2] = 0;
+   HEAP32[(180)>>2] = 0;
+   return;
+  }
+  $127 = HEAP32[(192)>>2]|0;
+  $128 = ($9|0)==($127|0);
+  if ($128) {
+   $129 = HEAP32[(180)>>2]|0;
+   $130 = (($129) + ($psize$1))|0;
+   HEAP32[(180)>>2] = $130;
+   HEAP32[(192)>>2] = $p$1;
+   $131 = $130 | 1;
+   $132 = ((($p$1)) + 4|0);
+   HEAP32[$132>>2] = $131;
+   $133 = (($p$1) + ($130)|0);
+   HEAP32[$133>>2] = $130;
+   return;
+  }
+  $134 = $114 & -8;
+  $135 = (($134) + ($psize$1))|0;
+  $136 = $114 >>> 3;
+  $137 = ($114>>>0)<(256);
+  do {
+   if ($137) {
+    $138 = ((($9)) + 8|0);
+    $139 = HEAP32[$138>>2]|0;
+    $140 = ((($9)) + 12|0);
+    $141 = HEAP32[$140>>2]|0;
+    $142 = $136 << 1;
+    $143 = (212 + ($142<<2)|0);
+    $144 = ($139|0)==($143|0);
+    if (!($144)) {
+     $145 = HEAP32[(188)>>2]|0;
+     $146 = ($139>>>0)<($145>>>0);
+     if ($146) {
+      _abort();
+      // unreachable;
+     }
+     $147 = ((($139)) + 12|0);
+     $148 = HEAP32[$147>>2]|0;
+     $149 = ($148|0)==($9|0);
+     if (!($149)) {
+      _abort();
+      // unreachable;
+     }
+    }
+    $150 = ($141|0)==($139|0);
+    if ($150) {
+     $151 = 1 << $136;
+     $152 = $151 ^ -1;
+     $153 = HEAP32[43]|0;
+     $154 = $153 & $152;
+     HEAP32[43] = $154;
+     break;
+    }
+    $155 = ($141|0)==($143|0);
+    if ($155) {
+     $$pre40 = ((($141)) + 8|0);
+     $$pre$phi41Z2D = $$pre40;
+    } else {
+     $156 = HEAP32[(188)>>2]|0;
+     $157 = ($141>>>0)<($156>>>0);
+     if ($157) {
+      _abort();
+      // unreachable;
+     }
+     $158 = ((($141)) + 8|0);
+     $159 = HEAP32[$158>>2]|0;
+     $160 = ($159|0)==($9|0);
+     if ($160) {
+      $$pre$phi41Z2D = $158;
+     } else {
+      _abort();
+      // unreachable;
+     }
+    }
+    $161 = ((($139)) + 12|0);
+    HEAP32[$161>>2] = $141;
+    HEAP32[$$pre$phi41Z2D>>2] = $139;
+   } else {
+    $162 = ((($9)) + 24|0);
+    $163 = HEAP32[$162>>2]|0;
+    $164 = ((($9)) + 12|0);
+    $165 = HEAP32[$164>>2]|0;
+    $166 = ($165|0)==($9|0);
+    do {
+     if ($166) {
+      $177 = ((($9)) + 16|0);
+      $178 = ((($177)) + 4|0);
+      $179 = HEAP32[$178>>2]|0;
+      $180 = ($179|0)==(0|0);
+      if ($180) {
+       $181 = HEAP32[$177>>2]|0;
+       $182 = ($181|0)==(0|0);
+       if ($182) {
+        $R8$3 = 0;
+        break;
+       } else {
+        $R8$1 = $181;$RP10$1 = $177;
+       }
+      } else {
+       $R8$1 = $179;$RP10$1 = $178;
+      }
+      while(1) {
+       $183 = ((($R8$1)) + 20|0);
+       $184 = HEAP32[$183>>2]|0;
+       $185 = ($184|0)==(0|0);
+       if (!($185)) {
+        $R8$1 = $184;$RP10$1 = $183;
+        continue;
+       }
+       $186 = ((($R8$1)) + 16|0);
+       $187 = HEAP32[$186>>2]|0;
+       $188 = ($187|0)==(0|0);
+       if ($188) {
+        $R8$1$lcssa = $R8$1;$RP10$1$lcssa = $RP10$1;
+        break;
+       } else {
+        $R8$1 = $187;$RP10$1 = $186;
+       }
+      }
+      $189 = HEAP32[(188)>>2]|0;
+      $190 = ($RP10$1$lcssa>>>0)<($189>>>0);
+      if ($190) {
+       _abort();
+       // unreachable;
+      } else {
+       HEAP32[$RP10$1$lcssa>>2] = 0;
+       $R8$3 = $R8$1$lcssa;
+       break;
+      }
+     } else {
+      $167 = ((($9)) + 8|0);
+      $168 = HEAP32[$167>>2]|0;
+      $169 = HEAP32[(188)>>2]|0;
+      $170 = ($168>>>0)<($169>>>0);
+      if ($170) {
+       _abort();
+       // unreachable;
+      }
+      $171 = ((($168)) + 12|0);
+      $172 = HEAP32[$171>>2]|0;
+      $173 = ($172|0)==($9|0);
+      if (!($173)) {
+       _abort();
+       // unreachable;
+      }
+      $174 = ((($165)) + 8|0);
+      $175 = HEAP32[$174>>2]|0;
+      $176 = ($175|0)==($9|0);
+      if ($176) {
+       HEAP32[$171>>2] = $165;
+       HEAP32[$174>>2] = $168;
+       $R8$3 = $165;
+       break;
+      } else {
+       _abort();
+       // unreachable;
+      }
+     }
+    } while(0);
+    $191 = ($163|0)==(0|0);
+    if (!($191)) {
+     $192 = ((($9)) + 28|0);
+     $193 = HEAP32[$192>>2]|0;
+     $194 = (476 + ($193<<2)|0);
+     $195 = HEAP32[$194>>2]|0;
+     $196 = ($9|0)==($195|0);
+     if ($196) {
+      HEAP32[$194>>2] = $R8$3;
+      $cond21 = ($R8$3|0)==(0|0);
+      if ($cond21) {
+       $197 = 1 << $193;
+       $198 = $197 ^ -1;
+       $199 = HEAP32[(176)>>2]|0;
+       $200 = $199 & $198;
+       HEAP32[(176)>>2] = $200;
+       break;
+      }
+     } else {
+      $201 = HEAP32[(188)>>2]|0;
+      $202 = ($163>>>0)<($201>>>0);
+      if ($202) {
+       _abort();
+       // unreachable;
+      }
+      $203 = ((($163)) + 16|0);
+      $204 = HEAP32[$203>>2]|0;
+      $205 = ($204|0)==($9|0);
+      if ($205) {
+       HEAP32[$203>>2] = $R8$3;
+      } else {
+       $206 = ((($163)) + 20|0);
+       HEAP32[$206>>2] = $R8$3;
+      }
+      $207 = ($R8$3|0)==(0|0);
+      if ($207) {
+       break;
+      }
+     }
+     $208 = HEAP32[(188)>>2]|0;
+     $209 = ($R8$3>>>0)<($208>>>0);
+     if ($209) {
+      _abort();
+      // unreachable;
+     }
+     $210 = ((($R8$3)) + 24|0);
+     HEAP32[$210>>2] = $163;
+     $211 = ((($9)) + 16|0);
+     $212 = HEAP32[$211>>2]|0;
+     $213 = ($212|0)==(0|0);
+     do {
+      if (!($213)) {
+       $214 = ($212>>>0)<($208>>>0);
+       if ($214) {
+        _abort();
+        // unreachable;
+       } else {
+        $215 = ((($R8$3)) + 16|0);
+        HEAP32[$215>>2] = $212;
+        $216 = ((($212)) + 24|0);
+        HEAP32[$216>>2] = $R8$3;
+        break;
+       }
+      }
+     } while(0);
+     $217 = ((($211)) + 4|0);
+     $218 = HEAP32[$217>>2]|0;
+     $219 = ($218|0)==(0|0);
+     if (!($219)) {
+      $220 = HEAP32[(188)>>2]|0;
+      $221 = ($218>>>0)<($220>>>0);
+      if ($221) {
+       _abort();
+       // unreachable;
+      } else {
+       $222 = ((($R8$3)) + 20|0);
+       HEAP32[$222>>2] = $218;
+       $223 = ((($218)) + 24|0);
+       HEAP32[$223>>2] = $R8$3;
+       break;
+      }
+     }
+    }
+   }
+  } while(0);
+  $224 = $135 | 1;
+  $225 = ((($p$1)) + 4|0);
+  HEAP32[$225>>2] = $224;
+  $226 = (($p$1) + ($135)|0);
+  HEAP32[$226>>2] = $135;
+  $227 = HEAP32[(192)>>2]|0;
+  $228 = ($p$1|0)==($227|0);
+  if ($228) {
+   HEAP32[(180)>>2] = $135;
+   return;
+  } else {
+   $psize$2 = $135;
+  }
+ } else {
+  $229 = $114 & -2;
+  HEAP32[$113>>2] = $229;
+  $230 = $psize$1 | 1;
+  $231 = ((($p$1)) + 4|0);
+  HEAP32[$231>>2] = $230;
+  $232 = (($p$1) + ($psize$1)|0);
+  HEAP32[$232>>2] = $psize$1;
+  $psize$2 = $psize$1;
+ }
+ $233 = $psize$2 >>> 3;
+ $234 = ($psize$2>>>0)<(256);
+ if ($234) {
+  $235 = $233 << 1;
+  $236 = (212 + ($235<<2)|0);
+  $237 = HEAP32[43]|0;
+  $238 = 1 << $233;
+  $239 = $237 & $238;
+  $240 = ($239|0)==(0);
+  if ($240) {
+   $241 = $237 | $238;
+   HEAP32[43] = $241;
+   $$pre = ((($236)) + 8|0);
+   $$pre$phiZ2D = $$pre;$F18$0 = $236;
+  } else {
+   $242 = ((($236)) + 8|0);
+   $243 = HEAP32[$242>>2]|0;
+   $244 = HEAP32[(188)>>2]|0;
+   $245 = ($243>>>0)<($244>>>0);
+   if ($245) {
+    _abort();
+    // unreachable;
+   } else {
+    $$pre$phiZ2D = $242;$F18$0 = $243;
+   }
+  }
+  HEAP32[$$pre$phiZ2D>>2] = $p$1;
+  $246 = ((($F18$0)) + 12|0);
+  HEAP32[$246>>2] = $p$1;
+  $247 = ((($p$1)) + 8|0);
+  HEAP32[$247>>2] = $F18$0;
+  $248 = ((($p$1)) + 12|0);
+  HEAP32[$248>>2] = $236;
+  return;
+ }
+ $249 = $psize$2 >>> 8;
+ $250 = ($249|0)==(0);
+ if ($250) {
+  $I20$0 = 0;
+ } else {
+  $251 = ($psize$2>>>0)>(16777215);
+  if ($251) {
+   $I20$0 = 31;
+  } else {
+   $252 = (($249) + 1048320)|0;
+   $253 = $252 >>> 16;
+   $254 = $253 & 8;
+   $255 = $249 << $254;
+   $256 = (($255) + 520192)|0;
+   $257 = $256 >>> 16;
+   $258 = $257 & 4;
+   $259 = $258 | $254;
+   $260 = $255 << $258;
+   $261 = (($260) + 245760)|0;
+   $262 = $261 >>> 16;
+   $263 = $262 & 2;
+   $264 = $259 | $263;
+   $265 = (14 - ($264))|0;
+   $266 = $260 << $263;
+   $267 = $266 >>> 15;
+   $268 = (($265) + ($267))|0;
+   $269 = $268 << 1;
+   $270 = (($268) + 7)|0;
+   $271 = $psize$2 >>> $270;
+   $272 = $271 & 1;
+   $273 = $272 | $269;
+   $I20$0 = $273;
+  }
+ }
+ $274 = (476 + ($I20$0<<2)|0);
+ $275 = ((($p$1)) + 28|0);
+ HEAP32[$275>>2] = $I20$0;
+ $276 = ((($p$1)) + 16|0);
+ $277 = ((($p$1)) + 20|0);
+ HEAP32[$277>>2] = 0;
+ HEAP32[$276>>2] = 0;
+ $278 = HEAP32[(176)>>2]|0;
+ $279 = 1 << $I20$0;
+ $280 = $278 & $279;
+ $281 = ($280|0)==(0);
+ do {
+  if ($281) {
+   $282 = $278 | $279;
+   HEAP32[(176)>>2] = $282;
+   HEAP32[$274>>2] = $p$1;
+   $283 = ((($p$1)) + 24|0);
+   HEAP32[$283>>2] = $274;
+   $284 = ((($p$1)) + 12|0);
+   HEAP32[$284>>2] = $p$1;
+   $285 = ((($p$1)) + 8|0);
+   HEAP32[$285>>2] = $p$1;
+  } else {
+   $286 = HEAP32[$274>>2]|0;
+   $287 = ($I20$0|0)==(31);
+   $288 = $I20$0 >>> 1;
+   $289 = (25 - ($288))|0;
+   $290 = $287 ? 0 : $289;
+   $291 = $psize$2 << $290;
+   $K21$0 = $291;$T$0 = $286;
+   while(1) {
+    $292 = ((($T$0)) + 4|0);
+    $293 = HEAP32[$292>>2]|0;
+    $294 = $293 & -8;
+    $295 = ($294|0)==($psize$2|0);
+    if ($295) {
+     $T$0$lcssa = $T$0;
+     label = 130;
+     break;
+    }
+    $296 = $K21$0 >>> 31;
+    $297 = (((($T$0)) + 16|0) + ($296<<2)|0);
+    $298 = $K21$0 << 1;
+    $299 = HEAP32[$297>>2]|0;
+    $300 = ($299|0)==(0|0);
+    if ($300) {
+     $$lcssa = $297;$T$0$lcssa48 = $T$0;
+     label = 127;
+     break;
+    } else {
+     $K21$0 = $298;$T$0 = $299;
+    }
+   }
+   if ((label|0) == 127) {
+    $301 = HEAP32[(188)>>2]|0;
+    $302 = ($$lcssa>>>0)<($301>>>0);
+    if ($302) {
+     _abort();
+     // unreachable;
+    } else {
+     HEAP32[$$lcssa>>2] = $p$1;
+     $303 = ((($p$1)) + 24|0);
+     HEAP32[$303>>2] = $T$0$lcssa48;
+     $304 = ((($p$1)) + 12|0);
+     HEAP32[$304>>2] = $p$1;
+     $305 = ((($p$1)) + 8|0);
+     HEAP32[$305>>2] = $p$1;
+     break;
+    }
+   }
+   else if ((label|0) == 130) {
+    $306 = ((($T$0$lcssa)) + 8|0);
+    $307 = HEAP32[$306>>2]|0;
+    $308 = HEAP32[(188)>>2]|0;
+    $309 = ($307>>>0)>=($308>>>0);
+    $not$ = ($T$0$lcssa>>>0)>=($308>>>0);
+    $310 = $309 & $not$;
+    if ($310) {
+     $311 = ((($307)) + 12|0);
+     HEAP32[$311>>2] = $p$1;
+     HEAP32[$306>>2] = $p$1;
+     $312 = ((($p$1)) + 8|0);
+     HEAP32[$312>>2] = $307;
+     $313 = ((($p$1)) + 12|0);
+     HEAP32[$313>>2] = $T$0$lcssa;
+     $314 = ((($p$1)) + 24|0);
+     HEAP32[$314>>2] = 0;
+     break;
+    } else {
+     _abort();
+     // unreachable;
+    }
+   }
+  }
+ } while(0);
+ $315 = HEAP32[(204)>>2]|0;
+ $316 = (($315) + -1)|0;
+ HEAP32[(204)>>2] = $316;
+ $317 = ($316|0)==(0);
+ if ($317) {
+  $sp$0$in$i = (628);
+ } else {
+  return;
+ }
+ while(1) {
+  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
+  $318 = ($sp$0$i|0)==(0|0);
+  $319 = ((($sp$0$i)) + 8|0);
+  if ($318) {
+   break;
+  } else {
+   $sp$0$in$i = $319;
+  }
+ }
+ HEAP32[(204)>>2] = -1;
+ return;
+}
+function runPostSets() {
+}
+function _memset(ptr, value, num) {
+    ptr = ptr|0; value = value|0; num = num|0;
+    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
+    stop = (ptr + num)|0;
+    if ((num|0) >= 20) {
+      // This is unaligned, but quite large, so work hard to get to aligned settings
+      value = value & 0xff;
+      unaligned = ptr & 3;
+      value4 = value | (value << 8) | (value << 16) | (value << 24);
+      stop4 = stop & ~3;
+      if (unaligned) {
+        unaligned = (ptr + 4 - unaligned)|0;
+        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
+          HEAP8[((ptr)>>0)]=value;
+          ptr = (ptr+1)|0;
+        }
+      }
+      while ((ptr|0) < (stop4|0)) {
+        HEAP32[((ptr)>>2)]=value4;
+        ptr = (ptr+4)|0;
+      }
+    }
+    while ((ptr|0) < (stop|0)) {
+      HEAP8[((ptr)>>0)]=value;
+      ptr = (ptr+1)|0;
+    }
+    return (ptr-num)|0;
+}
+function _memcpy(dest, src, num) {
+    dest = dest|0; src = src|0; num = num|0;
+    var ret = 0;
+    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
+    ret = dest|0;
+    if ((dest&3) == (src&3)) {
+      while (dest & 3) {
+        if ((num|0) == 0) return ret|0;
+        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
+        dest = (dest+1)|0;
+        src = (src+1)|0;
+        num = (num-1)|0;
+      }
+      while ((num|0) >= 4) {
+        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
+        dest = (dest+4)|0;
+        src = (src+4)|0;
+        num = (num-4)|0;
+      }
+    }
+    while ((num|0) > 0) {
+      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
+      dest = (dest+1)|0;
+      src = (src+1)|0;
+      num = (num-1)|0;
+    }
+    return ret|0;
+}
+function _pthread_self() {
+    return 0;
+}
+
+  
+function dynCall_ii(index,a1) {
+  index = index|0;
+  a1=a1|0;
+  return FUNCTION_TABLE_ii[index&1](a1|0)|0;
+}
+
+
+function dynCall_iiii(index,a1,a2,a3) {
+  index = index|0;
+  a1=a1|0; a2=a2|0; a3=a3|0;
+  return FUNCTION_TABLE_iiii[index&7](a1|0,a2|0,a3|0)|0;
+}
+
+
+function dynCall_vi(index,a1) {
+  index = index|0;
+  a1=a1|0;
+  FUNCTION_TABLE_vi[index&7](a1|0);
+}
+
+function b0(p0) {
+ p0 = p0|0; nullFunc_ii(0);return 0;
+}
+function b1(p0,p1,p2) {
+ p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
+}
+function b2(p0) {
+ p0 = p0|0; nullFunc_vi(2);
+}
+
+// EMSCRIPTEN_END_FUNCS
+var FUNCTION_TABLE_ii = [b0,___stdio_close];
+var FUNCTION_TABLE_iiii = [b1,b1,___stdout_write,___stdio_seek,b1,___stdio_write,b1,b1];
+var FUNCTION_TABLE_vi = [b2,b2,b2,b2,_cleanup,b2,b2,b2];
+
+  return { _free: _free, _main: _main, _pthread_self: _pthread_self, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _fflush: _fflush, ___errno_location: ___errno_location, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi };
+})
+// EMSCRIPTEN_END_ASM
+(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
+
+var real__free = asm["_free"]; asm["_free"] = function() {
+assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
+assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
+return real__free.apply(null, arguments);
+};
+
+var real__main = asm["_main"]; asm["_main"] = function() {
+assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
+assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
+return real__main.apply(null, arguments);
+};
+
+var real__pthread_self = asm["_pthread_self"]; asm["_pthread_self"] = function() {
+assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
+assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
+return real__pthread_self.apply(null, arguments);
+};
+
+var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
+assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
+assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
+return real__malloc.apply(null, arguments);
+};
+
+var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
+assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
+assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
+return real__fflush.apply(null, arguments);
+};
+
+var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
+assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
+assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
+return real____errno_location.apply(null, arguments);
+};
+var _free = Module["_free"] = asm["_free"];
+var _main = Module["_main"] = asm["_main"];
+var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
+var _memset = Module["_memset"] = asm["_memset"];
+var _malloc = Module["_malloc"] = asm["_malloc"];
+var _memcpy = Module["_memcpy"] = asm["_memcpy"];
+var _fflush = Module["_fflush"] = asm["_fflush"];
+var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
+var runPostSets = Module["runPostSets"] = asm["runPostSets"];
+var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
+var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
+var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
+;
+
+Runtime.stackAlloc = asm['stackAlloc'];
+Runtime.stackSave = asm['stackSave'];
+Runtime.stackRestore = asm['stackRestore'];
+Runtime.establishStackSpace = asm['establishStackSpace'];
+
+Runtime.setTempRet0 = asm['setTempRet0'];
+Runtime.getTempRet0 = asm['getTempRet0'];
+
+
+
+// === Auto-generated postamble setup entry stuff ===
+
+
+
+
+
+function ExitStatus(status) {
+  this.name = "ExitStatus";
+  this.message = "Program terminated with exit(" + status + ")";
+  this.status = status;
+};
+ExitStatus.prototype = new Error();
+ExitStatus.prototype.constructor = ExitStatus;
+
+var initialStackTop;
+var preloadStartTime = null;
+var calledMain = false;
+
+dependenciesFulfilled = function runCaller() {
+  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
+  if (!Module['calledRun']) run();
+  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
+}
+
+Module['callMain'] = Module.callMain = function callMain(args) {
+  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
+  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');
+
+  args = args || [];
+
+  ensureInitRuntime();
+
+  var argc = args.length+1;
+  function pad() {
+    for (var i = 0; i < 4-1; i++) {
+      argv.push(0);
+    }
+  }
+  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
+  pad();
+  for (var i = 0; i < argc-1; i = i + 1) {
+    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
+    pad();
+  }
+  argv.push(0);
+  argv = allocate(argv, 'i32', ALLOC_NORMAL);
+
+
+  try {
+
+    var ret = Module['_main'](argc, argv, 0);
+
+
+    // if we're not running an evented main loop, it's time to exit
+    exit(ret, /* implicit = */ true);
+  }
+  catch(e) {
+    if (e instanceof ExitStatus) {
+      // exit() throws this once it's done to make sure execution
+      // has been stopped completely
+      return;
+    } else if (e == 'SimulateInfiniteLoop') {
+      // running an evented main loop, don't immediately exit
+      Module['noExitRuntime'] = true;
+      return;
+    } else {
+      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
+      throw e;
+    }
+  } finally {
+    calledMain = true;
+  }
+}
+
+
+
+
+function run(args) {
+  args = args || Module['arguments'];
+
+  if (preloadStartTime === null) preloadStartTime = Date.now();
+
+  if (runDependencies > 0) {
+    Module.printErr('run() called, but dependencies remain, so not running');
+    return;
+  }
+
+  writeStackCookie();
+
+  preRun();
+
+  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
+  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame
+
+  function doRun() {
+    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
+    Module['calledRun'] = true;
+
+    if (ABORT) return;
+
+    ensureInitRuntime();
+
+    preMain();
+
+    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
+      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
+    }
+
+    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();
+
+    if (Module['_main'] && shouldRunNow) Module['callMain'](args);
+
+    postRun();
+  }
+
+  if (Module['setStatus']) {
+    Module['setStatus']('Running...');
+    setTimeout(function() {
+      setTimeout(function() {
+        Module['setStatus']('');
+      }, 1);
+      doRun();
+    }, 1);
+  } else {
+    doRun();
+  }
+  checkStackCookie();
+}
+Module['run'] = Module.run = run;
+
+function exit(status, implicit) {
+  if (implicit && Module['noExitRuntime']) {
+    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
+    return;
+  }
+
+  if (Module['noExitRuntime']) {
+    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
+  } else {
+
+    ABORT = true;
+    EXITSTATUS = status;
+    STACKTOP = initialStackTop;
+
+    exitRuntime();
+
+    if (Module['onExit']) Module['onExit'](status);
+  }
+
+  if (ENVIRONMENT_IS_NODE) {
+    process['exit'](status);
+  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
+    quit(status);
+  }
+  // if we reach here, we must throw an exception to halt the current execution
+  throw new ExitStatus(status);
+}
+Module['exit'] = Module.exit = exit;
+
+var abortDecorators = [];
+
+function abort(what) {
+  if (what !== undefined) {
+    Module.print(what);
+    Module.printErr(what);
+    what = JSON.stringify(what)
+  } else {
+    what = '';
+  }
+
+  ABORT = true;
+  EXITSTATUS = 1;
+
+  var extra = '';
+
+  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
+  if (abortDecorators) {
+    abortDecorators.forEach(function(decorator) {
+      output = decorator(output, what);
+    });
+  }
+  throw output;
+}
+Module['abort'] = Module.abort = abort;
+
+// {{PRE_RUN_ADDITIONS}}
+
+if (Module['preInit']) {
+  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
+  while (Module['preInit'].length > 0) {
+    Module['preInit'].pop()();
+  }
+}
+
+// shouldRunNow refers to calling main(), not run().
+var shouldRunNow = true;
+if (Module['noInitialRun']) {
+  shouldRunNow = false;
+}
+
+
+run();
+
+// {{POST_RUN_ADDITIONS}}
+
+
+
+
+
+// {{MODULE_ADDITIONS}}
+
+
+
diff -urN Python-2.7.11/config.site Python-2.7.11-em/config.site
--- Python-2.7.11/config.site	1970-01-01 01:00:00.000000000 +0100
+++ Python-2.7.11-em/config.site	2016-05-15 02:30:09.060201194 +0200
@@ -0,0 +1,2 @@
+ac_cv_file__dev_ptmx=no
+ac_cv_file__dev_ptc=no
diff -urN Python-2.7.11/config.sub Python-2.7.11-em/config.sub
--- Python-2.7.11/config.sub	2015-12-05 20:47:20.000000000 +0100
+++ Python-2.7.11-em/config.sub	2016-05-15 02:30:09.061201194 +0200
@@ -119,7 +119,8 @@
   linux-musl* | linux-uclibc* | uclinux-uclibc* | uclinux-gnu* | kfreebsd*-gnu* | \
   knetbsd*-gnu* | netbsd*-gnu* | \
   kopensolaris*-gnu* | \
-  storm-chaos* | os2-emx* | rtmk-nova*)
+  storm-chaos* | os2-emx* | rtmk-nova* | \
+  emscripten)
     os=-$maybe_os
     basic_machine=`echo $1 | sed 's/^\(.*\)-\([^-]*-[^-]*\)$/\1/'`
     ;;
@@ -254,6 +255,7 @@
 	| am33_2.0 \
 	| arc | arceb \
 	| arm | arm[bl]e | arme[lb] | armv[2-8] | armv[3-8][lb] | armv7[arm] \
+	| asmjs \
 	| avr | avr32 \
 	| be32 | be64 \
 	| bfin \
@@ -1510,6 +1512,8 @@
 	-dicos*)
 		os=-dicos
 		;;
+	-emscripten)
+		;;
 	-nacl*)
 		;;
 	-none)
diff -urN Python-2.7.11/configure Python-2.7.11-em/configure
--- Python-2.7.11/configure	2015-12-05 20:47:20.000000000 +0100
+++ Python-2.7.11-em/configure	2016-05-15 02:30:09.065201194 +0200
@@ -3212,6 +3212,9 @@
 	*-*-cygwin*)
 		ac_sys_system=Cygwin
 		;;
+	asmjs-*-*)
+		ac_sys_system=Emscripten
+		;;
 	*)
 		# for now, limit cross builds to known configurations
 		MACHDEP="unknown"
@@ -3258,6 +3261,9 @@
 	*-*-cygwin*)
 		_host_cpu=
 		;;
+	asmjs-*-*)
+		_host_cpu=
+		;;
 	*)
 		# for now, limit cross builds to known configurations
 		MACHDEP="unknown"
@@ -8826,7 +8832,7 @@
 	*) ;;
 esac
 
-# Most SVR4 platforms (e.g. Solaris) need -lsocket and -lnsl.
+# Most SVR4 platforms (e.g. Solaris) need  and -lnsl.
 # BeOS' sockets are stashed in libnet.
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking for t_open in -lnsl" >&5
 $as_echo_n "checking for t_open in -lnsl... " >&6; }
@@ -8874,7 +8880,7 @@
   $as_echo_n "(cached) " >&6
 else
   ac_check_lib_save_LIBS=$LIBS
-LIBS="-lsocket $LIBS $LIBS"
+LIBS=" $LIBS $LIBS"
 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
@@ -8905,7 +8911,7 @@
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_socket_socket" >&5
 $as_echo "$ac_cv_lib_socket_socket" >&6; }
 if test "x$ac_cv_lib_socket_socket" = xyes; then :
-  LIBS="-lsocket $LIBS"
+  LIBS=" $LIBS"
 fi
  # SVR4 sockets
 
diff -urN Python-2.7.11/configure.ac Python-2.7.11-em/configure.ac
--- Python-2.7.11/configure.ac	2015-12-05 20:47:20.000000000 +0100
+++ Python-2.7.11-em/configure.ac	2016-05-15 02:30:09.066201194 +0200
@@ -322,6 +322,9 @@
 	*-*-cygwin*)
 		ac_sys_system=Cygwin
 		;;
+	asmjs-*-*)
+		ac_sys_system=Emscripten
+		;;
 	*)
 		# for now, limit cross builds to known configurations
 		MACHDEP="unknown"
@@ -368,6 +371,9 @@
 	*-*-cygwin*)
 		_host_cpu=
 		;;
+	asmjs-*-*)
+		_host_cpu=
+		;;
 	*)
 		# for now, limit cross builds to known configurations
 		MACHDEP="unknown"
@@ -2305,7 +2311,7 @@
 # Most SVR4 platforms (e.g. Solaris) need -lsocket and -lnsl.
 # BeOS' sockets are stashed in libnet.
 AC_CHECK_LIB(nsl, t_open, [LIBS="-lnsl $LIBS"]) # SVR4
-AC_CHECK_LIB(socket, socket, [LIBS="-lsocket $LIBS"], [], $LIBS) # SVR4 sockets
+AC_CHECK_LIB(socket, socket, [LIBS=" $LIBS"], [], $LIBS) # SVR4 sockets
 
 case "$ac_sys_system" in
 BeOS*)
diff -urN Python-2.7.11/Doc/includes/noddy2.c Python-2.7.11-em/Doc/includes/noddy2.c
--- Python-2.7.11/Doc/includes/noddy2.c	2015-12-05 20:46:48.000000000 +0100
+++ Python-2.7.11-em/Doc/includes/noddy2.c	2016-05-16 03:00:31.139427735 +0200
@@ -84,7 +84,7 @@
 };
 
 static PyObject *
-Noddy_name(Noddy* self)
+Noddy_name(Noddy* self, PyObject *noargs)
 {
     static PyObject *format = NULL;
     PyObject *args, *result;
diff -urN Python-2.7.11/Doc/includes/noddy3.c Python-2.7.11-em/Doc/includes/noddy3.c
--- Python-2.7.11/Doc/includes/noddy3.c	2015-12-05 20:46:48.000000000 +0100
+++ Python-2.7.11-em/Doc/includes/noddy3.c	2016-05-16 03:00:31.140427735 +0200
@@ -147,7 +147,7 @@
 };
 
 static PyObject *
-Noddy_name(Noddy* self)
+Noddy_name(Noddy* self, PyObject *noargs)
 {
     static PyObject *format = NULL;
     PyObject *args, *result;
diff -urN Python-2.7.11/Doc/includes/noddy4.c Python-2.7.11-em/Doc/includes/noddy4.c
--- Python-2.7.11/Doc/includes/noddy4.c	2015-12-05 20:46:48.000000000 +0100
+++ Python-2.7.11-em/Doc/includes/noddy4.c	2016-05-16 03:00:31.140427735 +0200
@@ -118,7 +118,7 @@
 };
 
 static PyObject *
-Noddy_name(Noddy* self)
+Noddy_name(Noddy* self, PyObject *noargs)
 {
     static PyObject *format = NULL;
     PyObject *args, *result;
diff -urN Python-2.7.11/.git Python-2.7.11-em/.git
--- Python-2.7.11/.git	1970-01-01 01:00:00.000000000 +0100
+++ Python-2.7.11-em/.git	2016-05-15 02:30:09.066201194 +0200
@@ -0,0 +1 @@
+gitdir: ../.git/modules/Python-2.7
diff -urN Python-2.7.11/.gitignore Python-2.7.11-em/.gitignore
--- Python-2.7.11/.gitignore	1970-01-01 01:00:00.000000000 +0100
+++ Python-2.7.11-em/.gitignore	2016-05-15 02:30:09.066201194 +0200
@@ -0,0 +1,18 @@
+*.o
+*.a
+*.pyo
+*.pyc
+a.out
+a.out.js
+build
+pyconfig.h
+config.log
+config.status
+Misc/python.pc
+
+# Binaries for the host system
+hostpython
+Parser/hostpgen
+
+# Configuration for Emscripten
+Lib/plat-emscripten/
Binary files Python-2.7.11/hostpython and Python-2.7.11-em/hostpython differ
diff -urN Python-2.7.11/Lib/plat-emscripten/IN.py Python-2.7.11-em/Lib/plat-emscripten/IN.py
--- Python-2.7.11/Lib/plat-emscripten/IN.py	1970-01-01 01:00:00.000000000 +0100
+++ Python-2.7.11-em/Lib/plat-emscripten/IN.py	2016-05-15 02:30:09.067201194 +0200
@@ -0,0 +1,862 @@
+# Generated by h2py from /usr/include/netinet/in.h
+_NETINET_IN_H = 1
+
+# Included from features.h
+_FEATURES_H = 1
+_ISOC95_SOURCE = 1
+_ISOC99_SOURCE = 1
+_ISOC11_SOURCE = 1
+_POSIX_SOURCE = 1
+_POSIX_C_SOURCE = 200809L
+_XOPEN_SOURCE = 700
+_XOPEN_SOURCE_EXTENDED = 1
+_LARGEFILE64_SOURCE = 1
+_DEFAULT_SOURCE = 1
+_BSD_SOURCE = 1
+_SVID_SOURCE = 1
+_ATFILE_SOURCE = 1
+_DEFAULT_SOURCE = 1
+_BSD_SOURCE = 1
+_SVID_SOURCE = 1
+__USE_ISOC11 = 1
+__USE_ISOC99 = 1
+__USE_ISOC95 = 1
+__USE_ISOCXX11 = 1
+__USE_POSIX_IMPLICITLY = 1
+_POSIX_SOURCE = 1
+_POSIX_C_SOURCE = 200809L
+_POSIX_SOURCE = 1
+_POSIX_C_SOURCE = 2
+_POSIX_C_SOURCE = 199506L
+_POSIX_C_SOURCE = 200112L
+_POSIX_C_SOURCE = 200809L
+__USE_POSIX_IMPLICITLY = 1
+__USE_POSIX = 1
+__USE_POSIX2 = 1
+__USE_POSIX199309 = 1
+__USE_POSIX199506 = 1
+__USE_XOPEN2K = 1
+__USE_ISOC95 = 1
+__USE_ISOC99 = 1
+__USE_XOPEN2K8 = 1
+_ATFILE_SOURCE = 1
+__USE_XOPEN = 1
+__USE_XOPEN_EXTENDED = 1
+__USE_UNIX98 = 1
+_LARGEFILE_SOURCE = 1
+__USE_XOPEN2K8 = 1
+__USE_XOPEN2K8XSI = 1
+__USE_XOPEN2K = 1
+__USE_XOPEN2KXSI = 1
+__USE_ISOC95 = 1
+__USE_ISOC99 = 1
+__USE_XOPEN_EXTENDED = 1
+__USE_LARGEFILE = 1
+__USE_LARGEFILE64 = 1
+__USE_FILE_OFFSET64 = 1
+__USE_MISC = 1
+__USE_BSD = 1
+__USE_SVID = 1
+__USE_ATFILE = 1
+__USE_GNU = 1
+__USE_REENTRANT = 1
+__USE_FORTIFY_LEVEL = 2
+__USE_FORTIFY_LEVEL = 1
+__USE_FORTIFY_LEVEL = 0
+
+# Included from stdc-predef.h
+_STDC_PREDEF_H = 1
+__STDC_IEC_559__ = 1
+__STDC_IEC_559__ = 1
+__STDC_IEC_559_COMPLEX__ = 1
+__STDC_IEC_559_COMPLEX__ = 1
+__STDC_ISO_10646__ = 201103L
+__STDC_NO_THREADS__ = 1
+__GNU_LIBRARY__ = 6
+__GLIBC__ = 2
+__GLIBC_MINOR__ = 19
+
+# Included from sys/cdefs.h
+_SYS_CDEFS_H = 1
+def __NTH(fct): return fct
+
+def __NTH(fct): return fct
+
+def __P(args): return args
+
+def __PMT(args): return args
+
+def __STRING(x): return #x
+
+def __bos(ptr): return __builtin_object_size (ptr, __USE_FORTIFY_LEVEL > 1)
+
+def __bos0(ptr): return __builtin_object_size (ptr, 0)
+
+def __warnattr(msg): return __attribute__((__warning__ (msg)))
+
+__flexarr = []
+__flexarr = [0]
+__flexarr = []
+__flexarr = [1]
+def __ASMNAME(cname): return __ASMNAME2 (__USER_LABEL_PREFIX__, cname)
+
+def __attribute__(xyz): return  
+
+def __attribute_alloc_size__(params): return \
+
+def __attribute_alloc_size__(params): return  
+
+def __attribute_format_arg__(x): return __attribute__ ((__format_arg__ (x)))
+
+def __attribute_format_arg__(x): return  
+
+def __glibc_unlikely(cond): return __builtin_expect ((cond), 0)
+
+def __glibc_likely(cond): return __builtin_expect ((cond), 1)
+
+def __glibc_unlikely(cond): return (cond)
+
+def __glibc_likely(cond): return (cond)
+
+
+# Included from bits/wordsize.h
+__WORDSIZE = 64
+__WORDSIZE = 32
+__WORDSIZE_TIME64_COMPAT32 = 1
+__SYSCALL_WORDSIZE = 64
+__LDBL_COMPAT = 1
+def __LDBL_REDIR_DECL(name): return \
+
+__USE_LARGEFILE = 1
+__USE_LARGEFILE64 = 1
+__USE_EXTERN_INLINES = 1
+
+# Included from gnu/stubs.h
+
+# Included from gnu/stubs-32.h
+
+# Included from gnu/stubs-64.h
+
+# Included from gnu/stubs-x32.h
+
+# Included from stdint.h
+_STDINT_H = 1
+
+# Included from bits/wchar.h
+_BITS_WCHAR_H = 1
+def __INT64_C(c): return c ## L
+
+def __UINT64_C(c): return c ## UL
+
+def __INT64_C(c): return c ## LL
+
+def __UINT64_C(c): return c ## ULL
+
+INT8_MIN = (-128)
+INT16_MIN = (-32767-1)
+INT32_MIN = (-2147483647-1)
+INT64_MIN = (-__INT64_C(9223372036854775807)-1)
+INT8_MAX = (127)
+INT16_MAX = (32767)
+INT32_MAX = (2147483647)
+INT64_MAX = (__INT64_C(9223372036854775807))
+UINT8_MAX = (255)
+UINT16_MAX = (65535)
+UINT64_MAX = (__UINT64_C(18446744073709551615))
+INT_LEAST8_MIN = (-128)
+INT_LEAST16_MIN = (-32767-1)
+INT_LEAST32_MIN = (-2147483647-1)
+INT_LEAST64_MIN = (-__INT64_C(9223372036854775807)-1)
+INT_LEAST8_MAX = (127)
+INT_LEAST16_MAX = (32767)
+INT_LEAST32_MAX = (2147483647)
+INT_LEAST64_MAX = (__INT64_C(9223372036854775807))
+UINT_LEAST8_MAX = (255)
+UINT_LEAST16_MAX = (65535)
+UINT_LEAST64_MAX = (__UINT64_C(18446744073709551615))
+INT_FAST8_MIN = (-128)
+INT_FAST16_MIN = (-9223372036854775807L-1)
+INT_FAST32_MIN = (-9223372036854775807L-1)
+INT_FAST16_MIN = (-2147483647-1)
+INT_FAST32_MIN = (-2147483647-1)
+INT_FAST64_MIN = (-__INT64_C(9223372036854775807)-1)
+INT_FAST8_MAX = (127)
+INT_FAST16_MAX = (9223372036854775807L)
+INT_FAST32_MAX = (9223372036854775807L)
+INT_FAST16_MAX = (2147483647)
+INT_FAST32_MAX = (2147483647)
+INT_FAST64_MAX = (__INT64_C(9223372036854775807))
+UINT_FAST8_MAX = (255)
+UINT_FAST64_MAX = (__UINT64_C(18446744073709551615))
+INTPTR_MIN = (-9223372036854775807L-1)
+INTPTR_MAX = (9223372036854775807L)
+INTPTR_MIN = (-2147483647-1)
+INTPTR_MAX = (2147483647)
+INTMAX_MIN = (-__INT64_C(9223372036854775807)-1)
+INTMAX_MAX = (__INT64_C(9223372036854775807))
+UINTMAX_MAX = (__UINT64_C(18446744073709551615))
+PTRDIFF_MIN = (-9223372036854775807L-1)
+PTRDIFF_MAX = (9223372036854775807L)
+PTRDIFF_MIN = (-2147483647-1)
+PTRDIFF_MAX = (2147483647)
+SIG_ATOMIC_MIN = (-2147483647-1)
+SIG_ATOMIC_MAX = (2147483647)
+def INT8_C(c): return c
+
+def INT16_C(c): return c
+
+def INT32_C(c): return c
+
+def INT64_C(c): return c ## L
+
+def INT64_C(c): return c ## LL
+
+def UINT8_C(c): return c
+
+def UINT16_C(c): return c
+
+def UINT32_C(c): return c ## U
+
+def UINT64_C(c): return c ## UL
+
+def UINT64_C(c): return c ## ULL
+
+def INTMAX_C(c): return c ## L
+
+def UINTMAX_C(c): return c ## UL
+
+def INTMAX_C(c): return c ## LL
+
+def UINTMAX_C(c): return c ## ULL
+
+
+# Included from sys/socket.h
+_SYS_SOCKET_H = 1
+
+# Included from sys/uio.h
+_SYS_UIO_H = 1
+
+# Included from sys/types.h
+_SYS_TYPES_H = 1
+
+# Included from bits/types.h
+_BITS_TYPES_H = 1
+__S32_TYPE = int
+__SWORD_TYPE = int
+__SLONG32_TYPE = int
+
+# Included from bits/typesizes.h
+_BITS_TYPESIZES_H = 1
+__FSWORD_T_TYPE = __SWORD_TYPE
+__PID_T_TYPE = __S32_TYPE
+__DADDR_T_TYPE = __S32_TYPE
+__KEY_T_TYPE = __S32_TYPE
+__CLOCKID_T_TYPE = __S32_TYPE
+__SSIZE_T_TYPE = __SWORD_TYPE
+__OFF_T_MATCHES_OFF64_T = 1
+__INO_T_MATCHES_INO64_T = 1
+__FD_SETSIZE = 1024
+
+# Included from time.h
+_TIME_H = 1
+
+# Included from bits/time.h
+_STRUCT_TIMEVAL = 1
+_BITS_TIME_H = 1
+CLOCKS_PER_SEC = 1000000l
+CLOCK_REALTIME = 0
+CLOCK_MONOTONIC = 1
+CLOCK_PROCESS_CPUTIME_ID = 2
+CLOCK_THREAD_CPUTIME_ID = 3
+CLOCK_MONOTONIC_RAW = 4
+CLOCK_REALTIME_COARSE = 5
+CLOCK_MONOTONIC_COARSE = 6
+CLOCK_BOOTTIME = 7
+CLOCK_REALTIME_ALARM = 8
+CLOCK_BOOTTIME_ALARM = 9
+TIMER_ABSTIME = 1
+
+# Included from bits/timex.h
+_BITS_TIMEX_H = 1
+ADJ_OFFSET = 0x0001
+ADJ_FREQUENCY = 0x0002
+ADJ_MAXERROR = 0x0004
+ADJ_ESTERROR = 0x0008
+ADJ_STATUS = 0x0010
+ADJ_TIMECONST = 0x0020
+ADJ_TAI = 0x0080
+ADJ_MICRO = 0x1000
+ADJ_NANO = 0x2000
+ADJ_TICK = 0x4000
+ADJ_OFFSET_SINGLESHOT = 0x8001
+ADJ_OFFSET_SS_READ = 0xa001
+MOD_OFFSET = ADJ_OFFSET
+MOD_FREQUENCY = ADJ_FREQUENCY
+MOD_MAXERROR = ADJ_MAXERROR
+MOD_ESTERROR = ADJ_ESTERROR
+MOD_STATUS = ADJ_STATUS
+MOD_TIMECONST = ADJ_TIMECONST
+MOD_CLKB = ADJ_TICK
+MOD_CLKA = ADJ_OFFSET_SINGLESHOT
+MOD_TAI = ADJ_TAI
+MOD_MICRO = ADJ_MICRO
+MOD_NANO = ADJ_NANO
+STA_PLL = 0x0001
+STA_PPSFREQ = 0x0002
+STA_PPSTIME = 0x0004
+STA_FLL = 0x0008
+STA_INS = 0x0010
+STA_DEL = 0x0020
+STA_UNSYNC = 0x0040
+STA_FREQHOLD = 0x0080
+STA_PPSSIGNAL = 0x0100
+STA_PPSJITTER = 0x0200
+STA_PPSWANDER = 0x0400
+STA_PPSERROR = 0x0800
+STA_CLOCKERR = 0x1000
+STA_NANO = 0x2000
+STA_MODE = 0x4000
+STA_CLK = 0x8000
+STA_RONLY = (STA_PPSSIGNAL | STA_PPSJITTER | STA_PPSWANDER | \
+    STA_PPSERROR | STA_CLOCKERR | STA_NANO | STA_MODE | STA_CLK)
+CLK_TCK = CLOCKS_PER_SEC
+__clock_t_defined = 1
+__time_t_defined = 1
+__clockid_t_defined = 1
+__timer_t_defined = 1
+__timespec_defined = 1
+TIME_UTC = 1
+
+# Included from xlocale.h
+_XLOCALE_H = 1
+def __isleap(year): return \
+
+__BIT_TYPES_DEFINED__ = 1
+
+# Included from endian.h
+_ENDIAN_H = 1
+__LITTLE_ENDIAN = 1234
+__BIG_ENDIAN = 4321
+__PDP_ENDIAN = 3412
+
+# Included from bits/endian.h
+__BYTE_ORDER = __LITTLE_ENDIAN
+__FLOAT_WORD_ORDER = __BYTE_ORDER
+LITTLE_ENDIAN = __LITTLE_ENDIAN
+BIG_ENDIAN = __BIG_ENDIAN
+PDP_ENDIAN = __PDP_ENDIAN
+BYTE_ORDER = __BYTE_ORDER
+
+# Included from bits/byteswap.h
+_BITS_BYTESWAP_H = 1
+def __bswap_constant_16(x): return \
+
+
+# Included from bits/byteswap-16.h
+def __bswap_16(x): return \
+
+def __bswap_16(x): return \
+
+def __bswap_constant_32(x): return \
+
+def __bswap_32(x): return \
+
+def __bswap_32(x): return \
+
+def __bswap_32(x): return \
+
+def __bswap_constant_64(x): return \
+
+def __bswap_64(x): return \
+
+def __bswap_64(x): return \
+
+def __bswap_constant_64(x): return \
+
+def htobe16(x): return __bswap_16 (x)
+
+def htole16(x): return (x)
+
+def be16toh(x): return __bswap_16 (x)
+
+def le16toh(x): return (x)
+
+def htobe32(x): return __bswap_32 (x)
+
+def htole32(x): return (x)
+
+def be32toh(x): return __bswap_32 (x)
+
+def le32toh(x): return (x)
+
+def htobe64(x): return __bswap_64 (x)
+
+def htole64(x): return (x)
+
+def be64toh(x): return __bswap_64 (x)
+
+def le64toh(x): return (x)
+
+def htobe16(x): return (x)
+
+def htole16(x): return __bswap_16 (x)
+
+def be16toh(x): return (x)
+
+def le16toh(x): return __bswap_16 (x)
+
+def htobe32(x): return (x)
+
+def htole32(x): return __bswap_32 (x)
+
+def be32toh(x): return (x)
+
+def le32toh(x): return __bswap_32 (x)
+
+def htobe64(x): return (x)
+
+def htole64(x): return __bswap_64 (x)
+
+def be64toh(x): return (x)
+
+def le64toh(x): return __bswap_64 (x)
+
+
+# Included from sys/select.h
+_SYS_SELECT_H = 1
+
+# Included from bits/select.h
+__FD_ZERO_STOS = "stosq"
+__FD_ZERO_STOS = "stosl"
+def __FD_ZERO(fdsp): return \
+
+def __FD_ZERO(set): return \
+
+
+# Included from bits/sigset.h
+_SIGSET_H_types = 1
+_SIGSET_H_fns = 1
+def __sigmask(sig): return \
+
+def __sigemptyset(set): return \
+
+def __sigfillset(set): return \
+
+def __sigisemptyset(set): return \
+
+def __FD_ELT(d): return ((d) / __NFDBITS)
+
+FD_SETSIZE = __FD_SETSIZE
+def FD_ZERO(fdsetp): return __FD_ZERO (fdsetp)
+
+
+# Included from bits/select2.h
+def __FD_ELT(d): return \
+
+
+# Included from sys/sysmacros.h
+_SYS_SYSMACROS_H = 1
+def major(dev): return gnu_dev_major (dev)
+
+def minor(dev): return gnu_dev_minor (dev)
+
+
+# Included from bits/pthreadtypes.h
+_BITS_PTHREADTYPES_H = 1
+__SIZEOF_PTHREAD_ATTR_T = 56
+__SIZEOF_PTHREAD_MUTEX_T = 40
+__SIZEOF_PTHREAD_MUTEXATTR_T = 4
+__SIZEOF_PTHREAD_COND_T = 48
+__SIZEOF_PTHREAD_CONDATTR_T = 4
+__SIZEOF_PTHREAD_RWLOCK_T = 56
+__SIZEOF_PTHREAD_RWLOCKATTR_T = 8
+__SIZEOF_PTHREAD_BARRIER_T = 32
+__SIZEOF_PTHREAD_BARRIERATTR_T = 4
+__SIZEOF_PTHREAD_ATTR_T = 32
+__SIZEOF_PTHREAD_MUTEX_T = 32
+__SIZEOF_PTHREAD_MUTEXATTR_T = 4
+__SIZEOF_PTHREAD_COND_T = 48
+__SIZEOF_PTHREAD_CONDATTR_T = 4
+__SIZEOF_PTHREAD_RWLOCK_T = 44
+__SIZEOF_PTHREAD_RWLOCKATTR_T = 8
+__SIZEOF_PTHREAD_BARRIER_T = 20
+__SIZEOF_PTHREAD_BARRIERATTR_T = 4
+__SIZEOF_PTHREAD_ATTR_T = 36
+__SIZEOF_PTHREAD_MUTEX_T = 24
+__SIZEOF_PTHREAD_MUTEXATTR_T = 4
+__SIZEOF_PTHREAD_COND_T = 48
+__SIZEOF_PTHREAD_CONDATTR_T = 4
+__SIZEOF_PTHREAD_RWLOCK_T = 32
+__SIZEOF_PTHREAD_RWLOCKATTR_T = 8
+__SIZEOF_PTHREAD_BARRIER_T = 20
+__SIZEOF_PTHREAD_BARRIERATTR_T = 4
+__have_pthread_attr_t = 1
+__PTHREAD_MUTEX_HAVE_PREV = 1
+__PTHREAD_MUTEX_HAVE_ELISION = 1
+__PTHREAD_MUTEX_HAVE_ELISION = 2
+__PTHREAD_RWLOCK_INT_FLAGS_SHARED = 1
+
+# Included from bits/uio.h
+_BITS_UIO_H = 1
+UIO_MAXIOV = 1024
+_BITS_UIO_H_FOR_SYS_UIO_H = 1
+
+# Included from bits/socket.h
+
+# Included from bits/socket_type.h
+PF_UNSPEC = 0
+PF_LOCAL = 1
+PF_UNIX = PF_LOCAL
+PF_FILE = PF_LOCAL
+PF_INET = 2
+PF_AX25 = 3
+PF_IPX = 4
+PF_APPLETALK = 5
+PF_NETROM = 6
+PF_BRIDGE = 7
+PF_ATMPVC = 8
+PF_X25 = 9
+PF_INET6 = 10
+PF_ROSE = 11
+PF_DECnet = 12
+PF_NETBEUI = 13
+PF_SECURITY = 14
+PF_KEY = 15
+PF_NETLINK = 16
+PF_ROUTE = PF_NETLINK
+PF_PACKET = 17
+PF_ASH = 18
+PF_ECONET = 19
+PF_ATMSVC = 20
+PF_RDS = 21
+PF_SNA = 22
+PF_IRDA = 23
+PF_PPPOX = 24
+PF_WANPIPE = 25
+PF_LLC = 26
+PF_CAN = 29
+PF_TIPC = 30
+PF_BLUETOOTH = 31
+PF_IUCV = 32
+PF_RXRPC = 33
+PF_ISDN = 34
+PF_PHONET = 35
+PF_IEEE802154 = 36
+PF_CAIF = 37
+PF_ALG = 38
+PF_NFC = 39
+PF_VSOCK = 40
+PF_MAX = 41
+AF_UNSPEC = PF_UNSPEC
+AF_LOCAL = PF_LOCAL
+AF_UNIX = PF_UNIX
+AF_FILE = PF_FILE
+AF_INET = PF_INET
+AF_AX25 = PF_AX25
+AF_IPX = PF_IPX
+AF_APPLETALK = PF_APPLETALK
+AF_NETROM = PF_NETROM
+AF_BRIDGE = PF_BRIDGE
+AF_ATMPVC = PF_ATMPVC
+AF_X25 = PF_X25
+AF_INET6 = PF_INET6
+AF_ROSE = PF_ROSE
+AF_DECnet = PF_DECnet
+AF_NETBEUI = PF_NETBEUI
+AF_SECURITY = PF_SECURITY
+AF_KEY = PF_KEY
+AF_NETLINK = PF_NETLINK
+AF_ROUTE = PF_ROUTE
+AF_PACKET = PF_PACKET
+AF_ASH = PF_ASH
+AF_ECONET = PF_ECONET
+AF_ATMSVC = PF_ATMSVC
+AF_RDS = PF_RDS
+AF_SNA = PF_SNA
+AF_IRDA = PF_IRDA
+AF_PPPOX = PF_PPPOX
+AF_WANPIPE = PF_WANPIPE
+AF_LLC = PF_LLC
+AF_CAN = PF_CAN
+AF_TIPC = PF_TIPC
+AF_BLUETOOTH = PF_BLUETOOTH
+AF_IUCV = PF_IUCV
+AF_RXRPC = PF_RXRPC
+AF_ISDN = PF_ISDN
+AF_PHONET = PF_PHONET
+AF_IEEE802154 = PF_IEEE802154
+AF_CAIF = PF_CAIF
+AF_ALG = PF_ALG
+AF_NFC = PF_NFC
+AF_VSOCK = PF_VSOCK
+AF_MAX = PF_MAX
+SOL_RAW = 255
+SOL_DECNET = 261
+SOL_X25 = 262
+SOL_PACKET = 263
+SOL_ATM = 264
+SOL_AAL = 265
+SOL_IRDA = 266
+SOMAXCONN = 128
+
+# Included from bits/sockaddr.h
+_BITS_SOCKADDR_H = 1
+def __SOCKADDR_COMMON(sa_prefix): return \
+
+_SS_SIZE = 128
+def CMSG_FIRSTHDR(mhdr): return \
+
+
+# Included from asm/socket.h
+
+# Included from asm-generic/socket.h
+
+# Included from asm/sockios.h
+
+# Included from asm-generic/sockios.h
+FIOSETOWN = 0x8901
+SIOCSPGRP = 0x8902
+FIOGETOWN = 0x8903
+SIOCGPGRP = 0x8904
+SIOCATMARK = 0x8905
+SIOCGSTAMP = 0x8906
+SIOCGSTAMPNS = 0x8907
+SOL_SOCKET = 1
+SO_DEBUG = 1
+SO_REUSEADDR = 2
+SO_TYPE = 3
+SO_ERROR = 4
+SO_DONTROUTE = 5
+SO_BROADCAST = 6
+SO_SNDBUF = 7
+SO_RCVBUF = 8
+SO_SNDBUFFORCE = 32
+SO_RCVBUFFORCE = 33
+SO_KEEPALIVE = 9
+SO_OOBINLINE = 10
+SO_NO_CHECK = 11
+SO_PRIORITY = 12
+SO_LINGER = 13
+SO_BSDCOMPAT = 14
+SO_REUSEPORT = 15
+SO_PASSCRED = 16
+SO_PEERCRED = 17
+SO_RCVLOWAT = 18
+SO_SNDLOWAT = 19
+SO_RCVTIMEO = 20
+SO_SNDTIMEO = 21
+SO_SECURITY_AUTHENTICATION = 22
+SO_SECURITY_ENCRYPTION_TRANSPORT = 23
+SO_SECURITY_ENCRYPTION_NETWORK = 24
+SO_BINDTODEVICE = 25
+SO_ATTACH_FILTER = 26
+SO_DETACH_FILTER = 27
+SO_GET_FILTER = SO_ATTACH_FILTER
+SO_PEERNAME = 28
+SO_TIMESTAMP = 29
+SCM_TIMESTAMP = SO_TIMESTAMP
+SO_ACCEPTCONN = 30
+SO_PEERSEC = 31
+SO_PASSSEC = 34
+SO_TIMESTAMPNS = 35
+SCM_TIMESTAMPNS = SO_TIMESTAMPNS
+SO_MARK = 36
+SO_TIMESTAMPING = 37
+SCM_TIMESTAMPING = SO_TIMESTAMPING
+SO_PROTOCOL = 38
+SO_DOMAIN = 39
+SO_RXQ_OVFL = 40
+SO_WIFI_STATUS = 41
+SCM_WIFI_STATUS = SO_WIFI_STATUS
+SO_PEEK_OFF = 42
+SO_NOFCS = 43
+SO_LOCK_FILTER = 44
+SO_SELECT_ERR_QUEUE = 45
+SO_BUSY_POLL = 46
+SO_MAX_PACING_RATE = 47
+
+# Included from bits/socket2.h
+
+# Included from bits/in.h
+IP_OPTIONS = 4
+IP_HDRINCL = 3
+IP_TOS = 1
+IP_TTL = 2
+IP_RECVOPTS = 6
+IP_RETOPTS = 7
+IP_MULTICAST_IF = 32
+IP_MULTICAST_TTL = 33
+IP_MULTICAST_LOOP = 34
+IP_ADD_MEMBERSHIP = 35
+IP_DROP_MEMBERSHIP = 36
+IP_UNBLOCK_SOURCE = 37
+IP_BLOCK_SOURCE = 38
+IP_ADD_SOURCE_MEMBERSHIP = 39
+IP_DROP_SOURCE_MEMBERSHIP = 40
+IP_MSFILTER = 41
+MCAST_JOIN_GROUP = 42
+MCAST_BLOCK_SOURCE = 43
+MCAST_UNBLOCK_SOURCE = 44
+MCAST_LEAVE_GROUP = 45
+MCAST_JOIN_SOURCE_GROUP = 46
+MCAST_LEAVE_SOURCE_GROUP = 47
+MCAST_MSFILTER = 48
+IP_MULTICAST_ALL = 49
+IP_UNICAST_IF = 50
+MCAST_EXCLUDE = 0
+MCAST_INCLUDE = 1
+IP_ROUTER_ALERT = 5
+IP_PKTINFO = 8
+IP_PKTOPTIONS = 9
+IP_PMTUDISC = 10
+IP_MTU_DISCOVER = 10
+IP_RECVERR = 11
+IP_RECVTTL = 12
+IP_RECVTOS = 13
+IP_MTU = 14
+IP_FREEBIND = 15
+IP_IPSEC_POLICY = 16
+IP_XFRM_POLICY = 17
+IP_PASSSEC = 18
+IP_TRANSPARENT = 19
+IP_MULTICAST_ALL = 49
+IP_ORIGDSTADDR = 20
+IP_RECVORIGDSTADDR = IP_ORIGDSTADDR
+IP_MINTTL = 21
+IP_PMTUDISC_DONT = 0
+IP_PMTUDISC_WANT = 1
+IP_PMTUDISC_DO = 2
+IP_PMTUDISC_PROBE = 3
+SOL_IP = 0
+IP_DEFAULT_MULTICAST_TTL = 1
+IP_DEFAULT_MULTICAST_LOOP = 1
+IP_MAX_MEMBERSHIPS = 20
+IPV6_ADDRFORM = 1
+IPV6_2292PKTINFO = 2
+IPV6_2292HOPOPTS = 3
+IPV6_2292DSTOPTS = 4
+IPV6_2292RTHDR = 5
+IPV6_2292PKTOPTIONS = 6
+IPV6_CHECKSUM = 7
+IPV6_2292HOPLIMIT = 8
+IPV6_NEXTHOP = 9
+IPV6_AUTHHDR = 10
+IPV6_UNICAST_HOPS = 16
+IPV6_MULTICAST_IF = 17
+IPV6_MULTICAST_HOPS = 18
+IPV6_MULTICAST_LOOP = 19
+IPV6_JOIN_GROUP = 20
+IPV6_LEAVE_GROUP = 21
+IPV6_ROUTER_ALERT = 22
+IPV6_MTU_DISCOVER = 23
+IPV6_MTU = 24
+IPV6_RECVERR = 25
+IPV6_V6ONLY = 26
+IPV6_JOIN_ANYCAST = 27
+IPV6_LEAVE_ANYCAST = 28
+IPV6_IPSEC_POLICY = 34
+IPV6_XFRM_POLICY = 35
+IPV6_RECVPKTINFO = 49
+IPV6_PKTINFO = 50
+IPV6_RECVHOPLIMIT = 51
+IPV6_HOPLIMIT = 52
+IPV6_RECVHOPOPTS = 53
+IPV6_HOPOPTS = 54
+IPV6_RTHDRDSTOPTS = 55
+IPV6_RECVRTHDR = 56
+IPV6_RTHDR = 57
+IPV6_RECVDSTOPTS = 58
+IPV6_DSTOPTS = 59
+IPV6_RECVTCLASS = 66
+IPV6_TCLASS = 67
+IPV6_ADD_MEMBERSHIP = IPV6_JOIN_GROUP
+IPV6_DROP_MEMBERSHIP = IPV6_LEAVE_GROUP
+IPV6_RXHOPOPTS = IPV6_HOPOPTS
+IPV6_RXDSTOPTS = IPV6_DSTOPTS
+IPV6_PMTUDISC_DONT = 0
+IPV6_PMTUDISC_WANT = 1
+IPV6_PMTUDISC_DO = 2
+IPV6_PMTUDISC_PROBE = 3
+SOL_IPV6 = 41
+SOL_ICMPV6 = 58
+IPV6_RTHDR_LOOSE = 0
+IPV6_RTHDR_STRICT = 1
+IPV6_RTHDR_TYPE_0 = 0
+def IN_CLASSA(a): return ((((in_addr_t)(a)) & 0x80000000) == 0)
+
+IN_CLASSA_NET = 0xff000000
+IN_CLASSA_NSHIFT = 24
+IN_CLASSA_HOST = (0xffffffff & ~IN_CLASSA_NET)
+IN_CLASSA_MAX = 128
+def IN_CLASSB(a): return ((((in_addr_t)(a)) & 0xc0000000) == 0x80000000)
+
+IN_CLASSB_NET = 0xffff0000
+IN_CLASSB_NSHIFT = 16
+IN_CLASSB_HOST = (0xffffffff & ~IN_CLASSB_NET)
+IN_CLASSB_MAX = 65536
+def IN_CLASSC(a): return ((((in_addr_t)(a)) & 0xe0000000) == 0xc0000000)
+
+IN_CLASSC_NET = 0xffffff00
+IN_CLASSC_NSHIFT = 8
+IN_CLASSC_HOST = (0xffffffff & ~IN_CLASSC_NET)
+def IN_CLASSD(a): return ((((in_addr_t)(a)) & 0xf0000000) == 0xe0000000)
+
+def IN_MULTICAST(a): return IN_CLASSD(a)
+
+def IN_EXPERIMENTAL(a): return ((((in_addr_t)(a)) & 0xe0000000) == 0xe0000000)
+
+def IN_BADCLASS(a): return ((((in_addr_t)(a)) & 0xf0000000) == 0xf0000000)
+
+IN_LOOPBACKNET = 127
+INET_ADDRSTRLEN = 16
+INET6_ADDRSTRLEN = 46
+def ntohl(x): return (x)
+
+def ntohs(x): return (x)
+
+def htonl(x): return (x)
+
+def htons(x): return (x)
+
+def ntohl(x): return __bswap_32 (x)
+
+def ntohs(x): return __bswap_16 (x)
+
+def htonl(x): return __bswap_32 (x)
+
+def htons(x): return __bswap_16 (x)
+
+def IN6_IS_ADDR_UNSPECIFIED(a): return \
+
+def IN6_IS_ADDR_LOOPBACK(a): return \
+
+def IN6_IS_ADDR_LINKLOCAL(a): return \
+
+def IN6_IS_ADDR_SITELOCAL(a): return \
+
+def IN6_IS_ADDR_V4MAPPED(a): return \
+
+def IN6_IS_ADDR_V4COMPAT(a): return \
+
+def IN6_IS_ADDR_UNSPECIFIED(a): return \
+
+def IN6_IS_ADDR_LOOPBACK(a): return \
+
+def IN6_IS_ADDR_LINKLOCAL(a): return \
+
+def IN6_IS_ADDR_SITELOCAL(a): return \
+
+def IN6_IS_ADDR_V4MAPPED(a): return \
+
+def IN6_IS_ADDR_V4COMPAT(a): return \
+
+def IN6_IS_ADDR_MC_NODELOCAL(a): return \
+
+def IN6_IS_ADDR_MC_LINKLOCAL(a): return \
+
+def IN6_IS_ADDR_MC_SITELOCAL(a): return \
+
+def IN6_IS_ADDR_MC_ORGLOCAL(a): return \
+
+def IN6_IS_ADDR_MC_GLOBAL(a): return \
+
diff -urN Python-2.7.11/Lib/plat-emscripten/regen Python-2.7.11-em/Lib/plat-emscripten/regen
--- Python-2.7.11/Lib/plat-emscripten/regen	1970-01-01 01:00:00.000000000 +0100
+++ Python-2.7.11-em/Lib/plat-emscripten/regen	2016-05-15 02:30:09.067201194 +0200
@@ -0,0 +1,3 @@
+#! /bin/sh
+set -v
+eval $PYTHON_FOR_BUILD ../../Tools/scripts/h2py.py -i "'(u_long)'" /usr/include/netinet/in.h
diff -urN Python-2.7.11/Mac/Modules/autoGIL.c Python-2.7.11-em/Mac/Modules/autoGIL.c
--- Python-2.7.11/Mac/Modules/autoGIL.c	2015-12-05 20:47:10.000000000 +0100
+++ Python-2.7.11-em/Mac/Modules/autoGIL.c	2016-05-16 03:00:31.143427735 +0200
@@ -48,7 +48,7 @@
 }
 
 static PyObject *
-autoGIL_installAutoGIL(PyObject *self)
+autoGIL_installAutoGIL(PyObject *self, PyObject *noargs)
 {
     PyObject *tstate_dict = PyThreadState_GetDict();
     PyObject *v;
diff -urN Python-2.7.11/Mac/Modules/_scproxy.c Python-2.7.11-em/Mac/Modules/_scproxy.c
--- Python-2.7.11/Mac/Modules/_scproxy.c	2015-12-05 20:47:10.000000000 +0100
+++ Python-2.7.11-em/Mac/Modules/_scproxy.c	2016-05-16 03:00:31.142427735 +0200
@@ -46,7 +46,7 @@
 
 
 static PyObject*
-get_proxy_settings(PyObject* mod __attribute__((__unused__)))
+get_proxy_settings(PyObject* mod __attribute__((__unused__)), PyObject *noargs)
 {
     CFDictionaryRef proxyDict = NULL;
     CFNumberRef aNum = NULL;
@@ -166,7 +166,7 @@
 
 
 static PyObject*
-get_proxies(PyObject* mod __attribute__((__unused__)))
+get_proxies(PyObject* mod __attribute__((__unused__)), PyObject *noargs)
 {
     PyObject* result = NULL;
     int r;
diff -urN Python-2.7.11/Modules/arraymodule.c Python-2.7.11-em/Modules/arraymodule.c
--- Python-2.7.11/Modules/arraymodule.c	2015-12-05 20:47:13.000000000 +0100
+++ Python-2.7.11-em/Modules/arraymodule.c	2016-05-16 03:00:31.174427736 +0200
@@ -1505,7 +1505,7 @@
 #endif /* Py_USING_UNICODE */
 
 static PyObject *
-array_reduce(arrayobject *array)
+array_reduce(arrayobject *array, PyObject *unused)
 {
     PyObject *dict, *result, *list;
 
diff -urN Python-2.7.11/Modules/_bsddb.c Python-2.7.11-em/Modules/_bsddb.c
--- Python-2.7.11/Modules/_bsddb.c	2015-12-05 20:47:11.000000000 +0100
+++ Python-2.7.11-em/Modules/_bsddb.c	2016-05-16 03:00:31.151427736 +0200
@@ -369,7 +369,7 @@
 
 
 /* Return the access method type of the DBObject */
-static int _DB_get_type(DBObject* self)
+static int _DB_get_type(DBObject* self, PyObject *noargs)
 {
     DBTYPE type;
     int err;
@@ -1879,7 +1879,7 @@
 
 
 static PyObject*
-DB_fd(DBObject* self)
+DB_fd(DBObject* self, PyObject *noargs)
 {
     int err, the_fd;
 
@@ -2208,7 +2208,7 @@
 
 
 static PyObject*
-DB_get_byteswapped(DBObject* self)
+DB_get_byteswapped(DBObject* self, PyObject *noargs)
 {
     int err = 0;
     int retval = -1;
@@ -2224,7 +2224,7 @@
 
 
 static PyObject*
-DB_get_type(DBObject* self)
+DB_get_type(DBObject* self, PyObject *noargs)
 {
     int type;
 
@@ -2487,7 +2487,7 @@
 
 
 static PyObject*
-DB_get_private(DBObject* self)
+DB_get_private(DBObject* self, PyObject *noargs)
 {
     /* We can give out the private field even if db is closed */
     Py_INCREF(self->private_obj);
@@ -2522,7 +2522,7 @@
 }
 
 static PyObject*
-DB_get_priority(DBObject* self)
+DB_get_priority(DBObject* self, PyObject *noargs)
 {
     int err = 0;
     DB_CACHE_PRIORITY priority;
@@ -2538,7 +2538,7 @@
 #endif
 
 static PyObject*
-DB_get_dbname(DBObject* self)
+DB_get_dbname(DBObject* self, PyObject *noargs)
 {
     int err;
     const char *filename, *dbname;
@@ -2554,7 +2554,7 @@
 }
 
 static PyObject*
-DB_get_open_flags(DBObject* self)
+DB_get_open_flags(DBObject* self, PyObject *noargs)
 {
     int err;
     unsigned int flags;
@@ -2586,7 +2586,7 @@
 }
 
 static PyObject*
-DB_get_q_extentsize(DBObject* self)
+DB_get_q_extentsize(DBObject* self, PyObject *noargs)
 {
     int err = 0;
     u_int32_t extentsize;
@@ -2617,7 +2617,7 @@
 }
 
 static PyObject*
-DB_get_bt_minkey(DBObject* self)
+DB_get_bt_minkey(DBObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t bt_minkey;
@@ -2900,7 +2900,7 @@
 }
 
 static PyObject*
-DB_get_cachesize(DBObject* self)
+DB_get_cachesize(DBObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t gbytes, bytes;
@@ -2936,7 +2936,7 @@
 }
 
 static PyObject*
-DB_get_flags(DBObject* self)
+DB_get_flags(DBObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t flags;
@@ -2951,7 +2951,7 @@
 }
 
 static PyObject*
-DB_get_transactional(DBObject* self)
+DB_get_transactional(DBObject* self, PyObject *noargs)
 {
     int err;
 
@@ -2995,7 +2995,7 @@
 }
 
 static PyObject*
-DB_get_h_ffactor(DBObject* self)
+DB_get_h_ffactor(DBObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t ffactor;
@@ -3026,7 +3026,7 @@
 }
 
 static PyObject*
-DB_get_h_nelem(DBObject* self)
+DB_get_h_nelem(DBObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t nelem;
@@ -3057,7 +3057,7 @@
 }
 
 static PyObject*
-DB_get_lorder(DBObject* self)
+DB_get_lorder(DBObject* self, PyObject *noargs)
 {
     int err;
     int lorder;
@@ -3088,7 +3088,7 @@
 }
 
 static PyObject*
-DB_get_pagesize(DBObject* self)
+DB_get_pagesize(DBObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t pagesize;
@@ -3124,7 +3124,7 @@
 }
 
 static PyObject*
-DB_get_re_delim(DBObject* self)
+DB_get_re_delim(DBObject* self, PyObject *noargs)
 {
     int err, re_delim;
 
@@ -3154,7 +3154,7 @@
 }
 
 static PyObject*
-DB_get_re_len(DBObject* self)
+DB_get_re_len(DBObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t re_len;
@@ -3189,7 +3189,7 @@
 }
 
 static PyObject*
-DB_get_re_pad(DBObject* self)
+DB_get_re_pad(DBObject* self, PyObject *noargs)
 {
     int err, re_pad;
 
@@ -3220,7 +3220,7 @@
 }
 
 static PyObject*
-DB_get_re_source(DBObject* self)
+DB_get_re_source(DBObject* self, PyObject *noargs)
 {
     int err;
     const char *source;
@@ -3515,7 +3515,7 @@
 }
 
 static PyObject*
-DB_get_encrypt_flags(DBObject* self)
+DB_get_encrypt_flags(DBObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t flags;
@@ -3908,7 +3908,7 @@
 }
 
 static PyObject*
-DBLogCursor_close(DBLogCursorObject* self)
+DBLogCursor_close(DBLogCursorObject* self, PyObject *noargs)
 {
     return DBLogCursor_close_internal(self);
 }
@@ -3954,31 +3954,31 @@
 }
 
 static PyObject*
-DBLogCursor_current(DBLogCursorObject* self)
+DBLogCursor_current(DBLogCursorObject* self, PyObject *noargs)
 {
     return _DBLogCursor_get(self, DB_CURRENT, NULL);
 }
 
 static PyObject*
-DBLogCursor_first(DBLogCursorObject* self)
+DBLogCursor_first(DBLogCursorObject* self, PyObject *noargs)
 {
     return _DBLogCursor_get(self, DB_FIRST, NULL);
 }
 
 static PyObject*
-DBLogCursor_last(DBLogCursorObject* self)
+DBLogCursor_last(DBLogCursorObject* self, PyObject *noargs)
 {
     return _DBLogCursor_get(self, DB_LAST, NULL);
 }
 
 static PyObject*
-DBLogCursor_next(DBLogCursorObject* self)
+DBLogCursor_next(DBLogCursorObject* self, PyObject *noargs)
 {
     return _DBLogCursor_get(self, DB_NEXT, NULL);
 }
 
 static PyObject*
-DBLogCursor_prev(DBLogCursorObject* self)
+DBLogCursor_prev(DBLogCursorObject* self, PyObject *noargs)
 {
     return _DBLogCursor_get(self, DB_PREV, NULL);
 }
@@ -4018,13 +4018,13 @@
 }
 
 static PyObject*
-DBSite_close(DBSiteObject* self)
+DBSite_close(DBSiteObject* self, PyObject *noargs)
 {
     return DBSite_close_internal(self);
 }
 
 static PyObject*
-DBSite_remove(DBSiteObject* self)
+DBSite_remove(DBSiteObject* self, PyObject *noargs)
 {
     int err = 0;
 
@@ -4039,7 +4039,7 @@
 }
 
 static PyObject*
-DBSite_get_eid(DBSiteObject* self)
+DBSite_get_eid(DBSiteObject* self, PyObject *noargs)
 {
     int err = 0;
     int eid;
@@ -4055,7 +4055,7 @@
 }
 
 static PyObject*
-DBSite_get_address(DBSiteObject* self)
+DBSite_get_address(DBSiteObject* self, PyObject *noargs)
 {
     int err = 0;
     const char *host;
@@ -4152,7 +4152,7 @@
 }
 
 static PyObject*
-DBC_close(DBCursorObject* self)
+DBC_close(DBCursorObject* self, PyObject *noargs)
 {
     return DBC_close_internal(self);
 }
@@ -4406,7 +4406,7 @@
 
 
 static PyObject*
-DBC_get_recno(DBCursorObject* self)
+DBC_get_recno(DBCursorObject* self, PyObject *noargs)
 {
     int err;
     db_recno_t recno;
@@ -4673,7 +4673,7 @@
 
 /* Return size of entry */
 static PyObject*
-DBC_get_current_size(DBCursorObject* self)
+DBC_get_current_size(DBCursorObject* self, PyObject *noargs)
 {
     int err, flags=DB_CURRENT;
     PyObject* retval = NULL;
@@ -4865,7 +4865,7 @@
 
 
 static PyObject*
-DBC_get_priority(DBCursorObject* self)
+DBC_get_priority(DBCursorObject* self, PyObject *noargs)
 {
     int err;
     DB_CACHE_PRIORITY priority;
@@ -5240,7 +5240,7 @@
 }
 
 static PyObject*
-DBEnv_get_encrypt_flags(DBEnvObject* self)
+DBEnv_get_encrypt_flags(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t flags;
@@ -5315,7 +5315,7 @@
 }
 
 static PyObject*
-DBEnv_get_shm_key(DBEnvObject* self)
+DBEnv_get_shm_key(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     long shm_key;
@@ -5350,7 +5350,7 @@
 }
 
 static PyObject*
-DBEnv_get_cache_max(DBEnvObject* self)
+DBEnv_get_cache_max(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t gbytes, bytes;
@@ -5386,7 +5386,7 @@
 }
 
 static PyObject*
-DBEnv_get_thread_count(DBEnvObject* self)
+DBEnv_get_thread_count(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t count;
@@ -5419,7 +5419,7 @@
 }
 
 static PyObject*
-DBEnv_get_cachesize(DBEnvObject* self)
+DBEnv_get_cachesize(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t gbytes, bytes;
@@ -5455,7 +5455,7 @@
 }
 
 static PyObject*
-DBEnv_get_flags(DBEnvObject* self)
+DBEnv_get_flags(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t flags;
@@ -5525,7 +5525,7 @@
 }
 
 static PyObject*
-DBEnv_mutex_get_max(DBEnvObject* self)
+DBEnv_mutex_get_max(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t value;
@@ -5561,7 +5561,7 @@
 }
 
 static PyObject*
-DBEnv_mutex_get_align(DBEnvObject* self)
+DBEnv_mutex_get_align(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t align;
@@ -5597,7 +5597,7 @@
 }
 
 static PyObject*
-DBEnv_mutex_get_increment(DBEnvObject* self)
+DBEnv_mutex_get_increment(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t increment;
@@ -5633,7 +5633,7 @@
 }
 
 static PyObject*
-DBEnv_mutex_get_tas_spins(DBEnvObject* self)
+DBEnv_mutex_get_tas_spins(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t tas_spins;
@@ -5668,7 +5668,7 @@
 }
 
 static PyObject*
-DBEnv_get_data_dirs(DBEnvObject* self)
+DBEnv_get_data_dirs(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     PyObject *tuple;
@@ -5725,7 +5725,7 @@
 }
 
 static PyObject*
-DBEnv_get_lg_filemode(DBEnvObject* self)
+DBEnv_get_lg_filemode(DBEnvObject* self, PyObject *noargs)
 {
     int err, filemode;
 
@@ -5756,7 +5756,7 @@
 }
 
 static PyObject*
-DBEnv_get_lg_bsize(DBEnvObject* self)
+DBEnv_get_lg_bsize(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t lg_bsize;
@@ -5788,7 +5788,7 @@
 }
 
 static PyObject*
-DBEnv_get_lg_dir(DBEnvObject* self)
+DBEnv_get_lg_dir(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     const char *dirp;
@@ -5819,7 +5819,7 @@
 }
 
 static PyObject*
-DBEnv_get_lg_max(DBEnvObject* self)
+DBEnv_get_lg_max(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t lg_max;
@@ -5850,7 +5850,7 @@
 }
 
 static PyObject*
-DBEnv_get_lg_regionmax(DBEnvObject* self)
+DBEnv_get_lg_regionmax(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t lg_regionmax;
@@ -5882,7 +5882,7 @@
 }
 
 static PyObject*
-DBEnv_get_lk_partitions(DBEnvObject* self)
+DBEnv_get_lk_partitions(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t lk_partitions;
@@ -5914,7 +5914,7 @@
 }
 
 static PyObject*
-DBEnv_get_lk_detect(DBEnvObject* self)
+DBEnv_get_lk_detect(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t lk_detect;
@@ -5965,7 +5965,7 @@
 }
 
 static PyObject*
-DBEnv_get_lk_max_locks(DBEnvObject* self)
+DBEnv_get_lk_max_locks(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t lk_max;
@@ -5996,7 +5996,7 @@
 }
 
 static PyObject*
-DBEnv_get_lk_max_lockers(DBEnvObject* self)
+DBEnv_get_lk_max_lockers(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t lk_max;
@@ -6027,7 +6027,7 @@
 }
 
 static PyObject*
-DBEnv_get_lk_max_objects(DBEnvObject* self)
+DBEnv_get_lk_max_objects(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t lk_max;
@@ -6042,7 +6042,7 @@
 }
 
 static PyObject*
-DBEnv_get_mp_mmapsize(DBEnvObject* self)
+DBEnv_get_mp_mmapsize(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     size_t mmapsize;
@@ -6091,7 +6091,7 @@
 }
 
 static PyObject*
-DBEnv_get_tmp_dir(DBEnvObject* self)
+DBEnv_get_tmp_dir(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     const char *dirpp;
@@ -6108,7 +6108,7 @@
 }
 
 static PyObject*
-DBEnv_txn_recover(DBEnvObject* self)
+DBEnv_txn_recover(DBEnvObject* self, PyObject *noargs)
 {
     int flags = DB_FIRST;
     int err, i;
@@ -6221,7 +6221,7 @@
 }
 
 static PyObject*
-DBEnv_get_tx_max(DBEnvObject* self)
+DBEnv_get_tx_max(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t max;
@@ -6252,7 +6252,7 @@
 }
 
 static PyObject*
-DBEnv_get_tx_timestamp(DBEnvObject* self)
+DBEnv_get_tx_timestamp(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     time_t timestamp;
@@ -6323,7 +6323,7 @@
 
 
 static PyObject*
-DBEnv_lock_id(DBEnvObject* self)
+DBEnv_lock_id(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t theID;
@@ -6618,7 +6618,7 @@
 
 
 static PyObject*
-DBEnv_log_cursor(DBEnvObject* self)
+DBEnv_log_cursor(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     DB_LOGC* dblogc;
@@ -6634,7 +6634,7 @@
 
 
 static PyObject*
-DBEnv_log_flush(DBEnvObject* self)
+DBEnv_log_flush(DBEnvObject* self, PyObject *noargs)
 {
     int err;
 
@@ -6987,7 +6987,7 @@
 }
 
 static PyObject*
-DBEnv_get_private(DBEnvObject* self)
+DBEnv_get_private(DBEnvObject* self, PyObject *noargs)
 {
     /* We can give out the private field even if dbenv is closed */
     Py_INCREF(self->private_obj);
@@ -7024,7 +7024,7 @@
 }
 
 static PyObject*
-DBEnv_get_intermediate_dir_mode(DBEnvObject* self)
+DBEnv_get_intermediate_dir_mode(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     const char *mode;
@@ -7061,7 +7061,7 @@
 #endif
 
 static PyObject*
-DBEnv_get_open_flags(DBEnvObject* self)
+DBEnv_get_open_flags(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     unsigned int flags;
@@ -7117,7 +7117,7 @@
 }
 
 static PyObject*
-DBEnv_get_mp_max_openfd(DBEnvObject* self)
+DBEnv_get_mp_max_openfd(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     int maxopenfd;
@@ -7152,7 +7152,7 @@
 }
 
 static PyObject*
-DBEnv_get_mp_max_write(DBEnvObject* self)
+DBEnv_get_mp_max_write(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     int maxwrite;
@@ -7438,7 +7438,7 @@
 }
 
 static PyObject*
-DBEnv_rep_get_request(DBEnvObject* self)
+DBEnv_rep_get_request(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t minimum, maximum;
@@ -7471,7 +7471,7 @@
 }
 
 static PyObject*
-DBEnv_rep_get_limit(DBEnvObject* self)
+DBEnv_rep_get_limit(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     u_int32_t gbytes, bytes;
@@ -7571,7 +7571,7 @@
 
 #if (DBVER >= 44)
 static PyObject*
-DBEnv_rep_sync(DBEnvObject* self)
+DBEnv_rep_sync(DBEnvObject* self, PyObject *noargs)
 {
     int err;
 
@@ -7604,7 +7604,7 @@
 }
 
 static PyObject*
-DBEnv_rep_get_nsites(DBEnvObject* self)
+DBEnv_rep_get_nsites(DBEnvObject* self, PyObject *noargs)
 {
     int err;
 #if (DBVER >= 47)
@@ -7639,7 +7639,7 @@
 }
 
 static PyObject*
-DBEnv_rep_get_priority(DBEnvObject* self)
+DBEnv_rep_get_priority(DBEnvObject* self, PyObject *noargs)
 {
     int err;
 #if (DBVER >= 47)
@@ -7941,7 +7941,7 @@
 }
 
 static PyObject*
-DBEnv_repmgr_get_ack_policy(DBEnvObject* self)
+DBEnv_repmgr_get_ack_policy(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     int ack_policy;
@@ -7955,7 +7955,7 @@
 }
 
 static PyObject*
-DBEnv_repmgr_site_list(DBEnvObject* self)
+DBEnv_repmgr_site_list(DBEnvObject* self, PyObject *noargs)
 {
     int err;
     unsigned int countp;
@@ -8241,7 +8241,7 @@
 }
 
 static PyObject*
-DBTxn_abort(DBTxnObject* self)
+DBTxn_abort(DBTxnObject* self, PyObject *noargs)
 {
     self->flag_prepare=0;
     _close_transaction_cursors(self);
@@ -8250,7 +8250,7 @@
 }
 
 static PyObject*
-DBTxn_discard(DBTxnObject* self)
+DBTxn_discard(DBTxnObject* self, PyObject *noargs)
 {
     self->flag_prepare=0;
     _close_transaction_cursors(self);
@@ -8260,7 +8260,7 @@
 
 
 static PyObject*
-DBTxn_id(DBTxnObject* self)
+DBTxn_id(DBTxnObject* self, PyObject *noargs)
 {
     int id;
 
@@ -8325,7 +8325,7 @@
 
 #if (DBVER >= 44)
 static PyObject*
-DBTxn_get_name(DBTxnObject* self)
+DBTxn_get_name(DBTxnObject* self, PyObject *noargs)
 {
     int err;
     const char *name;
@@ -8422,7 +8422,7 @@
 }
 
 static PyObject*
-DBSequence_get_dbp(DBSequenceObject* self)
+DBSequence_get_dbp(DBSequenceObject* self, PyObject *noargs)
 {
     CHECK_SEQUENCE_NOT_CLOSED(self)
     Py_INCREF(self->mydb);
@@ -8430,7 +8430,7 @@
 }
 
 static PyObject*
-DBSequence_get_key(DBSequenceObject* self)
+DBSequence_get_key(DBSequenceObject* self, PyObject *noargs)
 {
     int err;
     DBT key;
@@ -8550,7 +8550,7 @@
 }
 
 static PyObject*
-DBSequence_get_cachesize(DBSequenceObject* self)
+DBSequence_get_cachesize(DBSequenceObject* self, PyObject *noargs)
 {
     int err, size;
 
@@ -8581,7 +8581,7 @@
 }
 
 static PyObject*
-DBSequence_get_flags(DBSequenceObject* self)
+DBSequence_get_flags(DBSequenceObject* self, PyObject *noargs)
 {
     unsigned int flags;
     int err;
@@ -8617,7 +8617,7 @@
 }
 
 static PyObject*
-DBSequence_get_range(DBSequenceObject* self)
+DBSequence_get_range(DBSequenceObject* self, PyObject *noargs)
 {
     int err;
     PY_LONG_LONG min, max;
@@ -9127,7 +9127,7 @@
 
 
 static PyObject*
-DBEnv_db_home_get(DBEnvObject* self)
+DBEnv_db_home_get(DBEnvObject* self, void *closure)
 {
     const char *home = NULL;
 
@@ -9540,7 +9540,7 @@
 underlying DB library.";
 
 static PyObject*
-bsddb_version(PyObject* self)
+bsddb_version(PyObject* self, PyObject *noargs)
 {
     int major, minor, patch;
 
@@ -9551,7 +9551,7 @@
 
 #if (DBVER >= 50)
 static PyObject*
-bsddb_version_full(PyObject* self)
+bsddb_version_full(PyObject* self, PyObject *noargs)
 {
     char *version_string;
     int family, release, major, minor, patch;
diff -urN Python-2.7.11/Modules/bsddbmodule.c Python-2.7.11-em/Modules/bsddbmodule.c
--- Python-2.7.11/Modules/bsddbmodule.c	2015-12-05 20:47:14.000000000 +0100
+++ Python-2.7.11-em/Modules/bsddbmodule.c	2016-05-16 03:00:31.175427736 +0200
@@ -381,7 +381,7 @@
 };
 
 static PyObject *
-bsddb_close(bsddbobject *dp)
+bsddb_close(bsddbobject *dp, PyObject *noargs)
 {
     if (dp->di_bsddb != NULL) {
         int status;
@@ -400,7 +400,7 @@
 }
 
 static PyObject *
-bsddb_keys(bsddbobject *dp)
+bsddb_keys(bsddbobject *dp, PyObject *noargs)
 {
     PyObject *list, *item=NULL;
     DBT krec, drec;
@@ -605,27 +605,27 @@
 }
 
 static PyObject *
-bsddb_next(bsddbobject *dp)
+bsddb_next(bsddbobject *dp, PyObject *noargs)
 {
     return bsddb_seq(dp, R_NEXT);
 }
 static PyObject *
-bsddb_previous(bsddbobject *dp)
+bsddb_previous(bsddbobject *dp, PyObject *noargs)
 {
     return bsddb_seq(dp, R_PREV);
 }
 static PyObject *
-bsddb_first(bsddbobject *dp)
+bsddb_first(bsddbobject *dp, PyObject *noargs)
 {
     return bsddb_seq(dp, R_FIRST);
 }
 static PyObject *
-bsddb_last(bsddbobject *dp)
+bsddb_last(bsddbobject *dp, PyObject *noargs)
 {
     return bsddb_seq(dp, R_LAST);
 }
 static PyObject *
-bsddb_sync(bsddbobject *dp)
+bsddb_sync(bsddbobject *dp, PyObject *noargs)
 {
     int status;
 
diff -urN Python-2.7.11/Modules/bz2module.c Python-2.7.11-em/Modules/bz2module.c
--- Python-2.7.11/Modules/bz2module.c	2015-12-05 20:47:14.000000000 +0100
+++ Python-2.7.11-em/Modules/bz2module.c	2016-05-16 03:00:31.176427736 +0200
@@ -1191,7 +1191,7 @@
 ");
 
 static PyObject *
-BZ2File_close(BZ2FileObject *self)
+BZ2File_close(BZ2FileObject *self, PyObject *noargs)
 {
     PyObject *ret = NULL;
     int bzerror = BZ_OK;
@@ -1231,7 +1231,7 @@
 "__enter__() -> self.");
 
 static PyObject *
-BZ2File_enter(BZ2FileObject *self)
+BZ2File_enter(BZ2FileObject *self, PyObject *noargs)
 {
     if (self->mode == MODE_CLOSED) {
         PyErr_SetString(PyExc_ValueError,
@@ -1698,7 +1698,7 @@
 ");
 
 static PyObject *
-BZ2Comp_flush(BZ2CompObject *self)
+BZ2Comp_flush(BZ2CompObject *self, PyObject *noargs)
 {
     size_t output_size = 0;
     PyObject *ret = NULL;
diff -urN Python-2.7.11/Modules/cjkcodecs/multibytecodec.c Python-2.7.11-em/Modules/cjkcodecs/multibytecodec.c
--- Python-2.7.11/Modules/cjkcodecs/multibytecodec.c	2015-12-05 20:47:14.000000000 +0100
+++ Python-2.7.11-em/Modules/cjkcodecs/multibytecodec.c	2016-05-16 03:00:31.179427736 +0200
@@ -114,7 +114,7 @@
 }
 
 static PyObject *
-codecctx_errors_get(MultibyteStatefulCodecContext *self)
+codecctx_errors_get(MultibyteStatefulCodecContext *self, void *closure)
 {
     const char *errors;
 
diff -urN Python-2.7.11/Modules/clmodule.c Python-2.7.11-em/Modules/clmodule.c
--- Python-2.7.11/Modules/clmodule.c	2015-12-05 20:47:14.000000000 +0100
+++ Python-2.7.11-em/Modules/clmodule.c	2016-05-16 03:00:31.180427736 +0200
@@ -205,13 +205,13 @@
 }
 
 static PyObject *
-clm_CloseCompressor(PyObject *self)
+clm_CloseCompressor(PyObject *self, PyObject *noargs)
 {
     return doClose(SELF, clCloseCompressor);
 }
 
 static PyObject *
-clm_CloseDecompressor(PyObject *self)
+clm_CloseDecompressor(PyObject *self, PyObject *noargs)
 {
     return doClose(SELF, clCloseDecompressor);
 }
@@ -475,7 +475,7 @@
 }
 
 static PyObject *
-clm_QueryParams(PyObject *self)
+clm_QueryParams(PyObject *self, PyObject *noargs)
 {
     int bufferlength;
     int *PVbuffer;
@@ -567,7 +567,7 @@
 }
 
 static PyObject *
-clm_QuerySchemeFromHandle(PyObject *self)
+clm_QuerySchemeFromHandle(PyObject *self, PyObject *noargs)
 {
     CheckCompressor(SELF);
     return PyInt_FromLong(clQuerySchemeFromHandle(SELF->ob_compressorHdl));
diff -urN Python-2.7.11/Modules/_collectionsmodule.c Python-2.7.11-em/Modules/_collectionsmodule.c
--- Python-2.7.11/Modules/_collectionsmodule.c	2015-12-05 20:47:11.000000000 +0100
+++ Python-2.7.11-em/Modules/_collectionsmodule.c	2016-05-16 03:00:31.152427736 +0200
@@ -641,7 +641,7 @@
 PyDoc_STRVAR(remove_doc,
 "D.remove(value) -- remove first occurrence of value.");
 
-static void
+static int
 deque_clear(dequeobject *deque)
 {
     block *b;
@@ -652,7 +652,7 @@
     PyObject *item;
 
     if (deque->len == 0)
-        return;
+        return 0;
 
     /* During the process of clearing a deque, decrefs can cause the
        deque to mutate.  To avoid fatal confusion, we have to make the
@@ -703,7 +703,7 @@
     }
     assert(leftblock->rightlink == NULL);
     freeblock(leftblock);
-    return;
+    return 0;
 
   alternate_method:
     while (deque->len) {
@@ -811,7 +811,7 @@
 }
 
 static PyObject *
-deque_clearmethod(dequeobject *deque)
+deque_clearmethod(dequeobject *deque, PyObject *unused)
 {
     deque_clear(deque);
     Py_RETURN_NONE;
@@ -858,7 +858,7 @@
 }
 
 static PyObject *
-deque_copy(PyObject *deque)
+deque_copy(PyObject *deque, PyObject *unused)
 {
     if (((dequeobject *)deque)->maxlen == -1)
         return PyObject_CallFunction((PyObject *)(Py_TYPE(deque)), "O", deque, NULL);
@@ -870,7 +870,7 @@
 PyDoc_STRVAR(copy_doc, "Return a shallow copy of a deque.");
 
 static PyObject *
-deque_reduce(dequeobject *deque)
+deque_reduce(dequeobject *deque, PyObject *unused)
 {
     PyObject *dict, *result, *aslist;
 
@@ -1098,7 +1098,7 @@
 }
 
 static PyObject *
-deque_sizeof(dequeobject *deque, void *unused)
+deque_sizeof(dequeobject *deque, PyObject *unused)
 {
     Py_ssize_t res;
     Py_ssize_t blocks;
@@ -1115,7 +1115,7 @@
 "D.__sizeof__() -- size of D in memory, in bytes");
 
 static PyObject *
-deque_get_maxlen(dequeobject *deque)
+deque_get_maxlen(dequeobject *deque, void *closure)
 {
     if (deque->maxlen == -1)
         Py_RETURN_NONE;
@@ -1145,7 +1145,7 @@
 /* deque object ********************************************************/
 
 static PyObject *deque_iter(dequeobject *deque);
-static PyObject *deque_reviter(dequeobject *deque);
+static PyObject *deque_reviter(dequeobject *deque, PyObject *unused);
 PyDoc_STRVAR(reversed_doc,
     "D.__reversed__() -- return a reverse iterator over the deque");
 
@@ -1306,7 +1306,7 @@
 }
 
 static PyObject *
-dequeiter_len(dequeiterobject *it)
+dequeiter_len(dequeiterobject *it, PyObject *unused)
 {
     return PyInt_FromLong(it->counter);
 }
@@ -1356,7 +1356,7 @@
 static PyTypeObject dequereviter_type;
 
 static PyObject *
-deque_reviter(dequeobject *deque)
+deque_reviter(dequeobject *deque, PyObject *unused)
 {
     dequeiterobject *it;
 
@@ -1477,7 +1477,7 @@
 PyDoc_STRVAR(defdict_copy_doc, "D.copy() -> a shallow copy of D.");
 
 static PyObject *
-defdict_copy(defdictobject *dd)
+defdict_copy(defdictobject *dd, PyObject *unused)
 {
     /* This calls the object's class.  That only works for subclasses
        whose class constructor has the same signature.  Subclasses that
@@ -1491,7 +1491,7 @@
 }
 
 static PyObject *
-defdict_reduce(defdictobject *dd)
+defdict_reduce(defdictobject *dd, PyObject *unused)
 {
     /* __reduce__ must return a 5-tuple as follows:
 
diff -urN Python-2.7.11/Modules/cPickle.c Python-2.7.11-em/Modules/cPickle.c
--- Python-2.7.11/Modules/cPickle.c	2015-12-05 20:47:14.000000000 +0100
+++ Python-2.7.11-em/Modules/cPickle.c	2016-05-16 03:00:31.178427736 +0200
@@ -3211,7 +3211,7 @@
 }
 
 static PyObject *
-Pickler_get_pers_func(Picklerobject *p)
+Pickler_get_pers_func(Picklerobject *p, void *closure)
 {
     if (p->pers_func == NULL)
         PyErr_SetString(PyExc_AttributeError, "persistent_id");
@@ -3221,7 +3221,7 @@
 }
 
 static int
-Pickler_set_pers_func(Picklerobject *p, PyObject *v)
+Pickler_set_pers_func(Picklerobject *p, PyObject *v, void *closure)
 {
     if (v == NULL) {
         PyErr_SetString(PyExc_TypeError,
@@ -3235,7 +3235,7 @@
 }
 
 static int
-Pickler_set_inst_pers_func(Picklerobject *p, PyObject *v)
+Pickler_set_inst_pers_func(Picklerobject *p, PyObject *v, void *closure)
 {
     if (v == NULL) {
         PyErr_SetString(PyExc_TypeError,
@@ -3249,7 +3249,7 @@
 }
 
 static PyObject *
-Pickler_get_memo(Picklerobject *p)
+Pickler_get_memo(Picklerobject *p, void *closure)
 {
     if (p->memo == NULL)
         PyErr_SetString(PyExc_AttributeError, "memo");
@@ -3259,7 +3259,7 @@
 }
 
 static int
-Pickler_set_memo(Picklerobject *p, PyObject *v)
+Pickler_set_memo(Picklerobject *p, PyObject *v, void *closure)
 {
     if (v == NULL) {
         PyErr_SetString(PyExc_TypeError,
@@ -3277,7 +3277,7 @@
 }
 
 static PyObject *
-Pickler_get_error(Picklerobject *p)
+Pickler_get_error(Picklerobject *p, void *closure)
 {
     /* why is this an attribute on the Pickler? */
     Py_INCREF(PicklingError);
diff -urN Python-2.7.11/Modules/_csv.c Python-2.7.11-em/Modules/_csv.c
--- Python-2.7.11/Modules/_csv.c	2015-12-05 20:47:11.000000000 +0100
+++ Python-2.7.11-em/Modules/_csv.c	2016-05-16 03:00:31.153427736 +0200
@@ -180,25 +180,25 @@
 }
 
 static PyObject *
-Dialect_get_lineterminator(DialectObj *self)
+Dialect_get_lineterminator(DialectObj *self, void *closure)
 {
     return get_string(self->lineterminator);
 }
 
 static PyObject *
-Dialect_get_escapechar(DialectObj *self)
+Dialect_get_escapechar(DialectObj *self, void *closure)
 {
     return get_nullchar_as_None(self->escapechar);
 }
 
 static PyObject *
-Dialect_get_quotechar(DialectObj *self)
+Dialect_get_quotechar(DialectObj *self, void *closure)
 {
     return get_nullchar_as_None(self->quotechar);
 }
 
 static PyObject *
-Dialect_get_quoting(DialectObj *self)
+Dialect_get_quoting(DialectObj *self, void *closure)
 {
     return PyInt_FromLong(self->quoting);
 }
diff -urN Python-2.7.11/Modules/_ctypes/_ctypes.c Python-2.7.11-em/Modules/_ctypes/_ctypes.c
--- Python-2.7.11/Modules/_ctypes/_ctypes.c	2015-12-05 20:47:11.000000000 +0100
+++ Python-2.7.11-em/Modules/_ctypes/_ctypes.c	2016-05-16 03:00:31.156427736 +0200
@@ -1168,13 +1168,13 @@
 }
 
 static PyObject *
-CharArray_get_raw(CDataObject *self)
+CharArray_get_raw(CDataObject *self, void *context)
 {
     return PyString_FromStringAndSize(self->b_ptr, self->b_size);
 }
 
 static PyObject *
-CharArray_get_value(CDataObject *self)
+CharArray_get_value(CDataObject *self, void *context)
 {
     int i;
     char *ptr = self->b_ptr;
@@ -1185,7 +1185,7 @@
 }
 
 static int
-CharArray_set_value(CDataObject *self, PyObject *value)
+CharArray_set_value(CDataObject *self, PyObject *value, void *context)
 {
     char *ptr;
     Py_ssize_t size;
@@ -1236,7 +1236,7 @@
 
 #ifdef CTYPES_UNICODE
 static PyObject *
-WCharArray_get_value(CDataObject *self)
+WCharArray_get_value(CDataObject *self, void *context)
 {
     unsigned int i;
     wchar_t *ptr = (wchar_t *)self->b_ptr;
@@ -1247,7 +1247,7 @@
 }
 
 static int
-WCharArray_set_value(CDataObject *self, PyObject *value)
+WCharArray_set_value(CDataObject *self, PyObject *value, void *context)
 {
     Py_ssize_t result = 0;
 
@@ -3052,7 +3052,7 @@
 */
 
 static int
-PyCFuncPtr_set_errcheck(PyCFuncPtrObject *self, PyObject *ob)
+PyCFuncPtr_set_errcheck(PyCFuncPtrObject *self, PyObject *ob, void *context)
 {
     if (ob && !PyCallable_Check(ob)) {
         PyErr_SetString(PyExc_TypeError,
@@ -3066,7 +3066,7 @@
 }
 
 static PyObject *
-PyCFuncPtr_get_errcheck(PyCFuncPtrObject *self)
+PyCFuncPtr_get_errcheck(PyCFuncPtrObject *self, void *context)
 {
     if (self->errcheck) {
         Py_INCREF(self->errcheck);
@@ -3077,7 +3077,7 @@
 }
 
 static int
-PyCFuncPtr_set_restype(PyCFuncPtrObject *self, PyObject *ob)
+PyCFuncPtr_set_restype(PyCFuncPtrObject *self, PyObject *ob, void *context)
 {
     if (ob == NULL) {
         Py_CLEAR(self->restype);
@@ -3100,7 +3100,7 @@
 }
 
 static PyObject *
-PyCFuncPtr_get_restype(PyCFuncPtrObject *self)
+PyCFuncPtr_get_restype(PyCFuncPtrObject *self, void *context)
 {
     StgDictObject *dict;
     if (self->restype) {
@@ -3119,7 +3119,7 @@
 }
 
 static int
-PyCFuncPtr_set_argtypes(PyCFuncPtrObject *self, PyObject *ob)
+PyCFuncPtr_set_argtypes(PyCFuncPtrObject *self, PyObject *ob, void *context)
 {
     PyObject *converters;
 
@@ -3140,7 +3140,7 @@
 }
 
 static PyObject *
-PyCFuncPtr_get_argtypes(PyCFuncPtrObject *self)
+PyCFuncPtr_get_argtypes(PyCFuncPtrObject *self, void *context)
 {
     StgDictObject *dict;
     if (self->argtypes) {
@@ -4777,7 +4777,7 @@
 */
 
 static int
-Simple_set_value(CDataObject *self, PyObject *value)
+Simple_set_value(CDataObject *self, PyObject *value, void *context)
 {
     PyObject *result;
     StgDictObject *dict = PyObject_stgdict((PyObject *)self);
@@ -4804,12 +4804,12 @@
     if (!PyArg_UnpackTuple(args, "__init__", 0, 1, &value))
         return -1;
     if (value)
-        return Simple_set_value(self, value);
+        return Simple_set_value(self, value, NULL);
     return 0;
 }
 
 static PyObject *
-Simple_get_value(CDataObject *self)
+Simple_get_value(CDataObject *self, void *context)
 {
     StgDictObject *dict;
     dict = PyObject_stgdict((PyObject *)self);
@@ -4832,7 +4832,7 @@
         return self;
     }
     /* call stgdict->getfunc */
-    return Simple_get_value((CDataObject *)self);
+    return Simple_get_value((CDataObject *)self, NULL);
 }
 
 static PyMethodDef Simple_methods[] = {
@@ -4877,7 +4877,7 @@
             return NULL;
     }
 
-    val = Simple_get_value(self);
+    val = Simple_get_value(self, NULL);
     if (val == NULL)
         return NULL;
 
diff -urN Python-2.7.11/Modules/_ctypes/libffi/src/x86/ffi.c Python-2.7.11-em/Modules/_ctypes/libffi/src/x86/ffi.c
--- Python-2.7.11/Modules/_ctypes/libffi/src/x86/ffi.c	2015-12-05 20:47:12.000000000 +0100
+++ Python-2.7.11-em/Modules/_ctypes/libffi/src/x86/ffi.c	2016-05-16 03:00:31.157427736 +0200
@@ -428,27 +428,27 @@
 
 /** private members **/
 
-/* The following __attribute__((regparm(1))) decorations will have no effect
+/* The following  decorations will have no effect
    on MSVC or SUNPRO_C -- standard conventions apply. */
 static void ffi_prep_incoming_args_SYSV (char *stack, void **ret,
                                          void** args, ffi_cif* cif);
 void FFI_HIDDEN ffi_closure_SYSV (ffi_closure *)
-     __attribute__ ((regparm(1)));
+     ;
 unsigned int FFI_HIDDEN ffi_closure_SYSV_inner (ffi_closure *, void **, void *)
-     __attribute__ ((regparm(1)));
+     ;
 void FFI_HIDDEN ffi_closure_raw_SYSV (ffi_raw_closure *)
-     __attribute__ ((regparm(1)));
+     ;
 #ifdef X86_WIN32
 void FFI_HIDDEN ffi_closure_raw_THISCALL (ffi_raw_closure *)
-     __attribute__ ((regparm(1)));
+     ;
 #endif
 #ifndef X86_WIN64
 void FFI_HIDDEN ffi_closure_STDCALL (ffi_closure *)
-     __attribute__ ((regparm(1)));
+     ;
 void FFI_HIDDEN ffi_closure_THISCALL (ffi_closure *)
-     __attribute__ ((regparm(1)));
+     ;
 void FFI_HIDDEN ffi_closure_FASTCALL (ffi_closure *)
-     __attribute__ ((regparm(1)));
+     ;
 #else
 void FFI_HIDDEN ffi_closure_win64 (ffi_closure *);
 #endif
@@ -485,7 +485,7 @@
 }
 
 #else
-unsigned int FFI_HIDDEN __attribute__ ((regparm(1)))
+unsigned int FFI_HIDDEN 
 ffi_closure_SYSV_inner (ffi_closure *closure, void **respp, void *args)
 {
   /* our various things...  */
diff -urN Python-2.7.11/Modules/_cursesmodule.c Python-2.7.11-em/Modules/_cursesmodule.c
--- Python-2.7.11/Modules/_cursesmodule.c	2015-12-05 20:47:13.000000000 +0100
+++ Python-2.7.11-em/Modules/_cursesmodule.c	2016-05-16 03:00:31.159427736 +0200
@@ -829,7 +829,7 @@
 #endif
 
 static PyObject *
-PyCursesWindow_GetBkgd(PyCursesWindowObject *self)
+PyCursesWindow_GetBkgd(PyCursesWindowObject *self, PyObject *noargs)
 {
     return PyInt_FromLong((long) getbkgd(self->win));
 }
@@ -1693,7 +1693,7 @@
 NoArgNoReturnVoidFunction(noqiflush)
 
 static PyObject *
-PyCurses_filter(PyObject *self)
+PyCurses_filter(PyObject *self, PyObject *noargs)
 {
     /* not checking for PyCursesInitialised here since filter() must
        be called before initscr() */
@@ -1761,7 +1761,7 @@
 }
 
 static PyObject *
-PyCurses_EraseChar(PyObject *self)
+PyCurses_EraseChar(PyObject *self, PyObject *noargs)
 {
     char ch;
 
@@ -1773,7 +1773,7 @@
 }
 
 static PyObject *
-PyCurses_getsyx(PyObject *self)
+PyCurses_getsyx(PyObject *self, PyObject *noargs)
 {
     int x = 0;
     int y = 0;
@@ -1787,7 +1787,7 @@
 
 #ifdef NCURSES_MOUSE_VERSION
 static PyObject *
-PyCurses_GetMouse(PyObject *self)
+PyCurses_GetMouse(PyObject *self, PyObject *noargs)
 {
     int rtn;
     MEVENT event;
@@ -1915,7 +1915,7 @@
 static PyObject *ModDict;
 
 static PyObject *
-PyCurses_InitScr(PyObject *self)
+PyCurses_InitScr(PyObject *self, PyObject *noargs)
 {
     WINDOW *win;
 
@@ -2132,7 +2132,7 @@
 #endif
 
 static PyObject *
-PyCurses_KillChar(PyObject *self)
+PyCurses_KillChar(PyObject *self, PyObject *noargs)
 {
     char ch;
 
@@ -2446,7 +2446,7 @@
 }
 
 static PyObject *
-PyCurses_Start_Color(PyObject *self)
+PyCurses_Start_Color(PyObject *self, PyObject *noargs)
 {
     int code;
     PyObject *c, *cp;
@@ -2615,7 +2615,7 @@
 
 #ifndef STRICT_SYSV_CURSES
 static PyObject *
-PyCurses_Use_Default_Colors(PyObject *self)
+PyCurses_Use_Default_Colors(PyObject *self, PyObject *noargs)
 {
     int code;
 
diff -urN Python-2.7.11/Modules/_curses_panel.c Python-2.7.11-em/Modules/_curses_panel.c
--- Python-2.7.11/Modules/_curses_panel.c	2015-12-05 20:47:13.000000000 +0100
+++ Python-2.7.11-em/Modules/_curses_panel.c	2016-05-16 03:00:31.158427736 +0200
@@ -202,7 +202,7 @@
 /* panel_above(NULL) returns the bottom panel in the stack. To get
    this behaviour we use curses.panel.bottom_panel(). */
 static PyObject *
-PyCursesPanel_above(PyCursesPanelObject *self)
+PyCursesPanel_above(PyCursesPanelObject *self, PyObject *noargs)
 {
     PANEL *pan;
     PyCursesPanelObject *po;
@@ -227,7 +227,7 @@
 /* panel_below(NULL) returns the top panel in the stack. To get
    this behaviour we use curses.panel.top_panel(). */
 static PyObject *
-PyCursesPanel_below(PyCursesPanelObject *self)
+PyCursesPanel_below(PyCursesPanelObject *self, PyObject *noargs)
 {
     PANEL *pan;
     PyCursesPanelObject *po;
@@ -250,7 +250,7 @@
 }
 
 static PyObject *
-PyCursesPanel_window(PyCursesPanelObject *self)
+PyCursesPanel_window(PyCursesPanelObject *self, PyObject *noargs)
 {
     Py_INCREF(self->wo);
     return (PyObject *)self->wo;
@@ -308,7 +308,7 @@
 }
 
 static PyObject *
-PyCursesPanel_userptr(PyCursesPanelObject *self)
+PyCursesPanel_userptr(PyCursesPanelObject *self, PyObject *noargs)
 {
     PyObject *obj;
     PyCursesInitialised;
@@ -372,7 +372,7 @@
    panel.above() *requires* a panel object in the first place which
    may be undesirable. */
 static PyObject *
-PyCurses_bottom_panel(PyObject *self)
+PyCurses_bottom_panel(PyObject *self, PyObject *noargs)
 {
     PANEL *pan;
     PyCursesPanelObject *po;
@@ -418,7 +418,7 @@
    *requires* a panel object in the first place which may be
    undesirable. */
 static PyObject *
-PyCurses_top_panel(PyObject *self)
+PyCurses_top_panel(PyObject *self, PyObject *noargs)
 {
     PANEL *pan;
     PyCursesPanelObject *po;
diff -urN Python-2.7.11/Modules/datetimemodule.c Python-2.7.11-em/Modules/datetimemodule.c
--- Python-2.7.11/Modules/datetimemodule.c	2015-12-05 20:47:14.000000000 +0100
+++ Python-2.7.11-em/Modules/datetimemodule.c	2016-05-16 03:00:31.182427736 +0200
@@ -2098,7 +2098,7 @@
 }
 
 static PyObject *
-delta_total_seconds(PyObject *self)
+delta_total_seconds(PyObject *self, PyObject *noargs)
 {
     PyObject *total_seconds;
     PyObject *total_microseconds;
@@ -2122,7 +2122,7 @@
 }
 
 static PyObject *
-delta_reduce(PyDateTime_Delta* self)
+delta_reduce(PyDateTime_Delta* self, PyObject *noargs)
 {
     return Py_BuildValue("ON", Py_TYPE(self), delta_getstate(self));
 }
@@ -2495,7 +2495,7 @@
 }
 
 static PyObject *
-date_isoformat(PyDateTime_Date *self)
+date_isoformat(PyDateTime_Date *self, PyObject *noargs)
 {
     char buffer[128];
 
@@ -2512,7 +2512,7 @@
 
 
 static PyObject *
-date_ctime(PyDateTime_Date *self)
+date_ctime(PyDateTime_Date *self, PyObject *noargs)
 {
     return format_ctime(self, 0, 0, 0);
 }
@@ -2571,7 +2571,7 @@
 /* ISO methods. */
 
 static PyObject *
-date_isoweekday(PyDateTime_Date *self)
+date_isoweekday(PyDateTime_Date *self, PyObject *noargs)
 {
     int dow = weekday(GET_YEAR(self), GET_MONTH(self), GET_DAY(self));
 
@@ -2579,7 +2579,7 @@
 }
 
 static PyObject *
-date_isocalendar(PyDateTime_Date *self)
+date_isocalendar(PyDateTime_Date *self, PyObject *noargs)
 {
     int  year         = GET_YEAR(self);
     int  week1_monday = iso_week1_monday(year);
@@ -2630,7 +2630,7 @@
 }
 
 static PyObject *
-date_timetuple(PyDateTime_Date *self)
+date_timetuple(PyDateTime_Date *self, PyObject *noargs)
 {
     return build_struct_time(GET_YEAR(self),
                              GET_MONTH(self),
@@ -2674,14 +2674,14 @@
 }
 
 static PyObject *
-date_toordinal(PyDateTime_Date *self)
+date_toordinal(PyDateTime_Date *self, PyObject *noargs)
 {
     return PyInt_FromLong(ymd_to_ord(GET_YEAR(self), GET_MONTH(self),
                                      GET_DAY(self)));
 }
 
 static PyObject *
-date_weekday(PyDateTime_Date *self)
+date_weekday(PyDateTime_Date *self, PyObject *noargs)
 {
     int dow = weekday(GET_YEAR(self), GET_MONTH(self), GET_DAY(self));
 
@@ -2960,7 +2960,7 @@
  */
 
 static PyObject *
-tzinfo_reduce(PyObject *self)
+tzinfo_reduce(PyObject *self, PyObject *noargs)
 {
     PyObject *args, *state, *tmp;
     PyObject *getinitargs, *getstate;
@@ -4252,7 +4252,7 @@
 }
 
 static PyObject *
-datetime_ctime(PyDateTime_DateTime *self)
+datetime_ctime(PyDateTime_DateTime *self, PyObject *noargs)
 {
     return format_ctime((PyDateTime_Date *)self,
                         DATE_GET_HOUR(self),
@@ -4468,7 +4468,7 @@
 }
 
 static PyObject *
-datetime_timetuple(PyDateTime_DateTime *self)
+datetime_timetuple(PyDateTime_DateTime *self, PyObject *noargs)
 {
     int dstflag = -1;
 
@@ -4495,7 +4495,7 @@
 }
 
 static PyObject *
-datetime_getdate(PyDateTime_DateTime *self)
+datetime_getdate(PyDateTime_DateTime *self, PyObject *noargs)
 {
     return new_date(GET_YEAR(self),
                     GET_MONTH(self),
@@ -4503,7 +4503,7 @@
 }
 
 static PyObject *
-datetime_gettime(PyDateTime_DateTime *self)
+datetime_gettime(PyDateTime_DateTime *self, PyObject *noargs)
 {
     return new_time(DATE_GET_HOUR(self),
                     DATE_GET_MINUTE(self),
@@ -4513,7 +4513,7 @@
 }
 
 static PyObject *
-datetime_gettimetz(PyDateTime_DateTime *self)
+datetime_gettimetz(PyDateTime_DateTime *self, PyObject *noargs)
 {
     return new_time(DATE_GET_HOUR(self),
                     DATE_GET_MINUTE(self),
@@ -4523,7 +4523,7 @@
 }
 
 static PyObject *
-datetime_utctimetuple(PyDateTime_DateTime *self)
+datetime_utctimetuple(PyDateTime_DateTime *self, PyObject *noargs)
 {
     int y = GET_YEAR(self);
     int m = GET_MONTH(self);
diff -urN Python-2.7.11/Modules/dlmodule.c Python-2.7.11-em/Modules/dlmodule.c
--- Python-2.7.11/Modules/dlmodule.c	2015-12-05 20:47:14.000000000 +0100
+++ Python-2.7.11-em/Modules/dlmodule.c	2016-05-16 03:00:31.185427736 +0200
@@ -43,7 +43,7 @@
 }
 
 static PyObject *
-dl_close(dlobject *xp)
+dl_close(dlobject *xp, PyObject *noargs)
 {
     if (xp->dl_handle != NULL) {
         dlclose(xp->dl_handle);
diff -urN Python-2.7.11/Modules/flmodule.c Python-2.7.11-em/Modules/flmodule.c
--- Python-2.7.11/Modules/flmodule.c	2015-12-05 20:47:14.000000000 +0100
+++ Python-2.7.11-em/Modules/flmodule.c	2016-05-16 03:00:31.186427736 +0200
@@ -174,7 +174,7 @@
 }
 
 static PyObject *
-generic_delete_object(genericobject *g)
+generic_delete_object(genericobject *g, PyObject *noargs)
 {
     PyObject *res;
     res = generic_call(g, fl_delete_object);
@@ -184,19 +184,19 @@
 }
 
 static PyObject *
-generic_show_object(genericobject *g)
+generic_show_object(genericobject *g, PyObject *noargs)
 {
     return generic_call(g, fl_show_object);
 }
 
 static PyObject *
-generic_hide_object(genericobject *g)
+generic_hide_object(genericobject *g, PyObject *noargs)
 {
     return generic_call(g, fl_hide_object);
 }
 
 static PyObject *
-generic_redraw_object(genericobject *g)
+generic_redraw_object(genericobject *g, PyObject *noargs)
 {
     return generic_call(g, fl_redraw_object);
 }
@@ -208,13 +208,13 @@
     using, we omit them unconditionally. */
 
 static PyObject *
-generic_freeze_object(genericobject *g)
+generic_freeze_object(genericobject *g, PyObject *noargs)
 {
     return generic_call(g, fl_freeze_object);
 }
 
 static PyObject *
-generic_unfreeze_object(genericobject *g)
+generic_unfreeze_object(genericobject *g, PyObject *noargs)
 {
     return generic_call(g, fl_unfreeze_object);
 }
@@ -222,13 +222,13 @@
 #endif /* OBSOLETE_FORMS_CALLS */
 
 static PyObject *
-generic_activate_object(genericobject *g)
+generic_activate_object(genericobject *g, PyObject *noargs)
 {
     return generic_call(g, fl_activate_object);
 }
 
 static PyObject *
-generic_deactivate_object(genericobject *g)
+generic_deactivate_object(genericobject *g, PyObject *noargs)
 {
     return generic_call(g, fl_deactivate_object);
 }
@@ -572,7 +572,7 @@
 }
 
 static PyObject *
-clear_browser(genericobject *g)
+clear_browser(genericobject *g, PyObject *noargs)
 {
     return generic_call (g, fl_clear_browser);
 }
@@ -636,7 +636,7 @@
 }
 
 static PyObject *
-get_browser_maxline(genericobject *g)
+get_browser_maxline(genericobject *g, PyObject *noargs)
 {
     return call_forms_Ri (fl_get_browser_maxline, g-> ob_generic);
 }
@@ -745,13 +745,13 @@
 }
 
 static PyObject *
-get_button(genericobject *g)
+get_button(genericobject *g, PyObject *noargs)
 {
     return call_forms_Ri (fl_get_button, g-> ob_generic);
 }
 
 static PyObject *
-get_button_numb(genericobject *g)
+get_button_numb(genericobject *g, PyObject *noargs)
 {
     return call_forms_Ri (fl_get_button_numb, g-> ob_generic);
 }
@@ -779,7 +779,7 @@
 }
 
 static PyObject *
-get_choice(genericobject *g)
+get_choice(genericobject *g, PyObject *noargs)
 {
     return call_forms_Ri (fl_get_choice, g-> ob_generic);
 }
@@ -842,7 +842,7 @@
 /* Class : Clock */
 
 static PyObject *
-get_clock(genericobject *g)
+get_clock(genericobject *g, PyObject *noargs)
 {
     int i0, i1, i2;
 
@@ -859,7 +859,7 @@
 /* CLass : Counters */
 
 static PyObject *
-get_counter_value(genericobject *g)
+get_counter_value(genericobject *g, PyObject *noargs)
 {
     return call_forms_Rf (fl_get_counter_value, g-> ob_generic);
 }
@@ -914,7 +914,7 @@
 /* Class: Dials */
 
 static PyObject *
-get_dial_value(genericobject *g)
+get_dial_value(genericobject *g, PyObject *noargs)
 {
     return call_forms_Rf (fl_get_dial_value, g-> ob_generic);
 }
@@ -1027,7 +1027,7 @@
 /* Class: Sliders */
 
 static PyObject *
-get_slider_value(genericobject *g)
+get_slider_value(genericobject *g, PyObject *noargs)
 {
     return call_forms_Rf (fl_get_slider_value, g-> ob_generic);
 }
@@ -1236,13 +1236,13 @@
 }
 
 static PyObject *
-form_hide_form(formobject *f)
+form_hide_form(formobject *f, PyObject *noargs)
 {
     return form_call(fl_hide_form, f-> ob_form);
 }
 
 static PyObject *
-form_redraw_form(formobject *f)
+form_redraw_form(formobject *f, PyObject *noargs)
 {
     return form_call(fl_redraw_form, f-> ob_form);
 }
@@ -1390,25 +1390,25 @@
 }
 
 static PyObject *
-form_freeze_form(formobject *f)
+form_freeze_form(formobject *f, PyObject *noargs)
 {
     return form_call(fl_freeze_form, f-> ob_form);
 }
 
 static PyObject *
-form_unfreeze_form(formobject *f)
+form_unfreeze_form(formobject *f, PyObject *noargs)
 {
     return form_call(fl_unfreeze_form, f-> ob_form);
 }
 
 static PyObject *
-form_activate_form(formobject *f)
+form_activate_form(formobject *f, PyObject *noargs)
 {
     return form_call(fl_activate_form, f-> ob_form);
 }
 
 static PyObject *
-form_deactivate_form(formobject *f)
+form_deactivate_form(formobject *f, PyObject *noargs)
 {
     return form_call(fl_deactivate_form, f-> ob_form);
 }
@@ -1721,25 +1721,25 @@
 }
 
 static PyObject *
-forms_do_forms(PyObject *dummy)
+forms_do_forms(PyObject *dummy, PyObject *noargs)
 {
     return forms_do_or_check_forms(dummy, fl_do_forms);
 }
 
 static PyObject *
-forms_check_forms(PyObject *dummy)
+forms_check_forms(PyObject *dummy, PyObject *noargs)
 {
     return forms_do_or_check_forms(dummy, fl_check_forms);
 }
 
 static PyObject *
-forms_do_only_forms(PyObject *dummy)
+forms_do_only_forms(PyObject *dummy, PyObject *noargs)
 {
     return forms_do_or_check_forms(dummy, fl_do_only_forms);
 }
 
 static PyObject *
-forms_check_only_forms(PyObject *dummy)
+forms_check_only_forms(PyObject *dummy, PyObject *noargs)
 {
     return forms_do_or_check_forms(dummy, fl_check_only_forms);
 }
@@ -1857,7 +1857,7 @@
 }
 
 static PyObject *
-forms_qreset(PyObject *self)
+forms_qreset(PyObject *self, PyObject *noargs)
 {
     fl_qreset();
     Py_INCREF(Py_None);
@@ -1916,7 +1916,7 @@
 }
 
 static PyObject *
-forms_get_mouse(PyObject *self)
+forms_get_mouse(PyObject *self, PyObject *noargs)
 {
     float x, y;
 
diff -urN Python-2.7.11/Modules/fmmodule.c Python-2.7.11-em/Modules/fmmodule.c
--- Python-2.7.11/Modules/fmmodule.c	2015-12-05 20:47:14.000000000 +0100
+++ Python-2.7.11-em/Modules/fmmodule.c	2016-05-16 03:00:31.187427736 +0200
@@ -49,7 +49,7 @@
 /* XXX fmmakefont */
 
 static PyObject *
-fh_setfont(fhobject *self)
+fh_setfont(fhobject *self, PyObject *noargs)
 {
     fmsetfont(self->fh_fh);
     Py_INCREF(Py_None);
@@ -57,7 +57,7 @@
 }
 
 static PyObject *
-fh_getfontname(fhobject *self)
+fh_getfontname(fhobject *self, PyObject *noargs)
 {
     char fontname[256];
     int len;
@@ -70,7 +70,7 @@
 }
 
 static PyObject *
-fh_getcomment(fhobject *self)
+fh_getcomment(fhobject *self, PyObject *noargs)
 {
     char comment[256];
     int len;
@@ -83,7 +83,7 @@
 }
 
 static PyObject *
-fh_getfontinfo(fhobject *self)
+fh_getfontinfo(fhobject *self, PyObject *noargs)
 {
     fmfontinfo info;
     if (fmgetfontinfo(self->fh_fh, &info) < 0) {
@@ -162,7 +162,7 @@
 /* Font Manager functions */
 
 static PyObject *
-fm_init(PyObject *self)
+fm_init(PyObject *self, PyObject *noargs)
 {
     fminit();
     Py_INCREF(Py_None);
@@ -214,7 +214,7 @@
 }
 
 static PyObject *
-fm_enumerate(PyObject *self)
+fm_enumerate(PyObject *self, PyObject *noargs)
 {
     PyObject *res;
     fontlist = PyList_New(0);
@@ -238,7 +238,7 @@
 }
 
 static PyObject *
-fm_fontpath(PyObject *self)
+fm_fontpath(PyObject *self, PyObject *noargs)
 {
     return PyString_FromString(fmfontpath());
 }
diff -urN Python-2.7.11/Modules/_functoolsmodule.c Python-2.7.11-em/Modules/_functoolsmodule.c
--- Python-2.7.11/Modules/_functoolsmodule.c	2015-12-05 20:47:13.000000000 +0100
+++ Python-2.7.11-em/Modules/_functoolsmodule.c	2016-05-16 03:00:31.160427736 +0200
@@ -230,7 +230,7 @@
 };
 
 static PyObject *
-partial_get_dict(partialobject *pto)
+partial_get_dict(partialobject *pto, void *closure)
 {
     if (pto->dict == NULL) {
         pto->dict = PyDict_New();
@@ -242,7 +242,7 @@
 }
 
 static int
-partial_set_dict(partialobject *pto, PyObject *value)
+partial_set_dict(partialobject *pto, PyObject *value, void *closure)
 {
     PyObject *tmp;
 
diff -urN Python-2.7.11/Modules/_hotshot.c Python-2.7.11-em/Modules/_hotshot.c
--- Python-2.7.11/Modules/_hotshot.c	2015-12-05 20:47:13.000000000 +0100
+++ Python-2.7.11-em/Modules/_hotshot.c	2016-05-16 03:00:31.161427736 +0200
@@ -131,7 +131,7 @@
 "Raises ValueError if the log file is closed.");
 
 static PyObject *
-logreader_fileno(LogReaderObject *self)
+logreader_fileno(LogReaderObject *self, PyObject *noargs)
 {
     if (self->logfp == NULL) {
         PyErr_SetString(PyExc_ValueError,
@@ -1035,7 +1035,7 @@
 "Shut down this profiler and close the log files, even if its active.");
 
 static PyObject *
-profiler_close(ProfilerObject *self)
+profiler_close(ProfilerObject *self, PyObject *noargs)
 {
     do_stop(self);
     if (self->logfp != NULL) {
@@ -1049,7 +1049,7 @@
 #define fileno__doc__ logreader_fileno__doc__
 
 static PyObject *
-profiler_fileno(ProfilerObject *self)
+profiler_fileno(ProfilerObject *self, PyObject *noargs)
 {
     if (self->logfp == NULL) {
         PyErr_SetString(PyExc_ValueError,
diff -urN Python-2.7.11/Modules/_io/bufferedio.c Python-2.7.11-em/Modules/_io/bufferedio.c
--- Python-2.7.11/Modules/_io/bufferedio.c	2015-12-05 20:47:13.000000000 +0100
+++ Python-2.7.11-em/Modules/_io/bufferedio.c	2016-05-16 03:00:31.162427736 +0200
@@ -80,7 +80,7 @@
     "state.\n");
 
 static PyObject *
-bufferediobase_detach(PyObject *self)
+bufferediobase_detach(PyObject *self, PyObject *noargs)
 {
     return bufferediobase_unsupported("detach");
 }
diff -urN Python-2.7.11/Modules/_io/bytesio.c Python-2.7.11-em/Modules/_io/bytesio.c
--- Python-2.7.11/Modules/_io/bytesio.c	2015-12-05 20:47:13.000000000 +0100
+++ Python-2.7.11-em/Modules/_io/bytesio.c	2016-05-16 03:00:31.162427736 +0200
@@ -146,7 +146,7 @@
 }
 
 static PyObject *
-bytesio_get_closed(bytesio *self)
+bytesio_get_closed(bytesio *self, void *context)
 {
     if (self->buf == NULL) {
         Py_RETURN_TRUE;
diff -urN Python-2.7.11/Modules/_io/fileio.c Python-2.7.11-em/Modules/_io/fileio.c
--- Python-2.7.11/Modules/_io/fileio.c	2015-12-05 20:47:13.000000000 +0100
+++ Python-2.7.11-em/Modules/_io/fileio.c	2016-05-16 03:00:31.163427736 +0200
@@ -99,7 +99,7 @@
 }
 
 static PyObject *
-fileio_close(fileio *self)
+fileio_close(fileio *self, PyObject *noargs)
 {
     PyObject *res;
     res = PyObject_CallMethod((PyObject*)&PyRawIOBase_Type,
@@ -417,7 +417,7 @@
 }
 
 static PyObject *
-fileio_fileno(fileio *self)
+fileio_fileno(fileio *self, PyObject *noargs)
 {
     if (self->fd < 0)
         return err_closed();
@@ -425,7 +425,7 @@
 }
 
 static PyObject *
-fileio_readable(fileio *self)
+fileio_readable(fileio *self, PyObject *noargs)
 {
     if (self->fd < 0)
         return err_closed();
@@ -433,7 +433,7 @@
 }
 
 static PyObject *
-fileio_writable(fileio *self)
+fileio_writable(fileio *self, PyObject *noargs)
 {
     if (self->fd < 0)
         return err_closed();
@@ -441,7 +441,7 @@
 }
 
 static PyObject *
-fileio_seekable(fileio *self)
+fileio_seekable(fileio *self, PyObject *noargs)
 {
     if (self->fd < 0)
         return err_closed();
@@ -523,7 +523,7 @@
 }
 
 static PyObject *
-fileio_readall(fileio *self)
+fileio_readall(fileio *self, PyObject *noargs)
 {
     PyObject *result;
     Py_ssize_t total = 0;
@@ -616,7 +616,7 @@
         return NULL;
 
     if (size < 0) {
-        return fileio_readall(self);
+        return fileio_readall(self, NULL);
     }
 
 #if defined(MS_WIN64) || defined(MS_WINDOWS)
@@ -933,7 +933,7 @@
 }
 
 static PyObject *
-fileio_isatty(fileio *self)
+fileio_isatty(fileio *self, PyObject *noargs)
 {
     long res;
 
diff -urN Python-2.7.11/Modules/_io/textio.c Python-2.7.11-em/Modules/_io/textio.c
--- Python-2.7.11/Modules/_io/textio.c	2015-12-05 20:47:13.000000000 +0100
+++ Python-2.7.11-em/Modules/_io/textio.c	2016-05-16 03:00:31.164427736 +0200
@@ -36,7 +36,7 @@
     );
 
 static PyObject *
-textiobase_detach(PyObject *self)
+textiobase_detach(PyObject *self, PyObject *noargs)
 {
     return _unsupported("detach");
 }
@@ -1188,7 +1188,7 @@
 
 
 static PyObject *
-textiowrapper_detach(textio *self)
+textiowrapper_detach(textio *self, PyObject *noargs)
 {
     PyObject *buffer, *res;
     CHECK_ATTACHED(self);
diff -urN Python-2.7.11/Modules/itertoolsmodule.c Python-2.7.11-em/Modules/itertoolsmodule.c
--- Python-2.7.11/Modules/itertoolsmodule.c	2015-12-05 20:47:15.000000000 +0100
+++ Python-2.7.11-em/Modules/itertoolsmodule.c	2016-05-16 03:00:31.188427736 +0200
@@ -513,7 +513,7 @@
 }
 
 static PyObject *
-tee_copy(teeobject *to)
+tee_copy(teeobject *to, PyObject *noargs)
 {
     teeobject *newto;
 
@@ -540,7 +540,7 @@
     if (it == NULL)
         return NULL;
     if (PyObject_TypeCheck(it, &tee_type)) {
-        to = (teeobject *)tee_copy((teeobject *)it);
+        to = (teeobject *)tee_copy((teeobject *)it, NULL);
         goto done;
     }
 
@@ -3420,7 +3420,7 @@
 }
 
 static PyObject *
-count_reduce(countobject *lz)
+count_reduce(countobject *lz, PyObject *noargs)
 {
     if (lz->cnt == PY_SSIZE_T_MAX)
         return Py_BuildValue("O(OO)", Py_TYPE(lz), lz->long_cnt, lz->long_step);
@@ -3759,7 +3759,7 @@
 }
 
 static PyObject *
-repeat_len(repeatobject *ro)
+repeat_len(repeatobject *ro, PyObject *noargs)
 {
     if (ro->cnt == -1) {
         PyErr_SetString(PyExc_TypeError, "len() of unsized object");
diff -urN Python-2.7.11/Modules/md5module.c Python-2.7.11-em/Modules/md5module.c
--- Python-2.7.11/Modules/md5module.c	2015-12-05 20:47:15.000000000 +0100
+++ Python-2.7.11-em/Modules/md5module.c	2016-05-16 03:00:31.189427736 +0200
@@ -84,7 +84,7 @@
 
 
 static PyObject *
-md5_digest(md5object *self)
+md5_digest(md5object *self, PyObject *noargs)
 {
     md5_state_t mdContext;
     unsigned char aDigest[16];
@@ -105,7 +105,7 @@
 
 
 static PyObject *
-md5_hexdigest(md5object *self)
+md5_hexdigest(md5object *self, PyObject *noargs)
 {
     md5_state_t mdContext;
     unsigned char digest[16];
@@ -137,7 +137,7 @@
 
 
 static PyObject *
-md5_copy(md5object *self)
+md5_copy(md5object *self, PyObject *noargs)
 {
     md5object *md5p;
 
diff -urN Python-2.7.11/Modules/_multiprocessing/semaphore.c Python-2.7.11-em/Modules/_multiprocessing/semaphore.c
--- Python-2.7.11/Modules/_multiprocessing/semaphore.c	2015-12-05 20:47:13.000000000 +0100
+++ Python-2.7.11-em/Modules/_multiprocessing/semaphore.c	2016-05-16 03:00:31.165427736 +0200
@@ -486,20 +486,20 @@
 }
 
 static PyObject *
-semlock_count(SemLockObject *self)
+semlock_count(SemLockObject *self, PyObject *noargs)
 {
     return PyInt_FromLong((long)self->count);
 }
 
 static PyObject *
-semlock_ismine(SemLockObject *self)
+semlock_ismine(SemLockObject *self, PyObject *noargs)
 {
     /* only makes sense for a lock */
     return PyBool_FromLong(ISMINE(self));
 }
 
 static PyObject *
-semlock_getvalue(SemLockObject *self)
+semlock_getvalue(SemLockObject *self, PyObject *noargs)
 {
 #ifdef HAVE_BROKEN_SEM_GETVALUE
     PyErr_SetNone(PyExc_NotImplementedError);
@@ -517,7 +517,7 @@
 }
 
 static PyObject *
-semlock_iszero(SemLockObject *self)
+semlock_iszero(SemLockObject *self, PyObject *noargs)
 {
 #ifdef HAVE_BROKEN_SEM_GETVALUE
     if (sem_trywait(self->handle) < 0) {
@@ -538,7 +538,7 @@
 }
 
 static PyObject *
-semlock_afterfork(SemLockObject *self)
+semlock_afterfork(SemLockObject *self, PyObject *noargs)
 {
     self->count = 0;
     Py_RETURN_NONE;
diff -urN Python-2.7.11/Modules/pwdmodule.c Python-2.7.11-em/Modules/pwdmodule.c
--- Python-2.7.11/Modules/pwdmodule.c	2015-12-05 20:47:15.000000000 +0100
+++ Python-2.7.11-em/Modules/pwdmodule.c	2016-05-16 03:00:31.189427736 +0200
@@ -152,7 +152,7 @@
 See help(pwd) for more on password database entries.");
 
 static PyObject *
-pwd_getpwall(PyObject *self)
+pwd_getpwall(PyObject *self, PyObject *noargs)
 {
     PyObject *d;
     struct passwd *p;
diff -urN Python-2.7.11/Modules/_randommodule.c Python-2.7.11-em/Modules/_randommodule.c
--- Python-2.7.11/Modules/_randommodule.c	2015-12-05 20:47:13.000000000 +0100
+++ Python-2.7.11-em/Modules/_randommodule.c	2016-05-16 03:00:31.166427736 +0200
@@ -135,7 +135,7 @@
  * The orginal code credited Isaku Wada for this algorithm, 2002/01/09.
  */
 static PyObject *
-random_random(RandomObject *self)
+random_random(RandomObject *self, PyObject *noargs)
 {
     unsigned long a=genrand_int32(self)>>5, b=genrand_int32(self)>>6;
     return PyFloat_FromDouble((a*67108864.0+b)*(1.0/9007199254740992.0));
@@ -309,7 +309,7 @@
 }
 
 static PyObject *
-random_getstate(RandomObject *self)
+random_getstate(RandomObject *self, PyObject *noargs)
 {
     PyObject *state;
     PyObject *element;
diff -urN Python-2.7.11/Modules/selectmodule.c Python-2.7.11-em/Modules/selectmodule.c
--- Python-2.7.11/Modules/selectmodule.c	2015-12-05 20:47:15.000000000 +0100
+++ Python-2.7.11-em/Modules/selectmodule.c	2016-05-16 03:00:31.190427736 +0200
@@ -814,7 +814,7 @@
 }
 
 static PyObject*
-pyepoll_close(pyEpoll_Object *self)
+pyepoll_close(pyEpoll_Object *self, PyObject *noargs)
 {
     errno = pyepoll_internal_close(self);
     if (errno < 0) {
@@ -831,7 +831,7 @@
 object will raise an exception.");
 
 static PyObject*
-pyepoll_get_closed(pyEpoll_Object *self)
+pyepoll_get_closed(pyEpoll_Object *self, void *closure)
 {
     if (self->epfd < 0)
         Py_RETURN_TRUE;
@@ -840,7 +840,7 @@
 }
 
 static PyObject*
-pyepoll_fileno(pyEpoll_Object *self)
+pyepoll_fileno(pyEpoll_Object *self, PyObject *noargs)
 {
     if (self->epfd < 0)
         return pyepoll_err_closed();
@@ -1474,7 +1474,7 @@
 }
 
 static PyObject*
-kqueue_queue_close(kqueue_queue_Object *self)
+kqueue_queue_close(kqueue_queue_Object *self, PyObject *noargs)
 {
     errno = kqueue_queue_internal_close(self);
     if (errno < 0) {
@@ -1491,7 +1491,7 @@
 object will raise an exception.");
 
 static PyObject*
-kqueue_queue_get_closed(kqueue_queue_Object *self)
+kqueue_queue_get_closed(kqueue_queue_Object *self, void *context)
 {
     if (self->kqfd < 0)
         Py_RETURN_TRUE;
@@ -1500,7 +1500,7 @@
 }
 
 static PyObject*
-kqueue_queue_fileno(kqueue_queue_Object *self)
+kqueue_queue_fileno(kqueue_queue_Object *self, PyObject *noargs)
 {
     if (self->kqfd < 0)
         return kqueue_queue_err_closed();
diff -urN Python-2.7.11/Modules/signalmodule.c Python-2.7.11-em/Modules/signalmodule.c
--- Python-2.7.11/Modules/signalmodule.c	2015-12-05 20:47:15.000000000 +0100
+++ Python-2.7.11-em/Modules/signalmodule.c	2016-05-16 03:00:31.191427737 +0200
@@ -240,7 +240,7 @@
 
 #ifdef HAVE_PAUSE
 static PyObject *
-signal_pause(PyObject *self)
+signal_pause(PyObject *self, PyObject *noargs)
 {
     Py_BEGIN_ALLOW_THREADS
     (void)pause();
diff -urN Python-2.7.11/Modules/_sqlite/connection.c Python-2.7.11-em/Modules/_sqlite/connection.c
--- Python-2.7.11/Modules/_sqlite/connection.c	2015-12-05 20:47:13.000000000 +0100
+++ Python-2.7.11-em/Modules/_sqlite/connection.c	2016-05-16 03:00:31.168427736 +0200
@@ -41,7 +41,7 @@
 #endif
 #endif
 
-static int pysqlite_connection_set_isolation_level(pysqlite_Connection* self, PyObject* isolation_level);
+static int pysqlite_connection_set_isolation_level(pysqlite_Connection* self, PyObject* isolation_level, void *unused);
 static void _pysqlite_drop_unused_cursor_references(pysqlite_Connection* self);
 
 
@@ -152,7 +152,7 @@
         Py_INCREF(isolation_level);
     }
     self->isolation_level = NULL;
-    if (pysqlite_connection_set_isolation_level(self, isolation_level) < 0) {
+    if (pysqlite_connection_set_isolation_level(self, isolation_level, NULL) < 0) {
         Py_DECREF(isolation_level);
         return -1;
     }
@@ -1126,7 +1126,7 @@
     }
 }
 
-static int pysqlite_connection_set_isolation_level(pysqlite_Connection* self, PyObject* isolation_level)
+static int pysqlite_connection_set_isolation_level(pysqlite_Connection* self, PyObject* isolation_level, void *unused)
 {
     PyObject* res;
     PyObject* begin_statement;
diff -urN Python-2.7.11/Modules/_sre.c Python-2.7.11-em/Modules/_sre.c
--- Python-2.7.11/Modules/_sre.c	2015-12-05 20:47:13.000000000 +0100
+++ Python-2.7.11-em/Modules/_sre.c	2016-05-16 03:00:31.170427736 +0200
@@ -3689,7 +3689,7 @@
 };
 
 static PyObject *
-match_lastindex_get(MatchObject *self)
+match_lastindex_get(MatchObject *self, void *closure)
 {
     if (self->lastindex >= 0)
         return PyInt_FromSsize_t(self->lastindex);
@@ -3698,7 +3698,7 @@
 }
 
 static PyObject *
-match_lastgroup_get(MatchObject *self)
+match_lastgroup_get(MatchObject *self, void *closure)
 {
     if (self->pattern->indexgroup && self->lastindex >= 0) {
         PyObject* result = PySequence_GetItem(
@@ -3713,7 +3713,7 @@
 }
 
 static PyObject *
-match_regs_get(MatchObject *self)
+match_regs_get(MatchObject *self, void *closure)
 {
     if (self->regs) {
         Py_INCREF(self->regs);
diff -urN Python-2.7.11/Modules/_ssl.c Python-2.7.11-em/Modules/_ssl.c
--- Python-2.7.11/Modules/_ssl.c	2015-12-05 20:47:13.000000000 +0100
+++ Python-2.7.11-em/Modules/_ssl.c	2016-05-16 03:00:31.172427736 +0200
@@ -1872,7 +1872,7 @@
 
 #if HAVE_OPENSSL_FINISHED
 static PyObject *
-PySSL_tls_unique_cb(PySSLSocket *self)
+PySSL_tls_unique_cb(PySSLSocket *self, PyObject *noargs)
 {
     PyObject *retval = NULL;
     char buf[PySSL_CB_MAXLEN];
@@ -3366,7 +3366,7 @@
 bound on the entropy contained in string.  See RFC 1750.");
 
 static PyObject *
-PySSL_RAND_status(PyObject *self)
+PySSL_RAND_status(PyObject *self, PyObject *noargs)
 {
     return PyLong_FromLong(RAND_status());
 }
@@ -3420,7 +3420,7 @@
 'cert_file_env', 'cert_file', 'cert_dir_env', 'cert_dir'.");
 
 static PyObject *
-PySSL_get_default_verify_paths(PyObject *self)
+PySSL_get_default_verify_paths(PyObject *self, PyObject *noargs)
 {
     PyObject *ofile_env = NULL;
     PyObject *ofile = NULL;
diff -urN Python-2.7.11/Modules/sunaudiodev.c Python-2.7.11-em/Modules/sunaudiodev.c
--- Python-2.7.11/Modules/sunaudiodev.c	2015-12-05 20:47:15.000000000 +0100
+++ Python-2.7.11-em/Modules/sunaudiodev.c	2016-05-16 03:00:31.191427737 +0200
@@ -188,7 +188,7 @@
 }
 
 static PyObject *
-sad_getinfo(sadobject *self)
+sad_getinfo(sadobject *self, PyObject *noargs)
 {
     sadstatusobject *rv;
 
@@ -220,7 +220,7 @@
 }
 
 static PyObject *
-sad_ibufcount(sadobject *self)
+sad_ibufcount(sadobject *self, PyObject *noargs)
 {
     audio_info_t ai;
 
@@ -232,7 +232,7 @@
 }
 
 static PyObject *
-sad_obufcount(sadobject *self)
+sad_obufcount(sadobject *self, PyObject *noargs)
 {
     audio_info_t ai;
 
@@ -248,7 +248,7 @@
 }
 
 static PyObject *
-sad_drain(sadobject *self)
+sad_drain(sadobject *self, PyObject *noargs)
 {
     if (ioctl(self->x_fd, AUDIO_DRAIN, 0) < 0) {
         PyErr_SetFromErrno(SunAudioError);
@@ -260,7 +260,7 @@
 
 #ifdef SOLARIS
 static PyObject *
-sad_getdev(sadobject *self)
+sad_getdev(sadobject *self, PyObject *noargs)
 {
     struct audio_device ad;
 
@@ -273,7 +273,7 @@
 #endif
 
 static PyObject *
-sad_flush(sadobject *self)
+sad_flush(sadobject *self, PyObject *noargs)
 {
     if (ioctl(self->x_fd, I_FLUSH, FLUSHW) < 0) {
         PyErr_SetFromErrno(SunAudioError);
@@ -284,7 +284,7 @@
 }
 
 static PyObject *
-sad_close(sadobject *self)
+sad_close(sadobject *self, PyObject *noargs)
 {
 
     if (self->x_fd >= 0) {
@@ -296,7 +296,7 @@
 }
 
 static PyObject *
-sad_fileno(sadobject *self)
+sad_fileno(sadobject *self, PyObject *noargs)
 {
     return PyInt_FromLong(self->x_fd);
 }
diff -urN Python-2.7.11/Modules/_testcapimodule.c Python-2.7.11-em/Modules/_testcapimodule.c
--- Python-2.7.11/Modules/_testcapimodule.c	2015-12-05 20:47:13.000000000 +0100
+++ Python-2.7.11-em/Modules/_testcapimodule.c	2016-05-16 03:00:31.173427736 +0200
@@ -51,7 +51,7 @@
 }
 
 static PyObject*
-test_config(PyObject *self)
+test_config(PyObject *self, PyObject *noargs)
 {
 #define CHECK_SIZEOF(FATNAME, TYPE) \
             if (FATNAME != sizeof(TYPE)) \
@@ -73,7 +73,7 @@
 }
 
 static PyObject*
-test_list_api(PyObject *self)
+test_list_api(PyObject *self, PyObject *noargs)
 {
     PyObject* list;
     int i;
@@ -160,7 +160,7 @@
 }
 
 static PyObject*
-test_dict_iteration(PyObject* self)
+test_dict_iteration(PyObject* self, PyObject *noargs)
 {
     int i;
 
@@ -221,7 +221,7 @@
 };
 
 static PyObject*
-test_lazy_hash_inheritance(PyObject* self)
+test_lazy_hash_inheritance(PyObject* self, PyObject *noargs)
 {
     PyTypeObject *type;
     PyObject *obj;
@@ -349,7 +349,7 @@
 };
 
 static PyObject*
-test_broken_memoryview(PyObject* self)
+test_broken_memoryview(PyObject* self, PyObject *noargs)
 {
     PyObject *obj = PyObject_New(PyObject, &_MemoryViewTester_Type);
     PyObject *res;
@@ -510,7 +510,7 @@
 #include "testcapi_long.h"
 
 static PyObject *
-test_long_api(PyObject* self)
+test_long_api(PyObject* self, PyObject *noargs)
 {
     return TESTNAME(raise_test_long_error);
 }
@@ -558,7 +558,7 @@
 */
 
 static PyObject *
-test_long_and_overflow(PyObject *self)
+test_long_and_overflow(PyObject *self, PyObject *noargs)
 {
     PyObject *num, *one, *temp;
     long value;
@@ -723,7 +723,7 @@
 */
 
 static PyObject *
-test_long_long_and_overflow(PyObject *self)
+test_long_long_and_overflow(PyObject *self, PyObject *noargs)
 {
     PyObject *num, *one, *temp;
     PY_LONG_LONG value;
@@ -887,7 +887,7 @@
    it fails.
 */
 static PyObject *
-test_L_code(PyObject *self)
+test_L_code(PyObject *self, PyObject *noargs)
 {
     PyObject *tuple, *num;
     PY_LONG_LONG value;
@@ -1063,7 +1063,7 @@
 /* This function not only tests the 'k' getargs code, but also the
    PyInt_AsUnsignedLongMask() and PyInt_AsUnsignedLongMask() functions. */
 static PyObject *
-test_k_code(PyObject *self)
+test_k_code(PyObject *self, PyObject *noargs)
 {
     PyObject *tuple, *num;
     unsigned long value;
@@ -1123,7 +1123,7 @@
    of an error.
 */
 static PyObject *
-test_u_code(PyObject *self)
+test_u_code(PyObject *self, PyObject *noargs)
 {
     PyObject *tuple, *obj;
     Py_UNICODE *value;
@@ -1164,7 +1164,7 @@
 }
 
 static PyObject *
-test_widechar(PyObject *self)
+test_widechar(PyObject *self, PyObject *noargs)
 {
 #if defined(SIZEOF_WCHAR_T) && (SIZEOF_WCHAR_T == 4)
     const wchar_t wtext[2] = {(wchar_t)0x10ABCDu};
@@ -1241,7 +1241,7 @@
 }
 
 static PyObject *
-test_empty_argparse(PyObject *self)
+test_empty_argparse(PyObject *self, PyObject *noargs)
 {
     /* Test that formats can begin with '|'. See issue #4720. */
     PyObject *tuple, *dict = NULL;
@@ -1290,7 +1290,7 @@
 
 /* Simple test of _PyLong_NumBits and _PyLong_Sign. */
 static PyObject *
-test_long_numbits(PyObject *self)
+test_long_numbits(PyObject *self, PyObject *noargs)
 {
     struct triple {
         long input;
@@ -1333,7 +1333,7 @@
 /* Example passing NULLs to PyObject_Str(NULL) and PyObject_Unicode(NULL). */
 
 static PyObject *
-test_null_strings(PyObject *self)
+test_null_strings(PyObject *self, PyObject *noargs)
 {
     PyObject *o1 = PyObject_Str(NULL), *o2 = PyObject_Unicode(NULL);
     PyObject *tuple = PyTuple_Pack(2, o1, o2);
@@ -1727,7 +1727,7 @@
 
 /* This is here to provide a docstring for test_descr. */
 static PyObject *
-test_with_docstring(PyObject *self)
+test_with_docstring(PyObject *self, PyObject *noargs)
 {
     Py_RETURN_NONE;
 }
diff -urN Python-2.7.11/Modules/threadmodule.c Python-2.7.11-em/Modules/threadmodule.c
--- Python-2.7.11/Modules/threadmodule.c	2015-12-05 20:47:15.000000000 +0100
+++ Python-2.7.11-em/Modules/threadmodule.c	2016-05-16 03:00:31.192427737 +0200
@@ -67,7 +67,7 @@
 The blocking operation is not interruptible.");
 
 static PyObject *
-lock_PyThread_release_lock(lockobject *self)
+lock_PyThread_release_lock(lockobject *self, PyObject *noargs)
 {
     /* Sanity check: the lock must be locked */
     if (PyThread_acquire_lock(self->lock_lock, 0)) {
@@ -90,7 +90,7 @@
 but it needn't be locked by the same thread that unlocks it.");
 
 static PyObject *
-lock_locked_lock(lockobject *self)
+lock_locked_lock(lockobject *self, PyObject *noargs)
 {
     if (PyThread_acquire_lock(self->lock_lock, 0)) {
         PyThread_release_lock(self->lock_lock);
@@ -716,7 +716,7 @@
 printed unless the exception is SystemExit.\n");
 
 static PyObject *
-thread_PyThread_exit_thread(PyObject *self)
+thread_PyThread_exit_thread(PyObject *self, PyObject *noargs)
 {
     PyErr_SetNone(PyExc_SystemExit);
     return NULL;
@@ -730,7 +730,7 @@
 thread to exit silently unless the exception is caught.");
 
 static PyObject *
-thread_PyThread_interrupt_main(PyObject * self)
+thread_PyThread_interrupt_main(PyObject * self, PyObject *noargs)
 {
     PyErr_SetInterrupt();
     Py_INCREF(Py_None);
@@ -747,7 +747,7 @@
 static lockobject *newlockobject(void);
 
 static PyObject *
-thread_PyThread_allocate_lock(PyObject *self)
+thread_PyThread_allocate_lock(PyObject *self, PyObject *noargs)
 {
     return (PyObject *) newlockobject();
 }
@@ -759,7 +759,7 @@
 Create a new lock object.  See help(LockType) for information about locks.");
 
 static PyObject *
-thread_get_ident(PyObject *self)
+thread_get_ident(PyObject *self, PyObject *noargs)
 {
     long ident;
     ident = PyThread_get_thread_ident();
@@ -782,7 +782,7 @@
 A thread's identity may be reused for another thread after it exits.");
 
 static PyObject *
-thread__count(PyObject *self)
+thread__count(PyObject *self, PyObject *noargs)
 {
     return PyInt_FromLong(nb_threads);
 }
diff -urN Python-2.7.11/Modules/timingmodule.c Python-2.7.11-em/Modules/timingmodule.c
--- Python-2.7.11/Modules/timingmodule.c	2015-12-05 20:47:15.000000000 +0100
+++ Python-2.7.11-em/Modules/timingmodule.c	2016-05-16 03:00:31.192427737 +0200
@@ -8,7 +8,7 @@
 #include "timing.h"
 
 static PyObject *
-start_timing(PyObject *self)
+start_timing(PyObject *self, PyObject *noargs)
 {
     Py_INCREF(Py_None);
     BEGINTIMING;
@@ -16,7 +16,7 @@
 }
 
 static PyObject *
-finish_timing(PyObject *self)
+finish_timing(PyObject *self, PyObject *noargs)
 {
     ENDTIMING
     Py_INCREF(Py_None);
@@ -24,19 +24,19 @@
 }
 
 static PyObject *
-seconds(PyObject *self)
+seconds(PyObject *self, PyObject *noargs)
 {
     return PyInt_FromLong(TIMINGS);
 }
 
 static PyObject *
-milli(PyObject *self)
+milli(PyObject *self, PyObject *noargs)
 {
     return PyInt_FromLong(TIMINGMS);
 }
 
 static PyObject *
-micro(PyObject *self)
+micro(PyObject *self, PyObject *noargs)
 {
     return PyInt_FromLong(TIMINGUS);
 }
diff -urN Python-2.7.11/Modules/xxsubtype.c Python-2.7.11-em/Modules/xxsubtype.c
--- Python-2.7.11/Modules/xxsubtype.c	2015-12-05 20:47:15.000000000 +0100
+++ Python-2.7.11-em/Modules/xxsubtype.c	2016-05-16 03:00:31.193427737 +0200
@@ -89,7 +89,7 @@
 }
 
 static PyObject *
-spamlist_state_get(spamlistobject *self)
+spamlist_state_get(spamlistobject *self, void *closure)
 {
     return PyInt_FromLong(self->state);
 }
diff -urN Python-2.7.11/Modules/zlibmodule.c Python-2.7.11-em/Modules/zlibmodule.c
--- Python-2.7.11/Modules/zlibmodule.c	2015-12-05 20:47:16.000000000 +0100
+++ Python-2.7.11-em/Modules/zlibmodule.c	2016-05-16 03:00:31.194427737 +0200
@@ -704,7 +704,7 @@
 "copy() -- Return a copy of the compression object.");
 
 static PyObject *
-PyZlib_copy(compobject *self)
+PyZlib_copy(compobject *self, PyObject *noargs)
 {
     compobject *retval = NULL;
     int err;
@@ -755,7 +755,7 @@
 "copy() -- Return a copy of the decompression object.");
 
 static PyObject *
-PyZlib_uncopy(compobject *self)
+PyZlib_uncopy(compobject *self, PyObject *noargs)
 {
     compobject *retval = NULL;
     int err;
diff -urN Python-2.7.11/Objects/bytearrayobject.c Python-2.7.11-em/Objects/bytearrayobject.c
--- Python-2.7.11/Objects/bytearrayobject.c	2015-12-05 20:47:16.000000000 +0100
+++ Python-2.7.11-em/Objects/bytearrayobject.c	2016-05-16 03:00:31.197427737 +0200
@@ -2578,7 +2578,7 @@
 Returns the number of bytes actually allocated.");
 
 static PyObject *
-bytearray_alloc(PyByteArrayObject *self)
+bytearray_alloc(PyByteArrayObject *self, PyObject *unused)
 {
     return PyInt_FromSsize_t(self->ob_alloc);
 }
@@ -2744,7 +2744,7 @@
 PyDoc_STRVAR(reduce_doc, "Return state information for pickling.");
 
 static PyObject *
-bytearray_reduce(PyByteArrayObject *self)
+bytearray_reduce(PyByteArrayObject *self, PyObject *unused)
 {
     PyObject *latin1, *dict;
     if (self->ob_bytes)
@@ -2776,7 +2776,7 @@
  \n\
 Returns the size of B in memory, in bytes");
 static PyObject *
-bytearray_sizeof(PyByteArrayObject *self)
+bytearray_sizeof(PyByteArrayObject *self, PyObject *unused)
 {
     Py_ssize_t res;
 
@@ -2988,7 +2988,7 @@
 }
 
 static PyObject *
-bytesarrayiter_length_hint(bytesiterobject *it)
+bytesarrayiter_length_hint(bytesiterobject *it, PyObject *noargs)
 {
     Py_ssize_t len = 0;
     if (it->it_seq)
diff -urN Python-2.7.11/Objects/complexobject.c Python-2.7.11-em/Objects/complexobject.c
--- Python-2.7.11/Objects/complexobject.c	2015-12-05 20:47:16.000000000 +0100
+++ Python-2.7.11-em/Objects/complexobject.c	2016-05-16 03:00:31.199427737 +0200
@@ -878,7 +878,7 @@
 }
 
 static PyObject *
-complex_conjugate(PyObject *self)
+complex_conjugate(PyObject *self, PyObject *noargs)
 {
     Py_complex c;
     c = ((PyComplexObject *)self)->cval;
@@ -892,7 +892,7 @@
 "Return the complex conjugate of its argument. (3-4j).conjugate() == 3+4j.");
 
 static PyObject *
-complex_getnewargs(PyComplexObject *v)
+complex_getnewargs(PyComplexObject *v, PyObject *noargs)
 {
     Py_complex c = v->cval;
     return Py_BuildValue("(dd)", c.real, c.imag);
@@ -935,7 +935,7 @@
 
 #if 0
 static PyObject *
-complex_is_finite(PyObject *self)
+complex_is_finite(PyObject *self, PyObject *noargs)
 {
     Py_complex c;
     c = ((PyComplexObject *)self)->cval;
diff -urN Python-2.7.11/Objects/descrobject.c Python-2.7.11-em/Objects/descrobject.c
--- Python-2.7.11/Objects/descrobject.c	2015-12-05 20:47:16.000000000 +0100
+++ Python-2.7.11-em/Objects/descrobject.c	2016-05-16 03:00:31.200427737 +0200
@@ -754,42 +754,42 @@
 }
 
 static PyObject *
-proxy_keys(proxyobject *pp)
+proxy_keys(proxyobject *pp, PyObject *noargs)
 {
     return PyMapping_Keys(pp->dict);
 }
 
 static PyObject *
-proxy_values(proxyobject *pp)
+proxy_values(proxyobject *pp, PyObject *noargs)
 {
     return PyMapping_Values(pp->dict);
 }
 
 static PyObject *
-proxy_items(proxyobject *pp)
+proxy_items(proxyobject *pp, PyObject *noargs)
 {
     return PyMapping_Items(pp->dict);
 }
 
 static PyObject *
-proxy_iterkeys(proxyobject *pp)
+proxy_iterkeys(proxyobject *pp, PyObject *noargs)
 {
     return PyObject_CallMethod(pp->dict, "iterkeys", NULL);
 }
 
 static PyObject *
-proxy_itervalues(proxyobject *pp)
+proxy_itervalues(proxyobject *pp, PyObject *noargs)
 {
     return PyObject_CallMethod(pp->dict, "itervalues", NULL);
 }
 
 static PyObject *
-proxy_iteritems(proxyobject *pp)
+proxy_iteritems(proxyobject *pp, PyObject *noargs)
 {
     return PyObject_CallMethod(pp->dict, "iteritems", NULL);
 }
 static PyObject *
-proxy_copy(proxyobject *pp)
+proxy_copy(proxyobject *pp, PyObject *noargs)
 {
     return PyObject_CallMethod(pp->dict, "copy", NULL);
 }
@@ -987,7 +987,7 @@
 };
 
 static PyObject *
-wrapper_objclass(wrapperobject *wp)
+wrapper_objclass(wrapperobject *wp, void *closure)
 {
     PyObject *c = (PyObject *)wp->descr->d_type;
 
@@ -996,7 +996,7 @@
 }
 
 static PyObject *
-wrapper_name(wrapperobject *wp)
+wrapper_name(wrapperobject *wp, void *closure)
 {
     char *s = wp->descr->d_base->name;
 
@@ -1004,7 +1004,7 @@
 }
 
 static PyObject *
-wrapper_doc(wrapperobject *wp)
+wrapper_doc(wrapperobject *wp, void *closure)
 {
     char *s = wp->descr->d_base->doc;
 
diff -urN Python-2.7.11/Objects/dictobject.c Python-2.7.11-em/Objects/dictobject.c
--- Python-2.7.11/Objects/dictobject.c	2015-12-05 20:47:16.000000000 +0100
+++ Python-2.7.11-em/Objects/dictobject.c	2016-05-16 03:00:31.201427737 +0200
@@ -1218,7 +1218,7 @@
 };
 
 static PyObject *
-dict_keys(register PyDictObject *mp)
+dict_keys(register PyDictObject *mp, PyObject *noargs)
 {
     register PyObject *v;
     register Py_ssize_t i, j;
@@ -1252,7 +1252,7 @@
 }
 
 static PyObject *
-dict_values(register PyDictObject *mp)
+dict_values(register PyDictObject *mp, PyObject *noargs)
 {
     register PyObject *v;
     register Py_ssize_t i, j;
@@ -1286,7 +1286,7 @@
 }
 
 static PyObject *
-dict_items(register PyDictObject *mp)
+dict_items(register PyDictObject *mp, PyObject *noargs)
 {
     register PyObject *v;
     register Py_ssize_t i, j, n;
@@ -1644,7 +1644,7 @@
 }
 
 static PyObject *
-dict_copy(register PyDictObject *mp)
+dict_copy(register PyDictObject *mp, PyObject *noargs)
 {
     return PyDict_Copy((PyObject*)mp);
 }
@@ -1684,7 +1684,7 @@
         PyErr_BadInternalCall();
         return NULL;
     }
-    return dict_keys((PyDictObject *)mp);
+    return dict_keys((PyDictObject *)mp, NULL);
 }
 
 PyObject *
@@ -1694,7 +1694,7 @@
         PyErr_BadInternalCall();
         return NULL;
     }
-    return dict_values((PyDictObject *)mp);
+    return dict_values((PyDictObject *)mp, NULL);
 }
 
 PyObject *
@@ -1704,7 +1704,7 @@
         PyErr_BadInternalCall();
         return NULL;
     }
-    return dict_items((PyDictObject *)mp);
+    return dict_items((PyDictObject *)mp, NULL);
 }
 
 /* Subroutine which returns the smallest key in a for which b's value
@@ -1993,7 +1993,7 @@
 
 
 static PyObject *
-dict_clear(register PyDictObject *mp)
+dict_clear(register PyDictObject *mp, PyObject *noargs)
 {
     PyDict_Clear((PyObject *)mp);
     Py_RETURN_NONE;
@@ -2045,7 +2045,7 @@
 }
 
 static PyObject *
-dict_popitem(PyDictObject *mp)
+dict_popitem(PyDictObject *mp, PyObject *noargs)
 {
     Py_ssize_t i = 0;
     PyDictEntry *ep;
@@ -2130,25 +2130,25 @@
 static PyObject *dictiter_new(PyDictObject *, PyTypeObject *);
 
 static PyObject *
-dict_iterkeys(PyDictObject *dict)
+dict_iterkeys(PyDictObject *dict, PyObject *noargs)
 {
     return dictiter_new(dict, &PyDictIterKey_Type);
 }
 
 static PyObject *
-dict_itervalues(PyDictObject *dict)
+dict_itervalues(PyDictObject *dict, PyObject *noargs)
 {
     return dictiter_new(dict, &PyDictIterValue_Type);
 }
 
 static PyObject *
-dict_iteritems(PyDictObject *dict)
+dict_iteritems(PyDictObject *dict, PyObject *noargs)
 {
     return dictiter_new(dict, &PyDictIterItem_Type);
 }
 
 static PyObject *
-dict_sizeof(PyDictObject *mp)
+dict_sizeof(PyDictObject *mp, PyObject *noargs)
 {
     Py_ssize_t res;
 
@@ -2218,9 +2218,9 @@
 "D.iteritems() -> an iterator over the (key, value) items of D");
 
 /* Forward */
-static PyObject *dictkeys_new(PyObject *);
-static PyObject *dictitems_new(PyObject *);
-static PyObject *dictvalues_new(PyObject *);
+static PyObject *dictkeys_new(PyObject *, PyObject *);
+static PyObject *dictitems_new(PyObject *, PyObject *);
+static PyObject *dictvalues_new(PyObject *, PyObject *);
 
 PyDoc_STRVAR(viewkeys__doc__,
              "D.viewkeys() -> a set-like object providing a view on D's keys");
@@ -2507,7 +2507,7 @@
 }
 
 static PyObject *
-dictiter_len(dictiterobject *di)
+dictiter_len(dictiterobject *di, PyObject *noargs)
 {
     Py_ssize_t len = 0;
     if (di->di_dict != NULL && di->di_used == di->di_dict->ma_used)
@@ -3092,7 +3092,7 @@
 };
 
 static PyObject *
-dictkeys_new(PyObject *dict)
+dictkeys_new(PyObject *dict, PyObject *noargs)
 {
     return dictview_new(dict, &PyDictKeys_Type);
 }
@@ -3177,7 +3177,7 @@
 };
 
 static PyObject *
-dictitems_new(PyObject *dict)
+dictitems_new(PyObject *dict, PyObject *noargs)
 {
     return dictview_new(dict, &PyDictItems_Type);
 }
@@ -3242,7 +3242,7 @@
 };
 
 static PyObject *
-dictvalues_new(PyObject *dict)
+dictvalues_new(PyObject *dict, PyObject *noargs)
 {
     return dictview_new(dict, &PyDictValues_Type);
 }
diff -urN Python-2.7.11/Objects/enumobject.c Python-2.7.11-em/Objects/enumobject.c
--- Python-2.7.11/Objects/enumobject.c	2015-12-05 20:47:16.000000000 +0100
+++ Python-2.7.11-em/Objects/enumobject.c	2016-05-16 03:00:31.202427737 +0200
@@ -316,7 +316,7 @@
 "Return a reverse iterator");
 
 static PyObject *
-reversed_len(reversedobject *ro)
+reversed_len(reversedobject *ro, PyObject *noargs)
 {
     Py_ssize_t position, seqsize;
 
diff -urN Python-2.7.11/Objects/exceptions.c Python-2.7.11-em/Objects/exceptions.c
--- Python-2.7.11/Objects/exceptions.c	2015-12-05 20:47:16.000000000 +0100
+++ Python-2.7.11-em/Objects/exceptions.c	2016-05-16 03:00:31.203427737 +0200
@@ -118,7 +118,7 @@
 
 #ifdef Py_USING_UNICODE
 static PyObject *
-BaseException_unicode(PyBaseExceptionObject *self)
+BaseException_unicode(PyBaseExceptionObject *self, PyObject *noargs)
 {
     PyObject *out;
 
@@ -181,7 +181,7 @@
 
 /* Pickling support */
 static PyObject *
-BaseException_reduce(PyBaseExceptionObject *self)
+BaseException_reduce(PyBaseExceptionObject *self, PyObject *noargs)
 {
     if (self->args && self->dict)
         return PyTuple_Pack(3, Py_TYPE(self), self->args, self->dict);
@@ -258,7 +258,7 @@
 };
 
 static PyObject *
-BaseException_get_dict(PyBaseExceptionObject *self)
+BaseException_get_dict(PyBaseExceptionObject *self, void *closure)
 {
     if (self->dict == NULL) {
         self->dict = PyDict_New();
@@ -270,7 +270,7 @@
 }
 
 static int
-BaseException_set_dict(PyBaseExceptionObject *self, PyObject *val)
+BaseException_set_dict(PyBaseExceptionObject *self, PyObject *val, void *closure)
 {
     if (val == NULL) {
         PyErr_SetString(PyExc_TypeError, "__dict__ may not be deleted");
@@ -287,7 +287,7 @@
 }
 
 static PyObject *
-BaseException_get_args(PyBaseExceptionObject *self)
+BaseException_get_args(PyBaseExceptionObject *self, void *closure)
 {
     if (self->args == NULL) {
         Py_INCREF(Py_None);
@@ -298,7 +298,7 @@
 }
 
 static int
-BaseException_set_args(PyBaseExceptionObject *self, PyObject *val)
+BaseException_set_args(PyBaseExceptionObject *self, PyObject *val, void *closure)
 {
     PyObject *seq;
     if (val == NULL) {
@@ -314,7 +314,7 @@
 }
 
 static PyObject *
-BaseException_get_message(PyBaseExceptionObject *self)
+BaseException_get_message(PyBaseExceptionObject *self, void *closure)
 {
     PyObject *msg;
 
@@ -341,7 +341,7 @@
 }
 
 static int
-BaseException_set_message(PyBaseExceptionObject *self, PyObject *val)
+BaseException_set_message(PyBaseExceptionObject *self, PyObject *val, void *closure)
 {
     /* if val is NULL, delete the message attribute */
     if (val == NULL) {
@@ -764,7 +764,7 @@
 
 
 static PyObject *
-EnvironmentError_reduce(PyEnvironmentErrorObject *self)
+EnvironmentError_reduce(PyEnvironmentErrorObject *self, PyObject *noargs)
 {
     PyObject *args = self->args;
     PyObject *res = NULL, *tmp;
diff -urN Python-2.7.11/Objects/fileobject.c Python-2.7.11-em/Objects/fileobject.c
--- Python-2.7.11/Objects/fileobject.c	2015-12-05 20:47:16.000000000 +0100
+++ Python-2.7.11-em/Objects/fileobject.c	2016-05-16 03:00:31.205427737 +0200
@@ -666,7 +666,7 @@
 }
 
 static PyObject *
-file_close(PyFileObject *f)
+file_close(PyFileObject *f, PyObject *noargs)
 {
     PyObject *sts = close_the_file(f);
     if (sts) {
@@ -921,7 +921,7 @@
 #endif /* HAVE_FTRUNCATE */
 
 static PyObject *
-file_tell(PyFileObject *f)
+file_tell(PyFileObject *f, PyObject *noargs)
 {
     Py_off_t pos;
 
@@ -954,7 +954,7 @@
 }
 
 static PyObject *
-file_fileno(PyFileObject *f)
+file_fileno(PyFileObject *f, PyObject *noargs)
 {
     if (f->f_fp == NULL)
         return err_closed();
@@ -962,7 +962,7 @@
 }
 
 static PyObject *
-file_flush(PyFileObject *f)
+file_flush(PyFileObject *f, PyObject *noargs)
 {
     int res;
 
@@ -982,7 +982,7 @@
 }
 
 static PyObject *
-file_isatty(PyFileObject *f)
+file_isatty(PyFileObject *f, PyObject *noargs)
 {
     long res;
     if (f->f_fp == NULL)
@@ -1994,7 +1994,7 @@
 }
 
 static PyObject *
-file_self(PyFileObject *f)
+file_self(PyFileObject *f, PyObject *noargs)
 {
     if (f->f_fp == NULL)
         return err_closed();
@@ -2003,12 +2003,12 @@
 }
 
 static PyObject *
-file_xreadlines(PyFileObject *f)
+file_xreadlines(PyFileObject *f, PyObject *noargs)
 {
     if (PyErr_WarnPy3k("f.xreadlines() not supported in 3.x, "
                        "try 'for line in f' instead", 1) < 0)
            return NULL;
-    return file_self(f);
+    return file_self(f, NULL);
 }
 
 static PyObject *
@@ -2195,7 +2195,7 @@
 }
 
 static int
-set_softspace(PyFileObject *f, PyObject *value)
+set_softspace(PyFileObject *f, PyObject *value, void *closure)
 {
     int new;
     if (PyErr_WarnPy3k("file.softspace not supported in 3.x", 1) < 0)
@@ -2388,7 +2388,7 @@
     assert(PyFile_Check(self));
     if (foself->f_fp != NULL) {
         /* Have to close the existing file first. */
-        PyObject *closeresult = file_close(foself);
+        PyObject *closeresult = file_close(foself, NULL);
         if (closeresult == NULL)
             return -1;
         Py_DECREF(closeresult);
diff -urN Python-2.7.11/Objects/floatobject.c Python-2.7.11-em/Objects/floatobject.c
--- Python-2.7.11/Objects/floatobject.c	2015-12-05 20:47:16.000000000 +0100
+++ Python-2.7.11-em/Objects/floatobject.c	2016-05-16 03:00:31.206427737 +0200
@@ -982,7 +982,7 @@
 }
 
 static PyObject *
-float_is_integer(PyObject *v)
+float_is_integer(PyObject *v, PyObject *noargs)
 {
     double x = PyFloat_AsDouble(v);
     PyObject *o;
@@ -1006,7 +1006,7 @@
 
 #if 0
 static PyObject *
-float_is_inf(PyObject *v)
+float_is_inf(PyObject *v, PyObject *noargs)
 {
     double x = PyFloat_AsDouble(v);
     if (x == -1.0 && PyErr_Occurred())
@@ -1015,7 +1015,7 @@
 }
 
 static PyObject *
-float_is_nan(PyObject *v)
+float_is_nan(PyObject *v, PyObject *noargs)
 {
     double x = PyFloat_AsDouble(v);
     if (x == -1.0 && PyErr_Occurred())
@@ -1024,7 +1024,7 @@
 }
 
 static PyObject *
-float_is_finite(PyObject *v)
+float_is_finite(PyObject *v, PyObject *noargs)
 {
     double x = PyFloat_AsDouble(v);
     if (x == -1.0 && PyErr_Occurred())
@@ -1034,7 +1034,7 @@
 #endif
 
 static PyObject *
-float_trunc(PyObject *v)
+float_int(PyObject *v)
 {
     double x = PyFloat_AsDouble(v);
     double wholepart;           /* integral portion of x, rounded toward 0 */
@@ -1370,7 +1370,7 @@
 #define TOHEX_NBITS DBL_MANT_DIG + 3 - (DBL_MANT_DIG+2)%4
 
 static PyObject *
-float_hex(PyObject *v)
+float_hex(PyObject *v, PyObject *noargs)
 {
     double x, m;
     int e, shift, i, si, esign;
@@ -1804,6 +1804,15 @@
 ">>> (-.25).as_integer_ratio()\n"
 "(-1, 4)");
 
+static PyObject *
+float_trunc(PyObject *self, PyObject *noargs) {
+  return float_int(self);
+}
+
+static PyObject *
+float_conjugate(PyObject *self, PyObject *noargs) {
+  return float_float(self);
+}
 
 static PyObject *
 float_subtype_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
@@ -1851,7 +1860,7 @@
 }
 
 static PyObject *
-float_getnewargs(PyFloatObject *v)
+float_getnewargs(PyFloatObject *v, PyObject *noargs)
 {
     return Py_BuildValue("(d)", v->ob_fval);
 }
@@ -1984,6 +1993,12 @@
 "This affects how floats are converted to and from binary strings.");
 
 static PyObject *
+float_getreal(PyObject *v, void *closure)
+{
+    return float_float(v);
+}
+
+static PyObject *
 float_getzero(PyObject *v, void *closure)
 {
     return PyFloat_FromDouble(0.0);
@@ -2026,7 +2041,7 @@
 
 
 static PyMethodDef float_methods[] = {
-    {"conjugate",       (PyCFunction)float_float,       METH_NOARGS,
+    {"conjugate",       (PyCFunction)float_conjugate,       METH_NOARGS,
      "Return self, the complex conjugate of any float."},
     {"__trunc__",       (PyCFunction)float_trunc, METH_NOARGS,
      "Return the Integral closest to x between 0 and x."},
@@ -2058,7 +2073,7 @@
 
 static PyGetSetDef float_getset[] = {
     {"real",
-     (getter)float_float, (setter)NULL,
+     (getter)float_getreal, (setter)NULL,
      "the real part of a complex number",
      NULL},
     {"imag",
@@ -2093,7 +2108,7 @@
     0,                  /*nb_xor*/
     0,                  /*nb_or*/
     float_coerce,       /*nb_coerce*/
-    float_trunc,        /*nb_int*/
+    float_int,          /*nb_int*/
     float_long,         /*nb_long*/
     float_float,        /*nb_float*/
     0,                  /* nb_oct */
diff -urN Python-2.7.11/Objects/frameobject.c Python-2.7.11-em/Objects/frameobject.c
--- Python-2.7.11/Objects/frameobject.c	2015-12-05 20:47:16.000000000 +0100
+++ Python-2.7.11-em/Objects/frameobject.c	2016-05-16 03:00:31.208427737 +0200
@@ -91,7 +91,7 @@
  *    iterator needs to be on the stack.
  */
 static int
-frame_setlineno(PyFrameObject *f, PyObject* p_new_lineno)
+frame_setlineno(PyFrameObject *f, PyObject* p_new_lineno, void *closure)
 {
     int new_lineno = 0;                 /* The new value of f_lineno */
     int new_lasti = 0;                  /* The new value of f_lasti */
@@ -519,7 +519,7 @@
     return 0;
 }
 
-static void
+static int
 frame_clear(PyFrameObject *f)
 {
     PyObject **fastlocals, **p, **oldtop;
@@ -549,10 +549,11 @@
         for (p = f->f_valuestack; p < oldtop; p++)
             Py_CLEAR(*p);
     }
+    return 0;
 }
 
 static PyObject *
-frame_sizeof(PyFrameObject *f)
+frame_sizeof(PyFrameObject *f, PyObject *noargs)
 {
     Py_ssize_t res, extras, ncells, nfrees;
 
diff -urN Python-2.7.11/Objects/funcobject.c Python-2.7.11-em/Objects/funcobject.c
--- Python-2.7.11/Objects/funcobject.c	2015-12-05 20:47:16.000000000 +0100
+++ Python-2.7.11-em/Objects/funcobject.c	2016-05-16 03:00:31.209427737 +0200
@@ -184,7 +184,7 @@
 }
 
 static PyObject *
-func_get_dict(PyFunctionObject *op)
+func_get_dict(PyFunctionObject *op, void *closure)
 {
     if (restricted())
         return NULL;
@@ -198,7 +198,7 @@
 }
 
 static int
-func_set_dict(PyFunctionObject *op, PyObject *value)
+func_set_dict(PyFunctionObject *op, PyObject *value, void *closure)
 {
     PyObject *tmp;
 
@@ -224,7 +224,7 @@
 }
 
 static PyObject *
-func_get_code(PyFunctionObject *op)
+func_get_code(PyFunctionObject *op, void *closure)
 {
     if (restricted())
         return NULL;
@@ -233,7 +233,7 @@
 }
 
 static int
-func_set_code(PyFunctionObject *op, PyObject *value)
+func_set_code(PyFunctionObject *op, PyObject *value, void *closure)
 {
     PyObject *tmp;
     Py_ssize_t nfree, nclosure;
@@ -266,14 +266,14 @@
 }
 
 static PyObject *
-func_get_name(PyFunctionObject *op)
+func_get_name(PyFunctionObject *op, void *closure)
 {
     Py_INCREF(op->func_name);
     return op->func_name;
 }
 
 static int
-func_set_name(PyFunctionObject *op, PyObject *value)
+func_set_name(PyFunctionObject *op, PyObject *value, void *closure)
 {
     PyObject *tmp;
 
@@ -294,7 +294,7 @@
 }
 
 static PyObject *
-func_get_defaults(PyFunctionObject *op)
+func_get_defaults(PyFunctionObject *op, void *closure)
 {
     if (restricted())
         return NULL;
@@ -307,7 +307,7 @@
 }
 
 static int
-func_set_defaults(PyFunctionObject *op, PyObject *value)
+func_set_defaults(PyFunctionObject *op, PyObject *value, void *closure)
 {
     PyObject *tmp;
 
diff -urN Python-2.7.11/Objects/genobject.c Python-2.7.11-em/Objects/genobject.c
--- Python-2.7.11/Objects/genobject.c	2015-12-05 20:47:16.000000000 +0100
+++ Python-2.7.11-em/Objects/genobject.c	2016-05-16 03:00:31.209427737 +0200
@@ -297,7 +297,7 @@
 
 
 static PyObject *
-gen_get_name(PyGenObject *gen)
+gen_get_name(PyGenObject *gen, void *closure)
 {
     PyObject *name = ((PyCodeObject *)gen->gi_code)->co_name;
     Py_INCREF(name);
diff -urN Python-2.7.11/Objects/intobject.c Python-2.7.11-em/Objects/intobject.c
--- Python-2.7.11/Objects/intobject.c	2015-12-05 20:47:16.000000000 +0100
+++ Python-2.7.11-em/Objects/intobject.c	2016-05-16 03:00:31.210427737 +0200
@@ -1149,12 +1149,17 @@
 }
 
 static PyObject *
-int_getnewargs(PyIntObject *v)
+int_getnewargs(PyIntObject *v, PyObject *noargs)
 {
     return Py_BuildValue("(l)", v->ob_ival);
 }
 
 static PyObject *
+int_getint(PyIntObject *v, void *context) {
+    return int_int(v);
+}
+
+static PyObject *
 int_get0(PyIntObject *v, void *context) {
     return PyInt_FromLong(0L);
 }
@@ -1287,7 +1292,7 @@
 }
 
 static PyObject *
-int_bit_length(PyIntObject *v)
+int_bit_length(PyIntObject *v, PyObject *noargs)
 {
     unsigned long n;
 
@@ -1311,14 +1316,20 @@
 
 #if 0
 static PyObject *
-int_is_finite(PyObject *v)
+int_is_finite(PyObject *v, PyObject *noargs)
 {
     Py_RETURN_TRUE;
 }
 #endif
 
+static PyObject *
+int_trunc(PyIntObject *v, PyObject *noargs)
+{
+    return int_int(v);
+}
+
 static PyMethodDef int_methods[] = {
-    {"conjugate",       (PyCFunction)int_int,   METH_NOARGS,
+    {"conjugate",       (PyCFunction)int_trunc,   METH_NOARGS,
      "Returns self, the complex conjugate of any int."},
     {"bit_length", (PyCFunction)int_bit_length, METH_NOARGS,
      int_bit_length_doc},
@@ -1326,7 +1337,7 @@
     {"is_finite",       (PyCFunction)int_is_finite,     METH_NOARGS,
      "Returns always True."},
 #endif
-    {"__trunc__",       (PyCFunction)int_int,   METH_NOARGS,
+    {"__trunc__",       (PyCFunction)int_trunc,   METH_NOARGS,
      "Truncating an Integral returns itself."},
     {"__getnewargs__",          (PyCFunction)int_getnewargs,    METH_NOARGS},
     {"__format__", (PyCFunction)int__format__, METH_VARARGS},
@@ -1335,7 +1346,7 @@
 
 static PyGetSetDef int_getset[] = {
     {"real",
-     (getter)int_int, (setter)NULL,
+     (getter)int_getint, (setter)NULL,
      "the real part of a complex number",
      NULL},
     {"imag",
@@ -1343,7 +1354,7 @@
      "the imaginary part of a complex number",
      NULL},
     {"numerator",
-     (getter)int_int, (setter)NULL,
+     (getter)int_getint, (setter)NULL,
      "the numerator of a rational number in lowest terms",
      NULL},
     {"denominator",
diff -urN Python-2.7.11/Objects/iterobject.c Python-2.7.11-em/Objects/iterobject.c
--- Python-2.7.11/Objects/iterobject.c	2015-12-05 20:47:16.000000000 +0100
+++ Python-2.7.11-em/Objects/iterobject.c	2016-05-16 03:00:31.211427737 +0200
@@ -76,7 +76,7 @@
 }
 
 static PyObject *
-iter_len(seqiterobject *it)
+iter_len(seqiterobject *it, PyObject *noargs)
 {
     Py_ssize_t seqsize, len;
 
diff -urN Python-2.7.11/Objects/listobject.c Python-2.7.11-em/Objects/listobject.c
--- Python-2.7.11/Objects/listobject.c	2015-12-05 20:47:16.000000000 +0100
+++ Python-2.7.11-em/Objects/listobject.c	2016-05-16 03:00:31.212427737 +0200
@@ -2227,7 +2227,7 @@
 }
 
 static PyObject *
-listreverse(PyListObject *self)
+listreverse(PyListObject *self, PyObject *noargs)
 {
     if (Py_SIZE(self) > 1)
         reverse_slice(self->ob_item, self->ob_item + Py_SIZE(self));
@@ -2465,7 +2465,7 @@
 }
 
 static PyObject *
-list_sizeof(PyListObject *self)
+list_sizeof(PyListObject *self, PyObject *noargs)
 {
     Py_ssize_t res;
 
@@ -2819,7 +2819,7 @@
 static void listiter_dealloc(listiterobject *);
 static int listiter_traverse(listiterobject *, visitproc, void *);
 static PyObject *listiter_next(listiterobject *);
-static PyObject *listiter_len(listiterobject *);
+static PyObject *listiter_len(listiterobject *, PyObject *);
 
 PyDoc_STRVAR(length_hint_doc, "Private method returning an estimate of len(list(it)).");
 
@@ -2921,7 +2921,7 @@
 }
 
 static PyObject *
-listiter_len(listiterobject *it)
+listiter_len(listiterobject *it, PyObject *noargs)
 {
     Py_ssize_t len;
     if (it->it_seq) {
@@ -2943,7 +2943,7 @@
 static void listreviter_dealloc(listreviterobject *);
 static int listreviter_traverse(listreviterobject *, visitproc, void *);
 static PyObject *listreviter_next(listreviterobject *);
-static PyObject *listreviter_len(listreviterobject *);
+static PyObject *listreviter_len(listreviterobject *, PyObject *);
 
 static PyMethodDef listreviter_methods[] = {
     {"__length_hint__", (PyCFunction)listreviter_len, METH_NOARGS, length_hint_doc},
@@ -3036,7 +3036,7 @@
 }
 
 static PyObject *
-listreviter_len(listreviterobject *it)
+listreviter_len(listreviterobject *it, PyObject *noargs)
 {
     Py_ssize_t len = it->it_index + 1;
     if (it->it_seq == NULL || PyList_GET_SIZE(it->it_seq) < len)
diff -urN Python-2.7.11/Objects/longobject.c Python-2.7.11-em/Objects/longobject.c
--- Python-2.7.11/Objects/longobject.c	2015-12-05 20:47:16.000000000 +0100
+++ Python-2.7.11-em/Objects/longobject.c	2016-05-16 03:00:31.214427737 +0200
@@ -4086,12 +4086,17 @@
 }
 
 static PyObject *
-long_getnewargs(PyLongObject *v)
+long_getnewargs(PyLongObject *v, PyObject *noargs)
 {
     return Py_BuildValue("(N)", _PyLong_Copy(v));
 }
 
 static PyObject *
+long_getlong(PyObject *v, void *context) {
+    return long_long(v);
+}
+
+static PyObject *
 long_get0(PyLongObject *v, void *context) {
     return PyLong_FromLong(0L);
 }
@@ -4132,7 +4137,7 @@
 }
 
 static PyObject *
-long_sizeof(PyLongObject *v)
+long_sizeof(PyLongObject *v, PyObject *noargs)
 {
     Py_ssize_t res;
 
@@ -4141,7 +4146,7 @@
 }
 
 static PyObject *
-long_bit_length(PyLongObject *v)
+long_bit_length(PyLongObject *v, PyObject *noargs)
 {
     PyLongObject *result, *x, *y;
     Py_ssize_t ndigits, msd_bits = 0;
@@ -4206,14 +4211,20 @@
 
 #if 0
 static PyObject *
-long_is_finite(PyObject *v)
+long_is_finite(PyObject *v, PyObject *noargs)
 {
     Py_RETURN_TRUE;
 }
 #endif
 
+static PyObject *
+long_trunc(PyObject *v, PyObject *noargs)
+{
+    return long_long(v);
+}
+
 static PyMethodDef long_methods[] = {
-    {"conjugate",       (PyCFunction)long_long, METH_NOARGS,
+    {"conjugate",       (PyCFunction)long_trunc, METH_NOARGS,
      "Returns self, the complex conjugate of any long."},
     {"bit_length",      (PyCFunction)long_bit_length, METH_NOARGS,
      long_bit_length_doc},
@@ -4221,7 +4232,7 @@
     {"is_finite",       (PyCFunction)long_is_finite,    METH_NOARGS,
      "Returns always True."},
 #endif
-    {"__trunc__",       (PyCFunction)long_long, METH_NOARGS,
+    {"__trunc__",       (PyCFunction)long_trunc, METH_NOARGS,
      "Truncating an Integral returns itself."},
     {"__getnewargs__",          (PyCFunction)long_getnewargs,   METH_NOARGS},
     {"__format__", (PyCFunction)long__format__, METH_VARARGS},
@@ -4232,7 +4243,7 @@
 
 static PyGetSetDef long_getset[] = {
     {"real",
-     (getter)long_long, (setter)NULL,
+     (getter)long_getlong, (setter)NULL,
      "the real part of a complex number",
      NULL},
     {"imag",
@@ -4240,7 +4251,7 @@
      "the imaginary part of a complex number",
      NULL},
     {"numerator",
-     (getter)long_long, (setter)NULL,
+     (getter)long_getlong, (setter)NULL,
      "the numerator of a rational number in lowest terms",
      NULL},
     {"denominator",
diff -urN Python-2.7.11/Objects/memoryobject.c Python-2.7.11-em/Objects/memoryobject.c
--- Python-2.7.11/Objects/memoryobject.c	2015-12-05 20:47:16.000000000 +0100
+++ Python-2.7.11-em/Objects/memoryobject.c	2016-05-16 03:00:31.216427737 +0200
@@ -325,13 +325,13 @@
 
 
 static PyObject *
-memory_format_get(PyMemoryViewObject *self)
+memory_format_get(PyMemoryViewObject *self, void *closure)
 {
     return PyString_FromString(self->view.format);
 }
 
 static PyObject *
-memory_itemsize_get(PyMemoryViewObject *self)
+memory_itemsize_get(PyMemoryViewObject *self, void *closure)
 {
     return PyLong_FromSsize_t(self->view.itemsize);
 }
@@ -361,31 +361,31 @@
 }
 
 static PyObject *
-memory_shape_get(PyMemoryViewObject *self)
+memory_shape_get(PyMemoryViewObject *self, void *closure)
 {
     return _IntTupleFromSsizet(self->view.ndim, self->view.shape);
 }
 
 static PyObject *
-memory_strides_get(PyMemoryViewObject *self)
+memory_strides_get(PyMemoryViewObject *self, void *closure)
 {
     return _IntTupleFromSsizet(self->view.ndim, self->view.strides);
 }
 
 static PyObject *
-memory_suboffsets_get(PyMemoryViewObject *self)
+memory_suboffsets_get(PyMemoryViewObject *self, void *closure)
 {
     return _IntTupleFromSsizet(self->view.ndim, self->view.suboffsets);
 }
 
 static PyObject *
-memory_readonly_get(PyMemoryViewObject *self)
+memory_readonly_get(PyMemoryViewObject *self, void *closure)
 {
     return PyBool_FromLong(self->view.readonly);
 }
 
 static PyObject *
-memory_ndim_get(PyMemoryViewObject *self)
+memory_ndim_get(PyMemoryViewObject *self, void *closure)
 {
     return PyLong_FromLong(self->view.ndim);
 }
diff -urN Python-2.7.11/Objects/rangeobject.c Python-2.7.11-em/Objects/rangeobject.c
--- Python-2.7.11/Objects/rangeobject.c	2015-12-05 20:47:16.000000000 +0100
+++ Python-2.7.11-em/Objects/rangeobject.c	2016-05-16 03:00:31.216427737 +0200
@@ -171,7 +171,7 @@
 };
 
 static PyObject * range_iter(PyObject *seq);
-static PyObject * range_reverse(PyObject *seq);
+static PyObject * range_reverse(PyObject *seq, PyObject *);
 
 PyDoc_STRVAR(reverse_doc,
 "Returns a reverse iterator.");
@@ -243,7 +243,7 @@
 }
 
 static PyObject *
-rangeiter_len(rangeiterobject *r)
+rangeiter_len(rangeiterobject *r, PyObject *noargs)
 {
     return PyInt_FromLong(r->len - r->index);
 }
@@ -309,7 +309,7 @@
 }
 
 static PyObject *
-range_reverse(PyObject *seq)
+range_reverse(PyObject *seq, PyObject *noargs)
 {
     rangeiterobject *it;
     long start, step, len;
diff -urN Python-2.7.11/Objects/setobject.c Python-2.7.11-em/Objects/setobject.c
--- Python-2.7.11/Objects/setobject.c	2015-12-05 20:47:16.000000000 +0100
+++ Python-2.7.11-em/Objects/setobject.c	2016-05-16 03:00:31.218427737 +0200
@@ -717,7 +717,7 @@
 }
 
 static PyObject *
-set_pop(PySetObject *so)
+set_pop(PySetObject *so, PyObject *noargs)
 {
     register Py_ssize_t i = 0;
     register setentry *entry;
@@ -826,7 +826,7 @@
 }
 
 static PyObject *
-setiter_len(setiterobject *si)
+setiter_len(setiterobject *si, PyObject *noargs)
 {
     Py_ssize_t len = 0;
     if (si->si_set != NULL && si->si_used == si->si_set->used)
@@ -1148,25 +1148,25 @@
 }
 
 static PyObject *
-set_copy(PySetObject *so)
+set_copy(PySetObject *so, PyObject *noargs)
 {
     return make_new_set(Py_TYPE(so), (PyObject *)so);
 }
 
 static PyObject *
-frozenset_copy(PySetObject *so)
+frozenset_copy(PySetObject *so, PyObject *noargs)
 {
     if (PyFrozenSet_CheckExact(so)) {
         Py_INCREF(so);
         return (PyObject *)so;
     }
-    return set_copy(so);
+    return make_new_set(Py_TYPE(so), (PyObject *)so);
 }
 
 PyDoc_STRVAR(copy_doc, "Return a shallow copy of a set.");
 
 static PyObject *
-set_clear(PySetObject *so)
+set_clear(PySetObject *so, PyObject *noargs)
 {
     set_clear_internal(so);
     Py_RETURN_NONE;
@@ -1181,7 +1181,7 @@
     PyObject *other;
     Py_ssize_t i;
 
-    result = (PySetObject *)set_copy(so);
+    result = (PySetObject *)set_copy(so, NULL);
     if (result == NULL)
         return NULL;
 
@@ -1212,7 +1212,7 @@
         return Py_NotImplemented;
     }
 
-    result = (PySetObject *)set_copy(so);
+    result = (PySetObject *)set_copy(so, NULL);
     if (result == NULL)
         return NULL;
     if ((PyObject *)so == other)
@@ -1244,7 +1244,7 @@
     PyObject *key, *it, *tmp;
 
     if ((PyObject *)so == other)
-        return set_copy(so);
+        return set_copy(so, NULL);
 
     result = (PySetObject *)make_new_set(Py_TYPE(so), NULL);
     if (result == NULL)
@@ -1327,7 +1327,7 @@
     PyObject *result = (PyObject *)so;
 
     if (PyTuple_GET_SIZE(args) == 0)
-        return set_copy(so);
+        return set_copy(so, NULL);
 
     Py_INCREF(so);
     for (i=0 ; i<PyTuple_GET_SIZE(args) ; i++) {
@@ -1532,7 +1532,7 @@
     Py_ssize_t pos = 0;
 
     if (!PyAnySet_Check(other)  && !PyDict_CheckExact(other)) {
-        result = set_copy(so);
+        result = set_copy(so, NULL);
         if (result == NULL)
             return NULL;
         if (set_difference_update_internal((PySetObject *)result, other) != -1)
@@ -1589,7 +1589,7 @@
     PyObject *result, *other;
 
     if (PyTuple_GET_SIZE(args) == 0)
-        return set_copy(so);
+        return set_copy(so, NULL);
 
     other = PyTuple_GET_ITEM(args, 0);
     result = set_difference(so, other);
@@ -1642,7 +1642,7 @@
     setentry *entry;
 
     if ((PyObject *)so == other)
-        return set_clear(so);
+        return set_clear(so, NULL);
 
     if (PyDict_CheckExact(other)) {
         PyObject *value;
@@ -1954,7 +1954,7 @@
 If the element is not a member, do nothing.");
 
 static PyObject *
-set_reduce(PySetObject *so)
+set_reduce(PySetObject *so, PyObject *noargs)
 {
     PyObject *keys=NULL, *args=NULL, *result=NULL, *dict=NULL;
 
@@ -1981,7 +1981,7 @@
 PyDoc_STRVAR(reduce_doc, "Return state information for pickling.");
 
 static PyObject *
-set_sizeof(PySetObject *so)
+set_sizeof(PySetObject *so, PyObject *noargs)
 {
     Py_ssize_t res;
 
@@ -2368,7 +2368,7 @@
         PyErr_BadInternalCall();
         return NULL;
     }
-    return set_pop((PySetObject *)set);
+    return set_pop((PySetObject *)set, NULL);
 }
 
 int
@@ -2394,7 +2394,7 @@
     } while(0)
 
 static PyObject *
-test_c_api(PySetObject *so)
+test_c_api(PySetObject *so, PyObject *noargs)
 {
     Py_ssize_t count;
     char *s;
diff -urN Python-2.7.11/Objects/sliceobject.c Python-2.7.11-em/Objects/sliceobject.c
--- Python-2.7.11/Objects/sliceobject.c	2015-12-05 20:47:17.000000000 +0100
+++ Python-2.7.11-em/Objects/sliceobject.c	2016-05-16 03:00:31.218427737 +0200
@@ -277,7 +277,7 @@
 handling of normal slices.");
 
 static PyObject *
-slice_reduce(PySliceObject* self)
+slice_reduce(PySliceObject* self, PyObject *noargs)
 {
     return Py_BuildValue("O(OOO)", Py_TYPE(self), self->start, self->stop, self->step);
 }
diff -urN Python-2.7.11/Objects/stringlib/ctype.h Python-2.7.11-em/Objects/stringlib/ctype.h
--- Python-2.7.11/Objects/stringlib/ctype.h	2015-12-05 20:47:17.000000000 +0100
+++ Python-2.7.11-em/Objects/stringlib/ctype.h	2016-05-16 03:00:31.219427737 +0200
@@ -4,43 +4,43 @@
 #include "bytes_methods.h"
 
 static PyObject*
-stringlib_isspace(PyObject *self)
+stringlib_isspace(PyObject *self, PyObject *unused)
 {
     return _Py_bytes_isspace(STRINGLIB_STR(self), STRINGLIB_LEN(self));
 }
 
 static PyObject*
-stringlib_isalpha(PyObject *self)
+stringlib_isalpha(PyObject *self, PyObject *unused)
 {
     return _Py_bytes_isalpha(STRINGLIB_STR(self), STRINGLIB_LEN(self));
 }
 
 static PyObject*
-stringlib_isalnum(PyObject *self)
+stringlib_isalnum(PyObject *self, PyObject *unused)
 {
     return _Py_bytes_isalnum(STRINGLIB_STR(self), STRINGLIB_LEN(self));
 }
 
 static PyObject*
-stringlib_isdigit(PyObject *self)
+stringlib_isdigit(PyObject *self, PyObject *unused)
 {
     return _Py_bytes_isdigit(STRINGLIB_STR(self), STRINGLIB_LEN(self));
 }
 
 static PyObject*
-stringlib_islower(PyObject *self)
+stringlib_islower(PyObject *self, PyObject *unused)
 {
     return _Py_bytes_islower(STRINGLIB_STR(self), STRINGLIB_LEN(self));
 }
 
 static PyObject*
-stringlib_isupper(PyObject *self)
+stringlib_isupper(PyObject *self, PyObject *unused)
 {
     return _Py_bytes_isupper(STRINGLIB_STR(self), STRINGLIB_LEN(self));
 }
 
 static PyObject*
-stringlib_istitle(PyObject *self)
+stringlib_istitle(PyObject *self, PyObject *unused)
 {
     return _Py_bytes_istitle(STRINGLIB_STR(self), STRINGLIB_LEN(self));
 }
@@ -49,7 +49,7 @@
 /* functions that return a new object partially translated by ctype funcs: */
 
 static PyObject*
-stringlib_lower(PyObject *self)
+stringlib_lower(PyObject *self, PyObject *unused)
 {
     PyObject* newobj;
     newobj = STRINGLIB_NEW(NULL, STRINGLIB_LEN(self));
@@ -61,7 +61,7 @@
 }
 
 static PyObject*
-stringlib_upper(PyObject *self)
+stringlib_upper(PyObject *self, PyObject *unused)
 {
     PyObject* newobj;
     newobj = STRINGLIB_NEW(NULL, STRINGLIB_LEN(self));
@@ -73,7 +73,7 @@
 }
 
 static PyObject*
-stringlib_title(PyObject *self)
+stringlib_title(PyObject *self, PyObject *unused)
 {
     PyObject* newobj;
     newobj = STRINGLIB_NEW(NULL, STRINGLIB_LEN(self));
@@ -85,7 +85,7 @@
 }
 
 static PyObject*
-stringlib_capitalize(PyObject *self)
+stringlib_capitalize(PyObject *self, PyObject *unused)
 {
     PyObject* newobj;
     newobj = STRINGLIB_NEW(NULL, STRINGLIB_LEN(self));
@@ -97,7 +97,7 @@
 }
 
 static PyObject*
-stringlib_swapcase(PyObject *self)
+stringlib_swapcase(PyObject *self, PyObject *unused)
 {
     PyObject* newobj;
     newobj = STRINGLIB_NEW(NULL, STRINGLIB_LEN(self));
diff -urN Python-2.7.11/Objects/stringlib/string_format.h Python-2.7.11-em/Objects/stringlib/string_format.h
--- Python-2.7.11/Objects/stringlib/string_format.h	2015-12-05 20:47:17.000000000 +0100
+++ Python-2.7.11-em/Objects/stringlib/string_format.h	2016-05-16 03:00:31.220427737 +0200
@@ -1182,7 +1182,7 @@
    describing the parsed elements.  It's a wrapper around
    stringlib/string_format.h's MarkupIterator */
 static PyObject *
-formatter_parser(STRINGLIB_OBJECT *self)
+formatter_parser(STRINGLIB_OBJECT *self, PyObject *noargs)
 {
     formatteriterobject *it;
 
@@ -1317,7 +1317,7 @@
    field_name_split.  The iterator it returns is a
    FieldNameIterator */
 static PyObject *
-formatter_field_name_split(STRINGLIB_OBJECT *self)
+formatter_field_name_split(STRINGLIB_OBJECT *self, PyObject *noargs)
 {
     SubString first;
     Py_ssize_t first_idx;
diff -urN Python-2.7.11/Objects/stringobject.c Python-2.7.11-em/Objects/stringobject.c
--- Python-2.7.11/Objects/stringobject.c	2015-12-05 20:47:17.000000000 +0100
+++ Python-2.7.11-em/Objects/stringobject.c	2016-05-16 03:00:31.221427737 +0200
@@ -1981,7 +1981,7 @@
 #endif
 
 static PyObject *
-string_lower(PyStringObject *self)
+string_lower(PyStringObject *self, PyObject *noargs)
 {
     char *s;
     Py_ssize_t i, n = PyString_GET_SIZE(self);
@@ -2014,7 +2014,7 @@
 #endif
 
 static PyObject *
-string_upper(PyStringObject *self)
+string_upper(PyStringObject *self, PyObject *noargs)
 {
     char *s;
     Py_ssize_t i, n = PyString_GET_SIZE(self);
@@ -2044,7 +2044,7 @@
 characters, all remaining cased characters have lowercase.");
 
 static PyObject*
-string_title(PyStringObject *self)
+string_title(PyStringObject *self, PyObject *noargs)
 {
     char *s = PyString_AS_STRING(self), *s_new;
     Py_ssize_t i, n = PyString_GET_SIZE(self);
@@ -2079,7 +2079,7 @@
 capitalized.");
 
 static PyObject *
-string_capitalize(PyStringObject *self)
+string_capitalize(PyStringObject *self, PyObject *noargs)
 {
     char *s = PyString_AS_STRING(self), *s_new;
     Py_ssize_t i, n = PyString_GET_SIZE(self);
@@ -2158,7 +2158,7 @@
 converted to lowercase and vice versa.");
 
 static PyObject *
-string_swapcase(PyStringObject *self)
+string_swapcase(PyStringObject *self, PyObject *noargs)
 {
     char *s = PyString_AS_STRING(self), *s_new;
     Py_ssize_t i, n = PyString_GET_SIZE(self);
@@ -3316,7 +3316,7 @@
 and there is at least one character in S, False otherwise.");
 
 static PyObject*
-string_isspace(PyStringObject *self)
+string_isspace(PyStringObject *self, PyObject *noargs)
 {
     register const unsigned char *p
         = (unsigned char *) PyString_AS_STRING(self);
@@ -3347,7 +3347,7 @@
 and there is at least one character in S, False otherwise.");
 
 static PyObject*
-string_isalpha(PyStringObject *self)
+string_isalpha(PyStringObject *self, PyObject *noargs)
 {
     register const unsigned char *p
         = (unsigned char *) PyString_AS_STRING(self);
@@ -3378,7 +3378,7 @@
 and there is at least one character in S, False otherwise.");
 
 static PyObject*
-string_isalnum(PyStringObject *self)
+string_isalnum(PyStringObject *self, PyObject *noargs)
 {
     register const unsigned char *p
         = (unsigned char *) PyString_AS_STRING(self);
@@ -3409,7 +3409,7 @@
 and there is at least one character in S, False otherwise.");
 
 static PyObject*
-string_isdigit(PyStringObject *self)
+string_isdigit(PyStringObject *self, PyObject *noargs)
 {
     register const unsigned char *p
         = (unsigned char *) PyString_AS_STRING(self);
@@ -3440,7 +3440,7 @@
 at least one cased character in S, False otherwise.");
 
 static PyObject*
-string_islower(PyStringObject *self)
+string_islower(PyStringObject *self, PyObject *noargs)
 {
     register const unsigned char *p
         = (unsigned char *) PyString_AS_STRING(self);
@@ -3474,7 +3474,7 @@
 at least one cased character in S, False otherwise.");
 
 static PyObject*
-string_isupper(PyStringObject *self)
+string_isupper(PyStringObject *self, PyObject *noargs)
 {
     register const unsigned char *p
         = (unsigned char *) PyString_AS_STRING(self);
@@ -3575,7 +3575,7 @@
 "S.__sizeof__() -> size of S in memory, in bytes");
 
 static PyObject *
-string_sizeof(PyStringObject *v)
+string_sizeof(PyStringObject *v, PyObject *noargs)
 {
     Py_ssize_t res;
     res = PyStringObject_SIZE + PyString_GET_SIZE(v) * Py_TYPE(v)->tp_itemsize;
@@ -3583,7 +3583,7 @@
 }
 
 static PyObject *
-string_getnewargs(PyStringObject *v)
+string_getnewargs(PyStringObject *v, PyObject *noargs)
 {
     return Py_BuildValue("(s#)", v->ob_sval, Py_SIZE(v));
 }
diff -urN Python-2.7.11/Objects/structseq.c Python-2.7.11-em/Objects/structseq.c
--- Python-2.7.11/Objects/structseq.c	2015-12-05 20:47:17.000000000 +0100
+++ Python-2.7.11-em/Objects/structseq.c	2016-05-16 03:00:31.222427737 +0200
@@ -369,7 +369,7 @@
 }
 
 static PyObject *
-structseq_reduce(PyStructSequence* self)
+structseq_reduce(PyStructSequence* self, PyObject *noargs)
 {
     PyObject* tup;
     PyObject* dict;
diff -urN Python-2.7.11/Objects/tupleobject.c Python-2.7.11-em/Objects/tupleobject.c
--- Python-2.7.11/Objects/tupleobject.c	2015-12-05 20:47:17.000000000 +0100
+++ Python-2.7.11-em/Objects/tupleobject.c	2016-05-16 03:00:31.223427737 +0200
@@ -755,7 +755,7 @@
 }
 
 static PyObject *
-tuple_getnewargs(PyTupleObject *v)
+tuple_getnewargs(PyTupleObject *v, PyObject *noargs)
 {
     return Py_BuildValue("(N)", tupleslice(v, 0, Py_SIZE(v)));
 
@@ -972,7 +972,7 @@
 }
 
 static PyObject *
-tupleiter_len(tupleiterobject *it)
+tupleiter_len(tupleiterobject *it, PyObject *noargs)
 {
     Py_ssize_t len = 0;
     if (it->it_seq)
diff -urN Python-2.7.11/Objects/typeobject.c Python-2.7.11-em/Objects/typeobject.c
--- Python-2.7.11/Objects/typeobject.c	2015-12-05 20:47:17.000000000 +0100
+++ Python-2.7.11-em/Objects/typeobject.c	2016-05-16 03:00:31.225427737 +0200
@@ -1619,7 +1619,7 @@
 }
 
 static PyObject *
-mro_external(PyObject *self)
+mro_external(PyObject *self, PyObject *noargs)
 {
     PyTypeObject *type = (PyTypeObject *)self;
 
diff -urN Python-2.7.11/Objects/unicodeobject.c Python-2.7.11-em/Objects/unicodeobject.c
--- Python-2.7.11/Objects/unicodeobject.c	2015-12-05 20:47:17.000000000 +0100
+++ Python-2.7.11-em/Objects/unicodeobject.c	2016-05-16 03:00:31.228427737 +0200
@@ -6027,7 +6027,7 @@
 characters, all remaining cased characters have lower case.");
 
 static PyObject*
-unicode_title(PyUnicodeObject *self)
+unicode_title(PyUnicodeObject *self, PyObject *noargs)
 {
     return fixup(self, fixtitle);
 }
@@ -6039,7 +6039,7 @@
 have upper case and the rest lower case.");
 
 static PyObject*
-unicode_capitalize(PyUnicodeObject *self)
+unicode_capitalize(PyUnicodeObject *self, PyObject *noargs)
 {
     return fixup(self, fixcapitalize);
 }
@@ -6052,7 +6052,7 @@
 normalized whitespace (all whitespace strings are replaced by ' ').");
 
 static PyObject*
-unicode_capwords(PyUnicodeObject *self)
+unicode_capwords(PyUnicodeObject *self, PyObject *noargs)
 {
     PyObject *list;
     PyObject *item;
@@ -6710,7 +6710,7 @@
 at least one cased character in S, False otherwise.");
 
 static PyObject*
-unicode_islower(PyUnicodeObject *self)
+unicode_islower(PyUnicodeObject *self, PyObject *noargs)
 {
     register const Py_UNICODE *p = PyUnicode_AS_UNICODE(self);
     register const Py_UNICODE *e;
@@ -6744,7 +6744,7 @@
 at least one cased character in S, False otherwise.");
 
 static PyObject*
-unicode_isupper(PyUnicodeObject *self)
+unicode_isupper(PyUnicodeObject *self, PyObject *noargs)
 {
     register const Py_UNICODE *p = PyUnicode_AS_UNICODE(self);
     register const Py_UNICODE *e;
@@ -6780,7 +6780,7 @@
 Return False otherwise.");
 
 static PyObject*
-unicode_istitle(PyUnicodeObject *self)
+unicode_istitle(PyUnicodeObject *self, PyObject *noargs)
 {
     register const Py_UNICODE *p = PyUnicode_AS_UNICODE(self);
     register const Py_UNICODE *e;
@@ -6826,7 +6826,7 @@
 and there is at least one character in S, False otherwise.");
 
 static PyObject*
-unicode_isspace(PyUnicodeObject *self)
+unicode_isspace(PyUnicodeObject *self, PyObject *noargs)
 {
     register const Py_UNICODE *p = PyUnicode_AS_UNICODE(self);
     register const Py_UNICODE *e;
@@ -6855,7 +6855,7 @@
 and there is at least one character in S, False otherwise.");
 
 static PyObject*
-unicode_isalpha(PyUnicodeObject *self)
+unicode_isalpha(PyUnicodeObject *self, PyObject *noargs)
 {
     register const Py_UNICODE *p = PyUnicode_AS_UNICODE(self);
     register const Py_UNICODE *e;
@@ -6884,7 +6884,7 @@
 and there is at least one character in S, False otherwise.");
 
 static PyObject*
-unicode_isalnum(PyUnicodeObject *self)
+unicode_isalnum(PyUnicodeObject *self, PyObject *noargs)
 {
     register const Py_UNICODE *p = PyUnicode_AS_UNICODE(self);
     register const Py_UNICODE *e;
@@ -6913,7 +6913,7 @@
 False otherwise.");
 
 static PyObject*
-unicode_isdecimal(PyUnicodeObject *self)
+unicode_isdecimal(PyUnicodeObject *self, PyObject *noargs)
 {
     register const Py_UNICODE *p = PyUnicode_AS_UNICODE(self);
     register const Py_UNICODE *e;
@@ -6942,7 +6942,7 @@
 and there is at least one character in S, False otherwise.");
 
 static PyObject*
-unicode_isdigit(PyUnicodeObject *self)
+unicode_isdigit(PyUnicodeObject *self, PyObject *noargs)
 {
     register const Py_UNICODE *p = PyUnicode_AS_UNICODE(self);
     register const Py_UNICODE *e;
@@ -6971,7 +6971,7 @@
 False otherwise.");
 
 static PyObject*
-unicode_isnumeric(PyUnicodeObject *self)
+unicode_isnumeric(PyUnicodeObject *self, PyObject *noargs)
 {
     register const Py_UNICODE *p = PyUnicode_AS_UNICODE(self);
     register const Py_UNICODE *e;
@@ -7040,7 +7040,7 @@
 Return a copy of the string S converted to lowercase.");
 
 static PyObject*
-unicode_lower(PyUnicodeObject *self)
+unicode_lower(PyUnicodeObject *self, PyObject *noargs)
 {
     return fixup(self, fixlower);
 }
@@ -7656,7 +7656,7 @@
 and vice versa.");
 
 static PyObject*
-unicode_swapcase(PyUnicodeObject *self)
+unicode_swapcase(PyUnicodeObject *self, PyObject *noargs)
 {
     return fixup(self, fixswapcase);
 }
@@ -7685,7 +7685,7 @@
 Return a copy of S converted to uppercase.");
 
 static PyObject*
-unicode_upper(PyUnicodeObject *self)
+unicode_upper(PyUnicodeObject *self, PyObject *noargs)
 {
     return fixup(self, fixupper);
 }
@@ -7883,7 +7883,7 @@
 Return a formatted version of S as described by format_spec.");
 
 static PyObject *
-unicode__sizeof__(PyUnicodeObject *v)
+unicode__sizeof__(PyUnicodeObject *v, PyObject *noargs)
 {
     return PyInt_FromSsize_t(sizeof(PyUnicodeObject) +
                              sizeof(Py_UNICODE) * (v->length + 1));
@@ -7895,7 +7895,7 @@
 ");
 
 static PyObject *
-unicode_getnewargs(PyUnicodeObject *v)
+unicode_getnewargs(PyUnicodeObject *v, PyObject *noargs)
 {
     return Py_BuildValue("(u#)", v->str, v->length);
 }
Binary files Python-2.7.11/Parser/hostpgen and Python-2.7.11-em/Parser/hostpgen differ
diff -urN Python-2.7.11/PC/_winreg.c Python-2.7.11-em/PC/_winreg.c
--- Python-2.7.11/PC/_winreg.c	2015-12-05 20:47:17.000000000 +0100
+++ Python-2.7.11-em/PC/_winreg.c	2016-05-16 03:00:31.230427737 +0200
@@ -501,13 +501,13 @@
 
 static PyObject *PyHKEY_CloseMethod(PyObject *self, PyObject *args);
 static PyObject *PyHKEY_DetachMethod(PyObject *self, PyObject *args);
-static PyObject *PyHKEY_Enter(PyObject *self);
+static PyObject *PyHKEY_Enter(PyObject *self, PyObject *noargs);
 static PyObject *PyHKEY_Exit(PyObject *self, PyObject *args);
 
 static struct PyMethodDef PyHKEY_methods[] = {
     {"Close",  PyHKEY_CloseMethod, METH_VARARGS, PyHKEY_Close_doc},
     {"Detach", PyHKEY_DetachMethod, METH_VARARGS, PyHKEY_Detach_doc},
-    {"__enter__", (PyCFunction)PyHKEY_Enter, METH_NOARGS, NULL},
+    {"__enter__", PyHKEY_Enter, METH_NOARGS, NULL},
     {"__exit__", PyHKEY_Exit, METH_VARARGS, NULL},
     {NULL}
 };
@@ -580,7 +580,7 @@
 }
 
 static PyObject *
-PyHKEY_Enter(PyObject *self)
+PyHKEY_Enter(PyObject *self, PyObject *noargs)
 {
     Py_XINCREF(self);
     return self;
diff -urN Python-2.7.11/Python/bltinmodule.c Python-2.7.11-em/Python/bltinmodule.c
--- Python-2.7.11/Python/bltinmodule.c	2015-12-05 20:47:18.000000000 +0100
+++ Python-2.7.11-em/Python/bltinmodule.c	2016-05-16 03:00:31.232427738 +0200
@@ -865,7 +865,7 @@
 
 
 static PyObject *
-builtin_globals(PyObject *self)
+builtin_globals(PyObject *self, PyObject *noargs)
 {
     PyObject *d;
 
@@ -1338,7 +1338,7 @@
 
 
 static PyObject *
-builtin_locals(PyObject *self)
+builtin_locals(PyObject *self, PyObject *noargs)
 {
     PyObject *d;
 
@@ -2631,7 +2631,7 @@
     {"filter",          builtin_filter,     METH_VARARGS, filter_doc},
     {"format",          builtin_format,     METH_VARARGS, format_doc},
     {"getattr",         builtin_getattr,    METH_VARARGS, getattr_doc},
-    {"globals",         (PyCFunction)builtin_globals,    METH_NOARGS, globals_doc},
+    {"globals",         builtin_globals,    METH_NOARGS, globals_doc},
     {"hasattr",         builtin_hasattr,    METH_VARARGS, hasattr_doc},
     {"hash",            builtin_hash,       METH_O, hash_doc},
     {"hex",             builtin_hex,        METH_O, hex_doc},
@@ -2642,7 +2642,7 @@
     {"issubclass",  builtin_issubclass, METH_VARARGS, issubclass_doc},
     {"iter",            builtin_iter,       METH_VARARGS, iter_doc},
     {"len",             builtin_len,        METH_O, len_doc},
-    {"locals",          (PyCFunction)builtin_locals,     METH_NOARGS, locals_doc},
+    {"locals",          builtin_locals,     METH_NOARGS, locals_doc},
     {"map",             builtin_map,        METH_VARARGS, map_doc},
     {"max",             (PyCFunction)builtin_max,        METH_VARARGS | METH_KEYWORDS, max_doc},
     {"min",             (PyCFunction)builtin_min,        METH_VARARGS | METH_KEYWORDS, min_doc},
diff -urN Python-2.7.11/Python/pythonrun.c Python-2.7.11-em/Python/pythonrun.c
--- Python-2.7.11/Python/pythonrun.c	2015-12-05 20:47:19.000000000 +0100
+++ Python-2.7.11-em/Python/pythonrun.c	2016-05-15 02:30:09.067201194 +0200
@@ -1862,6 +1862,8 @@
     if (sigaction(sig, NULL, &context) == -1)
         return SIG_ERR;
     return context.sa_handler;
+#elif defined(EMSCRIPTEN)
+    return SIG_ERR;
 #else
     PyOS_sighandler_t handler;
 /* Special signal handling for the secure CRT in Visual Studio 2005 */
@@ -1903,6 +1905,8 @@
     if (sigaction(sig, &context, &ocontext) == -1)
         return SIG_ERR;
     return ocontext.sa_handler;
+#elif defined(EMSCRIPTEN)
+    return SIG_ERR;
 #else
     PyOS_sighandler_t oldhandler;
     oldhandler = signal(sig, handler);
diff -urN Python-2.7.11/Python/sysmodule.c Python-2.7.11-em/Python/sysmodule.c
--- Python-2.7.11/Python/sysmodule.c	2015-12-05 20:47:19.000000000 +0100
+++ Python-2.7.11-em/Python/sysmodule.c	2016-05-16 03:00:31.233427738 +0200
@@ -227,7 +227,7 @@
 #ifdef Py_USING_UNICODE
 
 static PyObject *
-sys_getdefaultencoding(PyObject *self)
+sys_getdefaultencoding(PyObject *self, PyObject *noargs)
 {
     return PyString_FromString(PyUnicode_GetDefaultEncoding());
 }
@@ -258,7 +258,7 @@
 );
 
 static PyObject *
-sys_getfilesystemencoding(PyObject *self)
+sys_getfilesystemencoding(PyObject *self, PyObject *noargs)
 {
     if (Py_FileSystemDefaultEncoding)
         return PyString_FromString(Py_FileSystemDefaultEncoding);
@@ -540,7 +540,7 @@
 );
 
 static PyObject *
-sys_getrecursionlimit(PyObject *self)
+sys_getrecursionlimit(PyObject *self, PyObject *noargs)
 {
     return PyInt_FromLong(Py_GetRecursionLimit());
 }
@@ -592,7 +592,7 @@
 };
 
 static PyObject *
-sys_getwindowsversion(PyObject *self)
+sys_getwindowsversion(PyObject *self, PyObject *noargs)
 {
     PyObject *version;
     int pos = 0;
@@ -773,7 +773,7 @@
 
 #ifdef Py_REF_DEBUG
 static PyObject *
-sys_gettotalrefcount(PyObject *self)
+sys_gettotalrefcount(PyObject *self, PyObject *noargs)
 {
     return PyInt_FromSsize_t(_Py_GetRefTotal());
 }
@@ -789,7 +789,7 @@
 
 #ifdef COUNT_ALLOCS
 static PyObject *
-sys_getcounts(PyObject *self)
+sys_getcounts(PyObject *self, PyObject *noargs)
 {
     extern PyObject *get_counts(void);
 
diff -urN Python-2.7.11/Python-2.7.10/config.site Python-2.7.11-em/Python-2.7.10/config.site
--- Python-2.7.11/Python-2.7.10/config.site	1970-01-01 01:00:00.000000000 +0100
+++ Python-2.7.11-em/Python-2.7.10/config.site	2016-05-15 02:30:04.492201078 +0200
@@ -0,0 +1,2 @@
+ac_cv_file__dev_ptmx=no
+ac_cv_file__dev_ptc=no
diff -urN Python-2.7.11/setup.py Python-2.7.11-em/setup.py
--- Python-2.7.11/setup.py	2015-12-05 20:47:20.000000000 +0100
+++ Python-2.7.11-em/setup.py	2016-05-16 03:00:31.234427738 +0200
@@ -325,7 +325,7 @@
             self.get_ext_filename(self.get_ext_fullname(ext.name)))
 
         # Don't try to load extensions for cross builds
-        if cross_compiling:
+        if cross_compiling or True:
             return
 
         try:
@@ -789,21 +789,22 @@
                                libraries=math_libs) )
         # Detect SSL support for the socket module (via _ssl)
         search_for_ssl_incs_in = [
-                              '/usr/local/ssl/include',
-                              '/usr/contrib/ssl/include/'
+                              '../thirdparty/emscripten-libs/openssl/include',
                              ]
         ssl_incs = find_file('openssl/ssl.h', inc_dirs,
                              search_for_ssl_incs_in
                              )
-        if ssl_incs is not None:
-            krb5_h = find_file('krb5.h', inc_dirs,
-                               ['/usr/kerberos/include'])
-            if krb5_h:
-                ssl_incs += krb5_h
-        ssl_libs = find_library_file(self.compiler, 'ssl',lib_dirs,
-                                     ['/usr/local/ssl/lib',
-                                      '/usr/contrib/ssl/lib/'
-                                     ] )
+        ssl_incs = ["../thirdparty/emscripten-libs/openssl/include"]
+        ssl_libs = ["../thirdparty/emscripten-libs/openssl/lib"]
+        #if ssl_incs is not None:
+        #    krb5_h = find_file('krb5.h', inc_dirs,
+        #                       ['/usr/kerberos/include'])
+        #    if krb5_h:
+        #        ssl_incs += krb5_h
+        #ssl_libs = find_library_file(self.compiler, 'ssl',lib_dirs,
+        #                             ['/usr/local/ssl/lib',
+        #                              '/usr/contrib/ssl/lib/'
+        #                             ] )
 
         if (ssl_incs is not None and
             ssl_libs is not None):
@@ -1344,7 +1345,7 @@
         # provided by the ncurses library.
         panel_library = 'panel'
         curses_incs = None
-        if curses_library.startswith('ncurses'):
+        if False and curses_library.startswith('ncurses'):
             if curses_library == 'ncursesw':
                 # Bug 1464056: If _curses.so links with ncursesw,
                 # _curses_panel.so must link with panelw.
@@ -1355,7 +1356,7 @@
             exts.append( Extension('_curses', ['_cursesmodule.c'],
                                    include_dirs = curses_incs,
                                    libraries = curses_libs) )
-        elif curses_library == 'curses' and host_platform != 'darwin':
+        elif False and curses_library == 'curses' and host_platform != 'darwin':
                 # OSX has an old Berkeley curses, not good enough for
                 # the _curses module.
             if (self.compiler.find_library_file(lib_dirs, 'terminfo')):
@@ -1371,7 +1372,7 @@
             missing.append('_curses')
 
         # If the curses module is enabled, check for the panel module
-        if (module_enabled(exts, '_curses') and
+        if False and (module_enabled(exts, '_curses') and
             self.compiler.find_library_file(lib_dirs, panel_library)):
             exts.append( Extension('_curses_panel', ['_curses_panel.c'],
                                    include_dirs = curses_incs,
@@ -1393,7 +1394,7 @@
         # http://www.gzip.org/zlib/
         zlib_inc = find_file('zlib.h', [], inc_dirs)
         have_zlib = False
-        if zlib_inc is not None:
+        if False and zlib_inc is not None:
             zlib_h = zlib_inc[0] + '/zlib.h'
             version = '"0.0.0"'
             version_req = '"1.1.3"'
@@ -1440,7 +1441,7 @@
                                extra_link_args = extra_link_args) )
 
         # Gustavo Niemeyer's bz2 module.
-        if (self.compiler.find_library_file(lib_dirs, 'bz2')):
+        if False and (self.compiler.find_library_file(lib_dirs, 'bz2')):
             if host_platform == "darwin":
                 bz2_extra_link_args = ('-Wl,-search_paths_first',)
             else:
